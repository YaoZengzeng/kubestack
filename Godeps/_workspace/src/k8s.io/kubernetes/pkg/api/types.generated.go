/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [18]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(18)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj124 int
	var yyb124 bool
	var yyhl124 bool = l >= 0
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj124++
		if yyhl124 {
			yyb124 = yyj124 > l
		} else {
			yyb124 = r.CheckBreak()
		}
		if yyb124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [17]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.HostPath != nil
			yyq144[1] = x.EmptyDir != nil
			yyq144[2] = x.GCEPersistentDisk != nil
			yyq144[3] = x.AWSElasticBlockStore != nil
			yyq144[4] = x.GitRepo != nil
			yyq144[5] = x.Secret != nil
			yyq144[6] = x.NFS != nil
			yyq144[7] = x.ISCSI != nil
			yyq144[8] = x.Glusterfs != nil
			yyq144[9] = x.PersistentVolumeClaim != nil
			yyq144[10] = x.RBD != nil
			yyq144[11] = x.FlexVolume != nil
			yyq144[12] = x.Cinder != nil
			yyq144[13] = x.CephFS != nil
			yyq144[14] = x.Flocker != nil
			yyq144[15] = x.DownwardAPI != nil
			yyq144[16] = x.FC != nil
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(17)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym200 := z.EncBinary()
		_ = yym200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep201 := !z.EncBinary()
			yy2arr201 := z.EncBasicHandle().StructToArray
			var yyq201 [12]bool
			_, _, _ = yysep201, yyq201, yy2arr201
			const yyr201 bool = false
			yyq201[0] = x.GCEPersistentDisk != nil
			yyq201[1] = x.AWSElasticBlockStore != nil
			yyq201[2] = x.HostPath != nil
			yyq201[3] = x.Glusterfs != nil
			yyq201[4] = x.NFS != nil
			yyq201[5] = x.RBD != nil
			yyq201[6] = x.ISCSI != nil
			yyq201[7] = x.FlexVolume != nil
			yyq201[8] = x.Cinder != nil
			yyq201[9] = x.CephFS != nil
			yyq201[10] = x.FC != nil
			yyq201[11] = x.Flocker != nil
			var yynn201 int
			if yyr201 || yy2arr201 {
				r.EncodeArrayStart(12)
			} else {
				yynn201 = 0
				for _, b := range yyq201 {
					if b {
						yynn201++
					}
				}
				r.EncodeMapStart(yynn201)
				yynn201 = 0
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym214 := z.DecBinary()
	_ = yym214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct215 := r.ContainerType()
		if yyct215 == codecSelferValueTypeMap1234 {
			yyl215 := r.ReadMapStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl215, d)
			}
		} else if yyct215 == codecSelferValueTypeArray1234 {
			yyl215 := r.ReadArrayStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys216Slc
	var yyhl216 bool = l >= 0
	for yyj216 := 0; ; yyj216++ {
		if yyhl216 {
			if yyj216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys216Slc = r.DecodeBytes(yys216Slc, true, true)
		yys216 := string(yys216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys216 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys216)
		} // end switch yys216
	} // end for yyj216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj229 int
	var yyb229 bool
	var yyhl229 bool = l >= 0
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj229++
		if yyhl229 {
			yyb229 = yyj229 > l
		} else {
			yyb229 = r.CheckBreak()
		}
		if yyb229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym242 := z.EncBinary()
		_ = yym242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep243 := !z.EncBinary()
			yy2arr243 := z.EncBasicHandle().StructToArray
			var yyq243 [2]bool
			_, _, _ = yysep243, yyq243, yy2arr243
			const yyr243 bool = false
			yyq243[1] = x.ReadOnly != false
			var yynn243 int
			if yyr243 || yy2arr243 {
				r.EncodeArrayStart(2)
			} else {
				yynn243 = 1
				for _, b := range yyq243 {
					if b {
						yynn243++
					}
				}
				r.EncodeMapStart(yynn243)
				yynn243 = 0
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym245 := z.EncBinary()
				_ = yym245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym246 := z.EncBinary()
				_ = yym246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq243[1] {
					yym248 := z.EncBinary()
					_ = yym248
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym249 := z.EncBinary()
					_ = yym249
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym250 := z.DecBinary()
	_ = yym250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct251 := r.ContainerType()
		if yyct251 == codecSelferValueTypeMap1234 {
			yyl251 := r.ReadMapStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl251, d)
			}
		} else if yyct251 == codecSelferValueTypeArray1234 {
			yyl251 := r.ReadArrayStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys252Slc
	var yyhl252 bool = l >= 0
	for yyj252 := 0; ; yyj252++ {
		if yyhl252 {
			if yyj252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys252Slc = r.DecodeBytes(yys252Slc, true, true)
		yys252 := string(yys252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys252 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys252)
		} // end switch yys252
	} // end for yyj252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj255 int
	var yyb255 bool
	var yyhl255 bool = l >= 0
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj255++
		if yyhl255 {
			yyb255 = yyj255 > l
		} else {
			yyb255 = r.CheckBreak()
		}
		if yyb255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.ObjectMeta
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy270 := &x.Spec
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Spec
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy273 := &x.Status
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Status
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv280 := &x.ObjectMeta
				yyv280.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv281 := &x.Spec
				yyv281.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv282 := &x.Status
				yyv282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yyv286.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv287 := &x.Spec
		yyv287.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv288 := &x.Status
		yyv288.CodecDecodeSelf(d)
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [16]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq290[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq290[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq290[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq290[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq290[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq290[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq290[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq290[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq290[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq290[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq290[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq290[13] = len(x.AccessModes) != 0
			yyq290[14] = x.ClaimRef != nil
			yyq290[15] = x.PersistentVolumeReclaimPolicy != ""
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(16)
			} else {
				yynn290 = 1
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr290 || yy2arr290 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr290 || yy2arr290 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr290 || yy2arr290 {
				if yyn294 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr290 || yy2arr290 {
				if yyn295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr290 || yy2arr290 {
				if yyn296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr290 || yy2arr290 {
				if yyn297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr290 || yy2arr290 {
				if yyn298 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr290 || yy2arr290 {
				if yyn299 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr290 || yy2arr290 {
				if yyn300 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr290 || yy2arr290 {
				if yyn301 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr290 || yy2arr290 {
				if yyn302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr290 || yy2arr290 {
				if yyn303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[13] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym305 := z.EncBinary()
						_ = yym305
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[14] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[15] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq290[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv312 := &x.Capacity
				yyv312.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv325 := &x.AccessModes
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv325), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv330 := &x.Capacity
		yyv330.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv343 := &x.AccessModes
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv343), d)
		}
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym347 := z.EncBinary()
	_ = yym347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym349 := z.EncBinary()
		_ = yym349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep350 := !z.EncBinary()
			yy2arr350 := z.EncBasicHandle().StructToArray
			var yyq350 [3]bool
			_, _, _ = yysep350, yyq350, yy2arr350
			const yyr350 bool = false
			yyq350[0] = x.Phase != ""
			yyq350[1] = x.Message != ""
			yyq350[2] = x.Reason != ""
			var yynn350 int
			if yyr350 || yy2arr350 {
				r.EncodeArrayStart(3)
			} else {
				yynn350 = 0
				for _, b := range yyq350 {
					if b {
						yynn350++
					}
				}
				r.EncodeMapStart(yynn350)
				yynn350 = 0
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[1] {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[2] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym358 := z.DecBinary()
	_ = yym358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct359 := r.ContainerType()
		if yyct359 == codecSelferValueTypeMap1234 {
			yyl359 := r.ReadMapStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl359, d)
			}
		} else if yyct359 == codecSelferValueTypeArray1234 {
			yyl359 := r.ReadArrayStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys360Slc
	var yyhl360 bool = l >= 0
	for yyj360 := 0; ; yyj360++ {
		if yyhl360 {
			if yyj360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys360Slc = r.DecodeBytes(yys360Slc, true, true)
		yys360 := string(yys360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys360 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys360)
		} // end switch yys360
	} // end for yyj360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [4]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = x.Kind != ""
			yyq369[1] = x.APIVersion != ""
			yyq369[2] = true
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(4)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[1] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[2] {
					yy377 := &x.ListMeta
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy377) {
					} else {
						z.EncFallback(yy377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy379 := &x.ListMeta
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy379) {
					} else {
						z.EncFallback(yy379)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv389 := &x.ListMeta
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv389) {
				} else {
					z.DecFallback(yyv389, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv391 := &x.Items
				yym392 := z.DecBinary()
				_ = yym392
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv396 := &x.ListMeta
		yym397 := z.DecBinary()
		_ = yym397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv396) {
		} else {
			z.DecFallback(yyv396, false)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv398 := &x.Items
		yym399 := z.DecBinary()
		_ = yym399
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv398), d)
		}
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym400 := z.EncBinary()
		_ = yym400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep401 := !z.EncBinary()
			yy2arr401 := z.EncBasicHandle().StructToArray
			var yyq401 [5]bool
			_, _, _ = yysep401, yyq401, yy2arr401
			const yyr401 bool = false
			yyq401[0] = x.Kind != ""
			yyq401[1] = x.APIVersion != ""
			yyq401[2] = true
			yyq401[3] = true
			yyq401[4] = true
			var yynn401 int
			if yyr401 || yy2arr401 {
				r.EncodeArrayStart(5)
			} else {
				yynn401 = 0
				for _, b := range yyq401 {
					if b {
						yynn401++
					}
				}
				r.EncodeMapStart(yynn401)
				yynn401 = 0
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[0] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[1] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[2] {
					yy409 := &x.ObjectMeta
					yy409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy410 := &x.ObjectMeta
					yy410.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[3] {
					yy412 := &x.Spec
					yy412.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy413 := &x.Spec
					yy413.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[4] {
					yy415 := &x.Status
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.Status
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym417 := z.DecBinary()
	_ = yym417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct418 := r.ContainerType()
		if yyct418 == codecSelferValueTypeMap1234 {
			yyl418 := r.ReadMapStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl418, d)
			}
		} else if yyct418 == codecSelferValueTypeArray1234 {
			yyl418 := r.ReadArrayStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys419Slc
	var yyhl419 bool = l >= 0
	for yyj419 := 0; ; yyj419++ {
		if yyhl419 {
			if yyj419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys419Slc = r.DecodeBytes(yys419Slc, true, true)
		yys419 := string(yys419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys419 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv422 := &x.ObjectMeta
				yyv422.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv423 := &x.Spec
				yyv423.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv424 := &x.Status
				yyv424.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys419)
		} // end switch yys419
	} // end for yyj419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = x.APIVersion != ""
			yyq432[2] = true
			var yynn432 int
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				yynn432 = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
				yynn432 = 0
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[1] {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[2] {
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv452 := &x.ListMeta
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv452) {
				} else {
					z.DecFallback(yyv452, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv454 := &x.Items
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj456 int
	var yyb456 bool
	var yyhl456 bool = l >= 0
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv459 := &x.ListMeta
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv459) {
		} else {
			z.DecFallback(yyv459, false)
		}
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv461 := &x.Items
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv461), d)
		}
	}
	for {
		yyj456++
		if yyhl456 {
			yyb456 = yyj456 > l
		} else {
			yyb456 = r.CheckBreak()
		}
		if yyb456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym463 := z.EncBinary()
		_ = yym463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep464 := !z.EncBinary()
			yy2arr464 := z.EncBasicHandle().StructToArray
			var yyq464 [3]bool
			_, _, _ = yysep464, yyq464, yy2arr464
			const yyr464 bool = false
			yyq464[0] = len(x.AccessModes) != 0
			yyq464[1] = true
			yyq464[2] = x.VolumeName != ""
			var yynn464 int
			if yyr464 || yy2arr464 {
				r.EncodeArrayStart(3)
			} else {
				yynn464 = 0
				for _, b := range yyq464 {
					if b {
						yynn464++
					}
				}
				r.EncodeMapStart(yynn464)
				yynn464 = 0
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym466 := z.EncBinary()
						_ = yym466
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym467 := z.EncBinary()
						_ = yym467
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[1] {
					yy469 := &x.Resources
					yy469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy470 := &x.Resources
					yy470.CodecEncodeSelf(e)
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[2] {
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym474 := z.DecBinary()
	_ = yym474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct475 := r.ContainerType()
		if yyct475 == codecSelferValueTypeMap1234 {
			yyl475 := r.ReadMapStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl475, d)
			}
		} else if yyct475 == codecSelferValueTypeArray1234 {
			yyl475 := r.ReadArrayStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys476Slc
	var yyhl476 bool = l >= 0
	for yyj476 := 0; ; yyj476++ {
		if yyhl476 {
			if yyj476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys476Slc = r.DecodeBytes(yys476Slc, true, true)
		yys476 := string(yys476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys476 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv477 := &x.AccessModes
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv477), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv479 := &x.Resources
				yyv479.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys476)
		} // end switch yys476
	} // end for yyj476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv482 := &x.AccessModes
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv482), d)
		}
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv484 := &x.Resources
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [3]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Phase != ""
			yyq487[1] = len(x.AccessModes) != 0
			yyq487[2] = len(x.Capacity) != 0
			var yynn487 int
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(3)
			} else {
				yynn487 = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
				yynn487 = 0
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym491 := z.EncBinary()
						_ = yym491
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv497 := &x.AccessModes
				yym498 := z.DecBinary()
				_ = yym498
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv497), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv499 := &x.Capacity
				yyv499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv502 := &x.AccessModes
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv502), d)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv504 := &x.Capacity
		yyv504.CodecDecodeSelf(d)
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym505 := z.EncBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym506 := z.DecBinary()
	_ = yym506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym507 := z.EncBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym511 := z.EncBinary()
		_ = yym511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep512 := !z.EncBinary()
			yy2arr512 := z.EncBasicHandle().StructToArray
			var yyq512 [1]bool
			_, _, _ = yysep512, yyq512, yy2arr512
			const yyr512 bool = false
			var yynn512 int
			if yyr512 || yy2arr512 {
				r.EncodeArrayStart(1)
			} else {
				yynn512 = 1
				for _, b := range yyq512 {
					if b {
						yynn512++
					}
				}
				r.EncodeMapStart(yynn512)
				yynn512 = 0
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym514 := z.EncBinary()
				_ = yym514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym515 := z.EncBinary()
				_ = yym515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym516 := z.DecBinary()
	_ = yym516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct517 := r.ContainerType()
		if yyct517 == codecSelferValueTypeMap1234 {
			yyl517 := r.ReadMapStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl517, d)
			}
		} else if yyct517 == codecSelferValueTypeArray1234 {
			yyl517 := r.ReadArrayStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys518Slc
	var yyhl518 bool = l >= 0
	for yyj518 := 0; ; yyj518++ {
		if yyhl518 {
			if yyj518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys518Slc = r.DecodeBytes(yys518Slc, true, true)
		yys518 := string(yys518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys518 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys518)
		} // end switch yys518
	} // end for yyj518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj520 int
	var yyb520 bool
	var yyhl520 bool = l >= 0
	yyj520++
	if yyhl520 {
		yyb520 = yyj520 > l
	} else {
		yyb520 = r.CheckBreak()
	}
	if yyb520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj520++
		if yyhl520 {
			yyb520 = yyj520 > l
		} else {
			yyb520 = r.CheckBreak()
		}
		if yyb520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym522 := z.EncBinary()
		_ = yym522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep523 := !z.EncBinary()
			yy2arr523 := z.EncBasicHandle().StructToArray
			var yyq523 [1]bool
			_, _, _ = yysep523, yyq523, yy2arr523
			const yyr523 bool = false
			yyq523[0] = x.Medium != ""
			var yynn523 int
			if yyr523 || yy2arr523 {
				r.EncodeArrayStart(1)
			} else {
				yynn523 = 0
				for _, b := range yyq523 {
					if b {
						yynn523++
					}
				}
				r.EncodeMapStart(yynn523)
				yynn523 = 0
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct526 := r.ContainerType()
		if yyct526 == codecSelferValueTypeMap1234 {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if yyct526 == codecSelferValueTypeArray1234 {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys527 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym531 := z.EncBinary()
	_ = yym531
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym533 := z.EncBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym534 := z.DecBinary()
	_ = yym534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [4]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[1] = x.FSType != ""
			yyq536[2] = x.Partition != 0
			yyq536[3] = x.ReadOnly != false
			var yynn536 int
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(4)
			} else {
				yynn536 = 1
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
				yynn536 = 0
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym538 := z.EncBinary()
				_ = yym538
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym539 := z.EncBinary()
				_ = yym539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[1] {
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[2] {
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[3] {
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym549 := z.DecBinary()
	_ = yym549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct550 := r.ContainerType()
		if yyct550 == codecSelferValueTypeMap1234 {
			yyl550 := r.ReadMapStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl550, d)
			}
		} else if yyct550 == codecSelferValueTypeArray1234 {
			yyl550 := r.ReadArrayStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys551Slc
	var yyhl551 bool = l >= 0
	for yyj551 := 0; ; yyj551++ {
		if yyhl551 {
			if yyj551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys551Slc = r.DecodeBytes(yys551Slc, true, true)
		yys551 := string(yys551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys551 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys551)
		} // end switch yys551
	} // end for yyj551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj556 int
	var yyb556 bool
	var yyhl556 bool = l >= 0
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj556++
		if yyhl556 {
			yyb556 = yyj556 > l
		} else {
			yyb556 = r.CheckBreak()
		}
		if yyb556 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj556-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [6]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			yyq562[0] = x.TargetPortal != ""
			yyq562[1] = x.IQN != ""
			yyq562[2] = x.Lun != 0
			yyq562[3] = x.ISCSIInterface != ""
			yyq562[4] = x.FSType != ""
			yyq562[5] = x.ReadOnly != false
			var yynn562 int
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(6)
			} else {
				yynn562 = 0
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
				yynn562 = 0
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[0] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[1] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[2] {
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[3] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[4] {
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[5] {
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq562[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj590 int
	var yyb590 bool
	var yyhl590 bool = l >= 0
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj590++
		if yyhl590 {
			yyb590 = yyj590 > l
		} else {
			yyb590 = r.CheckBreak()
		}
		if yyb590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [4]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[3] = x.ReadOnly != false
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(4)
			} else {
				yynn598 = 3
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy603 := *x.Lun
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeInt(int64(yy603))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy605 := *x.Lun
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeInt(int64(yy605))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[3] {
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq598[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym613 := z.DecBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct614 := r.ContainerType()
		if yyct614 == codecSelferValueTypeMap1234 {
			yyl614 := r.ReadMapStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl614, d)
			}
		} else if yyct614 == codecSelferValueTypeArray1234 {
			yyl614 := r.ReadArrayStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys615Slc
	var yyhl615 bool = l >= 0
	for yyj615 := 0; ; yyj615++ {
		if yyhl615 {
			if yyj615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys615Slc = r.DecodeBytes(yys615Slc, true, true)
		yys615 := string(yys615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys615 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv616 := &x.TargetWWNs
				yym617 := z.DecBinary()
				_ = yym617
				if false {
				} else {
					z.F.DecSliceStringX(yyv616, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym619 := z.DecBinary()
				_ = yym619
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys615)
		} // end switch yys615
	} // end for yyj615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj622 int
	var yyb622 bool
	var yyhl622 bool = l >= 0
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv623 := &x.TargetWWNs
		yym624 := z.DecBinary()
		_ = yym624
		if false {
		} else {
			z.F.DecSliceStringX(yyv623, false, d)
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym626 := z.DecBinary()
		_ = yym626
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj622++
		if yyhl622 {
			yyb622 = yyj622 > l
		} else {
			yyb622 = r.CheckBreak()
		}
		if yyb622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [5]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[1] = x.FSType != ""
			yyq630[2] = x.SecretRef != nil
			yyq630[3] = x.ReadOnly != false
			yyq630[4] = len(x.Options) != 0
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(5)
			} else {
				yynn630 = 1
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym632 := z.EncBinary()
				_ = yym632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[1] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym642 := z.EncBinary()
						_ = yym642
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym643 := z.EncBinary()
						_ = yym643
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym644 := z.DecBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct645 := r.ContainerType()
		if yyct645 == codecSelferValueTypeMap1234 {
			yyl645 := r.ReadMapStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl645, d)
			}
		} else if yyct645 == codecSelferValueTypeArray1234 {
			yyl645 := r.ReadArrayStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys646Slc
	var yyhl646 bool = l >= 0
	for yyj646 := 0; ; yyj646++ {
		if yyhl646 {
			if yyj646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys646Slc = r.DecodeBytes(yys646Slc, true, true)
		yys646 := string(yys646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys646 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv651 := &x.Options
				yym652 := z.DecBinary()
				_ = yym652
				if false {
				} else {
					z.F.DecMapStringStringX(yyv651, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys646)
		} // end switch yys646
	} // end for yyj646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj653 int
	var yyb653 bool
	var yyhl653 bool = l >= 0
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv658 := &x.Options
		yym659 := z.DecBinary()
		_ = yym659
		if false {
		} else {
			z.F.DecMapStringStringX(yyv658, false, d)
		}
	}
	for {
		yyj653++
		if yyhl653 {
			yyb653 = yyj653 > l
		} else {
			yyb653 = r.CheckBreak()
		}
		if yyb653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym660 := z.EncBinary()
		_ = yym660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep661 := !z.EncBinary()
			yy2arr661 := z.EncBasicHandle().StructToArray
			var yyq661 [4]bool
			_, _, _ = yysep661, yyq661, yy2arr661
			const yyr661 bool = false
			yyq661[1] = x.FSType != ""
			yyq661[2] = x.Partition != 0
			yyq661[3] = x.ReadOnly != false
			var yynn661 int
			if yyr661 || yy2arr661 {
				r.EncodeArrayStart(4)
			} else {
				yynn661 = 1
				for _, b := range yyq661 {
					if b {
						yynn661++
					}
				}
				r.EncodeMapStart(yynn661)
				yynn661 = 0
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym664 := z.EncBinary()
				_ = yym664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[1] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[2] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[3] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq661[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym674 := z.DecBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct675 := r.ContainerType()
		if yyct675 == codecSelferValueTypeMap1234 {
			yyl675 := r.ReadMapStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl675, d)
			}
		} else if yyct675 == codecSelferValueTypeArray1234 {
			yyl675 := r.ReadArrayStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys676Slc
	var yyhl676 bool = l >= 0
	for yyj676 := 0; ; yyj676++ {
		if yyhl676 {
			if yyj676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys676Slc = r.DecodeBytes(yys676Slc, true, true)
		yys676 := string(yys676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys676 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys676)
		} // end switch yys676
	} // end for yyj676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj681 int
	var yyb681 bool
	var yyhl681 bool = l >= 0
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj681++
		if yyhl681 {
			yyb681 = yyj681 > l
		} else {
			yyb681 = r.CheckBreak()
		}
		if yyb681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[1] = x.Revision != ""
			yyq687[2] = x.Directory != ""
			var yynn687 int
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				yynn687 = 1
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
				yynn687 = 0
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[1] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct698 := r.ContainerType()
		if yyct698 == codecSelferValueTypeMap1234 {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if yyct698 == codecSelferValueTypeArray1234 {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys699 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [1]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			var yynn708 int
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(1)
			} else {
				yynn708 = 1
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
				yynn708 = 0
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym710 := z.EncBinary()
				_ = yym710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj716 int
	var yyb716 bool
	var yyhl716 bool = l >= 0
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj716++
		if yyhl716 {
			yyb716 = yyj716 > l
		} else {
			yyb716 = r.CheckBreak()
		}
		if yyb716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [3]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[2] = x.ReadOnly != false
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(3)
			} else {
				yynn719 = 2
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[2] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj735 int
	var yyb735 bool
	var yyhl735 bool = l >= 0
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj735++
		if yyhl735 {
			yyb735 = yyj735 > l
		} else {
			yyb735 = r.CheckBreak()
		}
		if yyb735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym739 := z.EncBinary()
		_ = yym739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep740 := !z.EncBinary()
			yy2arr740 := z.EncBasicHandle().StructToArray
			var yyq740 [3]bool
			_, _, _ = yysep740, yyq740, yy2arr740
			const yyr740 bool = false
			yyq740[2] = x.ReadOnly != false
			var yynn740 int
			if yyr740 || yy2arr740 {
				r.EncodeArrayStart(3)
			} else {
				yynn740 = 2
				for _, b := range yyq740 {
					if b {
						yynn740++
					}
				}
				r.EncodeMapStart(yynn740)
				yynn740 = 0
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[2] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym750 := z.DecBinary()
	_ = yym750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct751 := r.ContainerType()
		if yyct751 == codecSelferValueTypeMap1234 {
			yyl751 := r.ReadMapStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl751, d)
			}
		} else if yyct751 == codecSelferValueTypeArray1234 {
			yyl751 := r.ReadArrayStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys752Slc
	var yyhl752 bool = l >= 0
	for yyj752 := 0; ; yyj752++ {
		if yyhl752 {
			if yyj752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys752Slc = r.DecodeBytes(yys752Slc, true, true)
		yys752 := string(yys752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys752 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys752)
		} // end switch yys752
	} // end for yyj752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym760 := z.EncBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep761 := !z.EncBinary()
			yy2arr761 := z.EncBasicHandle().StructToArray
			var yyq761 [8]bool
			_, _, _ = yysep761, yyq761, yy2arr761
			const yyr761 bool = false
			yyq761[2] = x.FSType != ""
			yyq761[7] = x.ReadOnly != false
			var yynn761 int
			if yyr761 || yy2arr761 {
				r.EncodeArrayStart(8)
			} else {
				yynn761 = 6
				for _, b := range yyq761 {
					if b {
						yynn761++
					}
				}
				r.EncodeMapStart(yynn761)
				yynn761 = 0
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[2] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[7] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq761[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym784 := z.DecBinary()
	_ = yym784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct785 := r.ContainerType()
		if yyct785 == codecSelferValueTypeMap1234 {
			yyl785 := r.ReadMapStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl785, d)
			}
		} else if yyct785 == codecSelferValueTypeArray1234 {
			yyl785 := r.ReadArrayStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys786Slc
	var yyhl786 bool = l >= 0
	for yyj786 := 0; ; yyj786++ {
		if yyhl786 {
			if yyj786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys786Slc = r.DecodeBytes(yys786Slc, true, true)
		yys786 := string(yys786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys786 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv787 := &x.CephMonitors
				yym788 := z.DecBinary()
				_ = yym788
				if false {
				} else {
					z.F.DecSliceStringX(yyv787, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys786)
		} // end switch yys786
	} // end for yyj786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv797 := &x.CephMonitors
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else {
			z.F.DecSliceStringX(yyv797, false, d)
		}
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym806 := z.EncBinary()
		_ = yym806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep807 := !z.EncBinary()
			yy2arr807 := z.EncBasicHandle().StructToArray
			var yyq807 [4]bool
			_, _, _ = yysep807, yyq807, yy2arr807
			const yyr807 bool = false
			yyq807[1] = x.FSType != ""
			yyq807[2] = x.ReadOnly != false
			yyq807[3] = x.WithOpenStackCP != false
			var yynn807 int
			if yyr807 || yy2arr807 {
				r.EncodeArrayStart(4)
			} else {
				yynn807 = 1
				for _, b := range yyq807 {
					if b {
						yynn807++
					}
				}
				r.EncodeMapStart(yynn807)
				yynn807 = 0
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[1] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[2] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[3] {
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeBool(bool(x.WithOpenStackCP))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq807[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("withOpenStackCP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeBool(bool(x.WithOpenStackCP))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym820 := z.DecBinary()
	_ = yym820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct821 := r.ContainerType()
		if yyct821 == codecSelferValueTypeMap1234 {
			yyl821 := r.ReadMapStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl821, d)
			}
		} else if yyct821 == codecSelferValueTypeArray1234 {
			yyl821 := r.ReadArrayStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys822Slc
	var yyhl822 bool = l >= 0
	for yyj822 := 0; ; yyj822++ {
		if yyhl822 {
			if yyj822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys822Slc = r.DecodeBytes(yys822Slc, true, true)
		yys822 := string(yys822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys822 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "withOpenStackCP":
			if r.TryDecodeAsNil() {
				x.WithOpenStackCP = false
			} else {
				x.WithOpenStackCP = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys822)
		} // end switch yys822
	} // end for yyj822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj827 int
	var yyb827 bool
	var yyhl827 bool = l >= 0
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WithOpenStackCP = false
	} else {
		x.WithOpenStackCP = bool(r.DecodeBool())
	}
	for {
		yyj827++
		if yyhl827 {
			yyb827 = yyj827 > l
		} else {
			yyb827 = r.CheckBreak()
		}
		if yyb827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym832 := z.EncBinary()
		_ = yym832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep833 := !z.EncBinary()
			yy2arr833 := z.EncBasicHandle().StructToArray
			var yyq833 [5]bool
			_, _, _ = yysep833, yyq833, yy2arr833
			const yyr833 bool = false
			yyq833[1] = x.User != ""
			yyq833[2] = x.SecretFile != ""
			yyq833[3] = x.SecretRef != nil
			yyq833[4] = x.ReadOnly != false
			var yynn833 int
			if yyr833 || yy2arr833 {
				r.EncodeArrayStart(5)
			} else {
				yynn833 = 1
				for _, b := range yyq833 {
					if b {
						yynn833++
					}
				}
				r.EncodeMapStart(yynn833)
				yynn833 = 0
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[1] {
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[2] {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq833[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[4] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq833[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct848 := r.ContainerType()
		if yyct848 == codecSelferValueTypeMap1234 {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if yyct848 == codecSelferValueTypeArray1234 {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys849 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv850 := &x.Monitors
				yym851 := z.DecBinary()
				_ = yym851
				if false {
				} else {
					z.F.DecSliceStringX(yyv850, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj856 int
	var yyb856 bool
	var yyhl856 bool = l >= 0
	yyj856++
	if yyhl856 {
		yyb856 = yyj856 > l
	} else {
		yyb856 = r.CheckBreak()
	}
	if yyb856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv857 := &x.Monitors
		yym858 := z.DecBinary()
		_ = yym858
		if false {
		} else {
			z.F.DecSliceStringX(yyv857, false, d)
		}
	}
	yyj856++
	if yyhl856 {
		yyb856 = yyj856 > l
	} else {
		yyb856 = r.CheckBreak()
	}
	if yyb856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj856++
	if yyhl856 {
		yyb856 = yyj856 > l
	} else {
		yyb856 = r.CheckBreak()
	}
	if yyb856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj856++
	if yyhl856 {
		yyb856 = yyj856 > l
	} else {
		yyb856 = r.CheckBreak()
	}
	if yyb856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj856++
	if yyhl856 {
		yyb856 = yyj856 > l
	} else {
		yyb856 = r.CheckBreak()
	}
	if yyb856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj856++
		if yyhl856 {
			yyb856 = yyj856 > l
		} else {
			yyb856 = r.CheckBreak()
		}
		if yyb856 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj856-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym863 := z.EncBinary()
		_ = yym863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep864 := !z.EncBinary()
			yy2arr864 := z.EncBasicHandle().StructToArray
			var yyq864 [1]bool
			_, _, _ = yysep864, yyq864, yy2arr864
			const yyr864 bool = false
			var yynn864 int
			if yyr864 || yy2arr864 {
				r.EncodeArrayStart(1)
			} else {
				yynn864 = 1
				for _, b := range yyq864 {
					if b {
						yynn864++
					}
				}
				r.EncodeMapStart(yynn864)
				yynn864 = 0
			}
			if yyr864 || yy2arr864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym866 := z.EncBinary()
				_ = yym866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym867 := z.EncBinary()
				_ = yym867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr864 || yy2arr864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym868 := z.DecBinary()
	_ = yym868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct869 := r.ContainerType()
		if yyct869 == codecSelferValueTypeMap1234 {
			yyl869 := r.ReadMapStart()
			if yyl869 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl869, d)
			}
		} else if yyct869 == codecSelferValueTypeArray1234 {
			yyl869 := r.ReadArrayStart()
			if yyl869 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl869, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys870Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys870Slc
	var yyhl870 bool = l >= 0
	for yyj870 := 0; ; yyj870++ {
		if yyhl870 {
			if yyj870 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys870Slc = r.DecodeBytes(yys870Slc, true, true)
		yys870 := string(yys870Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys870 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys870)
		} // end switch yys870
	} // end for yyj870
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj872 int
	var yyb872 bool
	var yyhl872 bool = l >= 0
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj872++
		if yyhl872 {
			yyb872 = yyj872 > l
		} else {
			yyb872 = r.CheckBreak()
		}
		if yyb872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [1]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[0] = len(x.Items) != 0
			var yynn875 int
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(1)
			} else {
				yynn875 = 0
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
				yynn875 = 0
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym877 := z.EncBinary()
						_ = yym877
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym878 := z.EncBinary()
						_ = yym878
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym879 := z.DecBinary()
	_ = yym879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct880 := r.ContainerType()
		if yyct880 == codecSelferValueTypeMap1234 {
			yyl880 := r.ReadMapStart()
			if yyl880 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl880, d)
			}
		} else if yyct880 == codecSelferValueTypeArray1234 {
			yyl880 := r.ReadArrayStart()
			if yyl880 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys881Slc
	var yyhl881 bool = l >= 0
	for yyj881 := 0; ; yyj881++ {
		if yyhl881 {
			if yyj881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys881Slc = r.DecodeBytes(yys881Slc, true, true)
		yys881 := string(yys881Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys881 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv882 := &x.Items
				yym883 := z.DecBinary()
				_ = yym883
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv882), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys881)
		} // end switch yys881
	} // end for yyj881
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj884 int
	var yyb884 bool
	var yyhl884 bool = l >= 0
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv885 := &x.Items
		yym886 := z.DecBinary()
		_ = yym886
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv885), d)
		}
	}
	for {
		yyj884++
		if yyhl884 {
			yyb884 = yyj884 > l
		} else {
			yyb884 = r.CheckBreak()
		}
		if yyb884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym887 := z.EncBinary()
		_ = yym887
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep888 := !z.EncBinary()
			yy2arr888 := z.EncBasicHandle().StructToArray
			var yyq888 [2]bool
			_, _, _ = yysep888, yyq888, yy2arr888
			const yyr888 bool = false
			var yynn888 int
			if yyr888 || yy2arr888 {
				r.EncodeArrayStart(2)
			} else {
				yynn888 = 2
				for _, b := range yyq888 {
					if b {
						yynn888++
					}
				}
				r.EncodeMapStart(yynn888)
				yynn888 = 0
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym890 := z.EncBinary()
				_ = yym890
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym891 := z.EncBinary()
				_ = yym891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy893 := &x.FieldRef
				yy893.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy894 := &x.FieldRef
				yy894.CodecEncodeSelf(e)
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym895 := z.DecBinary()
	_ = yym895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct896 := r.ContainerType()
		if yyct896 == codecSelferValueTypeMap1234 {
			yyl896 := r.ReadMapStart()
			if yyl896 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl896, d)
			}
		} else if yyct896 == codecSelferValueTypeArray1234 {
			yyl896 := r.ReadArrayStart()
			if yyl896 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys897Slc
	var yyhl897 bool = l >= 0
	for yyj897 := 0; ; yyj897++ {
		if yyhl897 {
			if yyj897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys897Slc = r.DecodeBytes(yys897Slc, true, true)
		yys897 := string(yys897Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys897 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv899 := &x.FieldRef
				yyv899.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys897)
		} // end switch yys897
	} // end for yyj897
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj900 int
	var yyb900 bool
	var yyhl900 bool = l >= 0
	yyj900++
	if yyhl900 {
		yyb900 = yyj900 > l
	} else {
		yyb900 = r.CheckBreak()
	}
	if yyb900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj900++
	if yyhl900 {
		yyb900 = yyj900 > l
	} else {
		yyb900 = r.CheckBreak()
	}
	if yyb900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv902 := &x.FieldRef
		yyv902.CodecDecodeSelf(d)
	}
	for {
		yyj900++
		if yyhl900 {
			yyb900 = yyj900 > l
		} else {
			yyb900 = r.CheckBreak()
		}
		if yyb900 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj900-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym903 := z.EncBinary()
		_ = yym903
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep904 := !z.EncBinary()
			yy2arr904 := z.EncBasicHandle().StructToArray
			var yyq904 [5]bool
			_, _, _ = yysep904, yyq904, yy2arr904
			const yyr904 bool = false
			yyq904[0] = x.Name != ""
			yyq904[1] = x.HostPort != 0
			yyq904[3] = x.Protocol != ""
			yyq904[4] = x.HostIP != ""
			var yynn904 int
			if yyr904 || yy2arr904 {
				r.EncodeArrayStart(5)
			} else {
				yynn904 = 1
				for _, b := range yyq904 {
					if b {
						yynn904++
					}
				}
				r.EncodeMapStart(yynn904)
				yynn904 = 0
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[0] {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq904[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[1] {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq904[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym912 := z.EncBinary()
				_ = yym912
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym913 := z.EncBinary()
				_ = yym913
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq904[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[4] {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq904[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym918 := z.DecBinary()
	_ = yym918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct919 := r.ContainerType()
		if yyct919 == codecSelferValueTypeMap1234 {
			yyl919 := r.ReadMapStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl919, d)
			}
		} else if yyct919 == codecSelferValueTypeArray1234 {
			yyl919 := r.ReadArrayStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys920Slc
	var yyhl920 bool = l >= 0
	for yyj920 := 0; ; yyj920++ {
		if yyhl920 {
			if yyj920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys920Slc = r.DecodeBytes(yys920Slc, true, true)
		yys920 := string(yys920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys920 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys920)
		} // end switch yys920
	} // end for yyj920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj926 int
	var yyb926 bool
	var yyhl926 bool = l >= 0
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj926++
		if yyhl926 {
			yyb926 = yyj926 > l
		} else {
			yyb926 = r.CheckBreak()
		}
		if yyb926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym932 := z.EncBinary()
		_ = yym932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep933 := !z.EncBinary()
			yy2arr933 := z.EncBasicHandle().StructToArray
			var yyq933 [3]bool
			_, _, _ = yysep933, yyq933, yy2arr933
			const yyr933 bool = false
			yyq933[1] = x.ReadOnly != false
			var yynn933 int
			if yyr933 || yy2arr933 {
				r.EncodeArrayStart(3)
			} else {
				yynn933 = 2
				for _, b := range yyq933 {
					if b {
						yynn933++
					}
				}
				r.EncodeMapStart(yynn933)
				yynn933 = 0
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq933[1] {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym941 := z.EncBinary()
				_ = yym941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym943 := z.DecBinary()
	_ = yym943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct944 := r.ContainerType()
		if yyct944 == codecSelferValueTypeMap1234 {
			yyl944 := r.ReadMapStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl944, d)
			}
		} else if yyct944 == codecSelferValueTypeArray1234 {
			yyl944 := r.ReadArrayStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys945Slc
	var yyhl945 bool = l >= 0
	for yyj945 := 0; ; yyj945++ {
		if yyhl945 {
			if yyj945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys945Slc = r.DecodeBytes(yys945Slc, true, true)
		yys945 := string(yys945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys945 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys945)
		} // end switch yys945
	} // end for yyj945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj949 int
	var yyb949 bool
	var yyhl949 bool = l >= 0
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj949++
		if yyhl949 {
			yyb949 = yyj949 > l
		} else {
			yyb949 = r.CheckBreak()
		}
		if yyb949 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj949-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym953 := z.EncBinary()
		_ = yym953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep954 := !z.EncBinary()
			yy2arr954 := z.EncBasicHandle().StructToArray
			var yyq954 [3]bool
			_, _, _ = yysep954, yyq954, yy2arr954
			const yyr954 bool = false
			yyq954[1] = x.Value != ""
			yyq954[2] = x.ValueFrom != nil
			var yynn954 int
			if yyr954 || yy2arr954 {
				r.EncodeArrayStart(3)
			} else {
				yynn954 = 1
				for _, b := range yyq954 {
					if b {
						yynn954++
					}
				}
				r.EncodeMapStart(yynn954)
				yynn954 = 0
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym957 := z.EncBinary()
				_ = yym957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq954[1] {
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq954[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq954[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq954[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym962 := z.DecBinary()
	_ = yym962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct963 := r.ContainerType()
		if yyct963 == codecSelferValueTypeMap1234 {
			yyl963 := r.ReadMapStart()
			if yyl963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl963, d)
			}
		} else if yyct963 == codecSelferValueTypeArray1234 {
			yyl963 := r.ReadArrayStart()
			if yyl963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys964Slc
	var yyhl964 bool = l >= 0
	for yyj964 := 0; ; yyj964++ {
		if yyhl964 {
			if yyj964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys964Slc = r.DecodeBytes(yys964Slc, true, true)
		yys964 := string(yys964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys964 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys964)
		} // end switch yys964
	} // end for yyj964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj968 int
	var yyb968 bool
	var yyhl968 bool = l >= 0
	yyj968++
	if yyhl968 {
		yyb968 = yyj968 > l
	} else {
		yyb968 = r.CheckBreak()
	}
	if yyb968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj968++
	if yyhl968 {
		yyb968 = yyj968 > l
	} else {
		yyb968 = r.CheckBreak()
	}
	if yyb968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj968++
	if yyhl968 {
		yyb968 = yyj968 > l
	} else {
		yyb968 = r.CheckBreak()
	}
	if yyb968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj968++
		if yyhl968 {
			yyb968 = yyj968 > l
		} else {
			yyb968 = r.CheckBreak()
		}
		if yyb968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym972 := z.EncBinary()
		_ = yym972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep973 := !z.EncBinary()
			yy2arr973 := z.EncBasicHandle().StructToArray
			var yyq973 [1]bool
			_, _, _ = yysep973, yyq973, yy2arr973
			const yyr973 bool = false
			var yynn973 int
			if yyr973 || yy2arr973 {
				r.EncodeArrayStart(1)
			} else {
				yynn973 = 1
				for _, b := range yyq973 {
					if b {
						yynn973++
					}
				}
				r.EncodeMapStart(yynn973)
				yynn973 = 0
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym975 := z.DecBinary()
	_ = yym975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct976 := r.ContainerType()
		if yyct976 == codecSelferValueTypeMap1234 {
			yyl976 := r.ReadMapStart()
			if yyl976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl976, d)
			}
		} else if yyct976 == codecSelferValueTypeArray1234 {
			yyl976 := r.ReadArrayStart()
			if yyl976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys977Slc
	var yyhl977 bool = l >= 0
	for yyj977 := 0; ; yyj977++ {
		if yyhl977 {
			if yyj977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys977Slc = r.DecodeBytes(yys977Slc, true, true)
		yys977 := string(yys977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys977 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys977)
		} // end switch yys977
	} // end for yyj977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym981 := z.EncBinary()
		_ = yym981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep982 := !z.EncBinary()
			yy2arr982 := z.EncBasicHandle().StructToArray
			var yyq982 [2]bool
			_, _, _ = yysep982, yyq982, yy2arr982
			const yyr982 bool = false
			var yynn982 int
			if yyr982 || yy2arr982 {
				r.EncodeArrayStart(2)
			} else {
				yynn982 = 2
				for _, b := range yyq982 {
					if b {
						yynn982++
					}
				}
				r.EncodeMapStart(yynn982)
				yynn982 = 0
			}
			if yyr982 || yy2arr982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym984 := z.EncBinary()
				_ = yym984
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym985 := z.EncBinary()
				_ = yym985
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr982 || yy2arr982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym988 := z.EncBinary()
				_ = yym988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr982 || yy2arr982 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym989 := z.DecBinary()
	_ = yym989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct990 := r.ContainerType()
		if yyct990 == codecSelferValueTypeMap1234 {
			yyl990 := r.ReadMapStart()
			if yyl990 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl990, d)
			}
		} else if yyct990 == codecSelferValueTypeArray1234 {
			yyl990 := r.ReadArrayStart()
			if yyl990 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys991Slc
	var yyhl991 bool = l >= 0
	for yyj991 := 0; ; yyj991++ {
		if yyhl991 {
			if yyj991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys991Slc = r.DecodeBytes(yys991Slc, true, true)
		yys991 := string(yys991Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys991 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys991)
		} // end switch yys991
	} // end for yyj991
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [4]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = x.Path != ""
			yyq998[1] = true
			yyq998[2] = x.Host != ""
			yyq998[3] = x.Scheme != ""
			var yynn998 int
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(4)
			} else {
				yynn998 = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
				yynn998 = 0
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq998[0] {
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq998[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq998[1] {
					yy1003 := &x.Port
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1003) {
					} else if !yym1004 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1003)
					} else {
						z.EncFallback(yy1003)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1005 := &x.Port
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1005) {
					} else if !yym1006 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1005)
					} else {
						z.EncFallback(yy1005)
					}
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq998[2] {
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq998[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq998[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq998[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1011 := z.DecBinary()
	_ = yym1011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1012 := r.ContainerType()
		if yyct1012 == codecSelferValueTypeMap1234 {
			yyl1012 := r.ReadMapStart()
			if yyl1012 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1012, d)
			}
		} else if yyct1012 == codecSelferValueTypeArray1234 {
			yyl1012 := r.ReadArrayStart()
			if yyl1012 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1013Slc
	var yyhl1013 bool = l >= 0
	for yyj1013 := 0; ; yyj1013++ {
		if yyhl1013 {
			if yyj1013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1013Slc = r.DecodeBytes(yys1013Slc, true, true)
		yys1013 := string(yys1013Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1013 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1015 := &x.Port
				yym1016 := z.DecBinary()
				_ = yym1016
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1015) {
				} else if !yym1016 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1015)
				} else {
					z.DecFallback(yyv1015, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1013)
		} // end switch yys1013
	} // end for yyj1013
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1019 int
	var yyb1019 bool
	var yyhl1019 bool = l >= 0
	yyj1019++
	if yyhl1019 {
		yyb1019 = yyj1019 > l
	} else {
		yyb1019 = r.CheckBreak()
	}
	if yyb1019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1019++
	if yyhl1019 {
		yyb1019 = yyj1019 > l
	} else {
		yyb1019 = r.CheckBreak()
	}
	if yyb1019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1021 := &x.Port
		yym1022 := z.DecBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1021) {
		} else if !yym1022 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1021)
		} else {
			z.DecFallback(yyv1021, false)
		}
	}
	yyj1019++
	if yyhl1019 {
		yyb1019 = yyj1019 > l
	} else {
		yyb1019 = r.CheckBreak()
	}
	if yyb1019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1019++
	if yyhl1019 {
		yyb1019 = yyj1019 > l
	} else {
		yyb1019 = r.CheckBreak()
	}
	if yyb1019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj1019++
		if yyhl1019 {
			yyb1019 = yyj1019 > l
		} else {
			yyb1019 = r.CheckBreak()
		}
		if yyb1019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1025 := z.EncBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1026 := z.DecBinary()
	_ = yym1026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1027 := z.EncBinary()
		_ = yym1027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1028 := !z.EncBinary()
			yy2arr1028 := z.EncBasicHandle().StructToArray
			var yyq1028 [1]bool
			_, _, _ = yysep1028, yyq1028, yy2arr1028
			const yyr1028 bool = false
			yyq1028[0] = true
			var yynn1028 int
			if yyr1028 || yy2arr1028 {
				r.EncodeArrayStart(1)
			} else {
				yynn1028 = 0
				for _, b := range yyq1028 {
					if b {
						yynn1028++
					}
				}
				r.EncodeMapStart(yynn1028)
				yynn1028 = 0
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[0] {
					yy1030 := &x.Port
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1030) {
					} else if !yym1031 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1030)
					} else {
						z.EncFallback(yy1030)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1032 := &x.Port
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1032) {
					} else if !yym1033 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1032)
					} else {
						z.EncFallback(yy1032)
					}
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1034 := z.DecBinary()
	_ = yym1034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1035 := r.ContainerType()
		if yyct1035 == codecSelferValueTypeMap1234 {
			yyl1035 := r.ReadMapStart()
			if yyl1035 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1035, d)
			}
		} else if yyct1035 == codecSelferValueTypeArray1234 {
			yyl1035 := r.ReadArrayStart()
			if yyl1035 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1036Slc
	var yyhl1036 bool = l >= 0
	for yyj1036 := 0; ; yyj1036++ {
		if yyhl1036 {
			if yyj1036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1036Slc = r.DecodeBytes(yys1036Slc, true, true)
		yys1036 := string(yys1036Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1036 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1037 := &x.Port
				yym1038 := z.DecBinary()
				_ = yym1038
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1037) {
				} else if !yym1038 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1037)
				} else {
					z.DecFallback(yyv1037, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1036)
		} // end switch yys1036
	} // end for yyj1036
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1039 int
	var yyb1039 bool
	var yyhl1039 bool = l >= 0
	yyj1039++
	if yyhl1039 {
		yyb1039 = yyj1039 > l
	} else {
		yyb1039 = r.CheckBreak()
	}
	if yyb1039 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1040 := &x.Port
		yym1041 := z.DecBinary()
		_ = yym1041
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1040) {
		} else if !yym1041 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1040)
		} else {
			z.DecFallback(yyv1040, false)
		}
	}
	for {
		yyj1039++
		if yyhl1039 {
			yyb1039 = yyj1039 > l
		} else {
			yyb1039 = r.CheckBreak()
		}
		if yyb1039 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1039-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1042 := z.EncBinary()
		_ = yym1042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1043 := !z.EncBinary()
			yy2arr1043 := z.EncBasicHandle().StructToArray
			var yyq1043 [1]bool
			_, _, _ = yysep1043, yyq1043, yy2arr1043
			const yyr1043 bool = false
			yyq1043[0] = len(x.Command) != 0
			var yynn1043 int
			if yyr1043 || yy2arr1043 {
				r.EncodeArrayStart(1)
			} else {
				yynn1043 = 0
				for _, b := range yyq1043 {
					if b {
						yynn1043++
					}
				}
				r.EncodeMapStart(yynn1043)
				yynn1043 = 0
			}
			if yyr1043 || yy2arr1043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1043[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1045 := z.EncBinary()
						_ = yym1045
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1043[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1046 := z.EncBinary()
						_ = yym1046
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1043 || yy2arr1043 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1047 := z.DecBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1048 := r.ContainerType()
		if yyct1048 == codecSelferValueTypeMap1234 {
			yyl1048 := r.ReadMapStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1048, d)
			}
		} else if yyct1048 == codecSelferValueTypeArray1234 {
			yyl1048 := r.ReadArrayStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1049Slc
	var yyhl1049 bool = l >= 0
	for yyj1049 := 0; ; yyj1049++ {
		if yyhl1049 {
			if yyj1049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1049Slc = r.DecodeBytes(yys1049Slc, true, true)
		yys1049 := string(yys1049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1049 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1050 := &x.Command
				yym1051 := z.DecBinary()
				_ = yym1051
				if false {
				} else {
					z.F.DecSliceStringX(yyv1050, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1049)
		} // end switch yys1049
	} // end for yyj1049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1053 := &x.Command
		yym1054 := z.DecBinary()
		_ = yym1054
		if false {
		} else {
			z.F.DecSliceStringX(yyv1053, false, d)
		}
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [8]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			yyq1056[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1056[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1056[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1056[3] = x.InitialDelaySeconds != 0
			yyq1056[4] = x.TimeoutSeconds != 0
			yyq1056[5] = x.PeriodSeconds != 0
			yyq1056[6] = x.SuccessThreshold != 0
			yyq1056[7] = x.FailureThreshold != 0
			var yynn1056 int
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(8)
			} else {
				yynn1056 = 0
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
				yynn1056 = 0
			}
			var yyn1057 bool
			if x.Handler.Exec == nil {
				yyn1057 = true
				goto LABEL1057
			}
		LABEL1057:
			if yyr1056 || yy2arr1056 {
				if yyn1057 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1056[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1056[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1057 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1058 bool
			if x.Handler.HTTPGet == nil {
				yyn1058 = true
				goto LABEL1058
			}
		LABEL1058:
			if yyr1056 || yy2arr1056 {
				if yyn1058 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1056[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1056[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1058 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1059 bool
			if x.Handler.TCPSocket == nil {
				yyn1059 = true
				goto LABEL1059
			}
		LABEL1059:
			if yyr1056 || yy2arr1056 {
				if yyn1059 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1056[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1056[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1059 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[3] {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1056[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[4] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1056[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[5] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1056[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[6] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1056[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[7] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1056[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1076 := r.ContainerType()
		if yyct1076 == codecSelferValueTypeMap1234 {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if yyct1076 == codecSelferValueTypeArray1234 {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1077 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1086 int
	var yyb1086 bool
	var yyhl1086 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1086++
		if yyhl1086 {
			yyb1086 = yyj1086 > l
		} else {
			yyb1086 = r.CheckBreak()
		}
		if yyb1086 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1086-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1095 := z.EncBinary()
	_ = yym1095
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1096 := z.DecBinary()
	_ = yym1096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1097 := z.EncBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1098 := z.DecBinary()
	_ = yym1098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1099 := z.EncBinary()
		_ = yym1099
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1100 := !z.EncBinary()
			yy2arr1100 := z.EncBasicHandle().StructToArray
			var yyq1100 [2]bool
			_, _, _ = yysep1100, yyq1100, yy2arr1100
			const yyr1100 bool = false
			yyq1100[0] = len(x.Add) != 0
			yyq1100[1] = len(x.Drop) != 0
			var yynn1100 int
			if yyr1100 || yy2arr1100 {
				r.EncodeArrayStart(2)
			} else {
				yynn1100 = 0
				for _, b := range yyq1100 {
					if b {
						yynn1100++
					}
				}
				r.EncodeMapStart(yynn1100)
				yynn1100 = 0
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1100[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1102 := z.EncBinary()
						_ = yym1102
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1100[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1103 := z.EncBinary()
						_ = yym1103
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1100[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1100[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1106 := z.EncBinary()
						_ = yym1106
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1107 := z.DecBinary()
	_ = yym1107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1108 := r.ContainerType()
		if yyct1108 == codecSelferValueTypeMap1234 {
			yyl1108 := r.ReadMapStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1108, d)
			}
		} else if yyct1108 == codecSelferValueTypeArray1234 {
			yyl1108 := r.ReadArrayStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1109Slc
	var yyhl1109 bool = l >= 0
	for yyj1109 := 0; ; yyj1109++ {
		if yyhl1109 {
			if yyj1109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1109Slc = r.DecodeBytes(yys1109Slc, true, true)
		yys1109 := string(yys1109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1109 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1110 := &x.Add
				yym1111 := z.DecBinary()
				_ = yym1111
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1110), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1112 := &x.Drop
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1112), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1109)
		} // end switch yys1109
	} // end for yyj1109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1114 int
	var yyb1114 bool
	var yyhl1114 bool = l >= 0
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1115 := &x.Add
		yym1116 := z.DecBinary()
		_ = yym1116
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1115), d)
		}
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1117 := &x.Drop
		yym1118 := z.DecBinary()
		_ = yym1118
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1117), d)
		}
	}
	for {
		yyj1114++
		if yyhl1114 {
			yyb1114 = yyj1114 > l
		} else {
			yyb1114 = r.CheckBreak()
		}
		if yyb1114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1119 := z.EncBinary()
		_ = yym1119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1120 := !z.EncBinary()
			yy2arr1120 := z.EncBasicHandle().StructToArray
			var yyq1120 [2]bool
			_, _, _ = yysep1120, yyq1120, yy2arr1120
			const yyr1120 bool = false
			yyq1120[0] = len(x.Limits) != 0
			yyq1120[1] = len(x.Requests) != 0
			var yynn1120 int
			if yyr1120 || yy2arr1120 {
				r.EncodeArrayStart(2)
			} else {
				yynn1120 = 0
				for _, b := range yyq1120 {
					if b {
						yynn1120++
					}
				}
				r.EncodeMapStart(yynn1120)
				yynn1120 = 0
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1120[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1120[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1120[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1120[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1124 := r.ContainerType()
		if yyct1124 == codecSelferValueTypeMap1234 {
			yyl1124 := r.ReadMapStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1124, d)
			}
		} else if yyct1124 == codecSelferValueTypeArray1234 {
			yyl1124 := r.ReadArrayStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1125Slc
	var yyhl1125 bool = l >= 0
	for yyj1125 := 0; ; yyj1125++ {
		if yyhl1125 {
			if yyj1125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1125Slc = r.DecodeBytes(yys1125Slc, true, true)
		yys1125 := string(yys1125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1125 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1126 := &x.Limits
				yyv1126.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1127 := &x.Requests
				yyv1127.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1125)
		} // end switch yys1125
	} // end for yyj1125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1128 int
	var yyb1128 bool
	var yyhl1128 bool = l >= 0
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1129 := &x.Limits
		yyv1129.CodecDecodeSelf(d)
	}
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1130 := &x.Requests
		yyv1130.CodecDecodeSelf(d)
	}
	for {
		yyj1128++
		if yyhl1128 {
			yyb1128 = yyj1128 > l
		} else {
			yyb1128 = r.CheckBreak()
		}
		if yyb1128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1131 := z.EncBinary()
		_ = yym1131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1132 := !z.EncBinary()
			yy2arr1132 := z.EncBasicHandle().StructToArray
			var yyq1132 [18]bool
			_, _, _ = yysep1132, yyq1132, yy2arr1132
			const yyr1132 bool = false
			yyq1132[2] = len(x.Command) != 0
			yyq1132[3] = len(x.Args) != 0
			yyq1132[4] = x.WorkingDir != ""
			yyq1132[5] = len(x.Ports) != 0
			yyq1132[6] = len(x.Env) != 0
			yyq1132[7] = true
			yyq1132[8] = len(x.VolumeMounts) != 0
			yyq1132[9] = x.LivenessProbe != nil
			yyq1132[10] = x.ReadinessProbe != nil
			yyq1132[11] = x.Lifecycle != nil
			yyq1132[12] = x.TerminationMessagePath != ""
			yyq1132[14] = x.SecurityContext != nil
			yyq1132[15] = x.Stdin != false
			yyq1132[16] = x.StdinOnce != false
			yyq1132[17] = x.TTY != false
			var yynn1132 int
			if yyr1132 || yy2arr1132 {
				r.EncodeArrayStart(18)
			} else {
				yynn1132 = 3
				for _, b := range yyq1132 {
					if b {
						yynn1132++
					}
				}
				r.EncodeMapStart(yynn1132)
				yynn1132 = 0
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1134 := z.EncBinary()
				_ = yym1134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1137 := z.EncBinary()
				_ = yym1137
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1140 := z.EncBinary()
						_ = yym1140
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1141 := z.EncBinary()
						_ = yym1141
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1143 := z.EncBinary()
						_ = yym1143
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[4] {
					yym1146 := z.EncBinary()
					_ = yym1146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1132[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1147 := z.EncBinary()
					_ = yym1147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1150 := z.EncBinary()
						_ = yym1150
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1152 := z.EncBinary()
						_ = yym1152
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1153 := z.EncBinary()
						_ = yym1153
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[7] {
					yy1155 := &x.Resources
					yy1155.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1156 := &x.Resources
					yy1156.CodecEncodeSelf(e)
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1158 := z.EncBinary()
						_ = yym1158
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1159 := z.EncBinary()
						_ = yym1159
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[12] {
					yym1164 := z.EncBinary()
					_ = yym1164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1132[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[15] {
					yym1169 := z.EncBinary()
					_ = yym1169
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1132[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[16] {
					yym1172 := z.EncBinary()
					_ = yym1172
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1132[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1173 := z.EncBinary()
					_ = yym1173
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[17] {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1132[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1178 := r.ContainerType()
		if yyct1178 == codecSelferValueTypeMap1234 {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if yyct1178 == codecSelferValueTypeArray1234 {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1179 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1182 := &x.Command
				yym1183 := z.DecBinary()
				_ = yym1183
				if false {
				} else {
					z.F.DecSliceStringX(yyv1182, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1184 := &x.Args
				yym1185 := z.DecBinary()
				_ = yym1185
				if false {
				} else {
					z.F.DecSliceStringX(yyv1184, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1187 := &x.Ports
				yym1188 := z.DecBinary()
				_ = yym1188
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1187), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1189 := &x.Env
				yym1190 := z.DecBinary()
				_ = yym1190
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1189), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1191 := &x.Resources
				yyv1191.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1192 := &x.VolumeMounts
				yym1193 := z.DecBinary()
				_ = yym1193
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1192), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1203 int
	var yyb1203 bool
	var yyhl1203 bool = l >= 0
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1206 := &x.Command
		yym1207 := z.DecBinary()
		_ = yym1207
		if false {
		} else {
			z.F.DecSliceStringX(yyv1206, false, d)
		}
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1208 := &x.Args
		yym1209 := z.DecBinary()
		_ = yym1209
		if false {
		} else {
			z.F.DecSliceStringX(yyv1208, false, d)
		}
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1211 := &x.Ports
		yym1212 := z.DecBinary()
		_ = yym1212
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1211), d)
		}
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1213 := &x.Env
		yym1214 := z.DecBinary()
		_ = yym1214
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1213), d)
		}
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1215 := &x.Resources
		yyv1215.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1216 := &x.VolumeMounts
		yym1217 := z.DecBinary()
		_ = yym1217
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1216), d)
		}
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1203++
		if yyhl1203 {
			yyb1203 = yyj1203 > l
		} else {
			yyb1203 = r.CheckBreak()
		}
		if yyb1203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1227 := z.EncBinary()
		_ = yym1227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1228 := !z.EncBinary()
			yy2arr1228 := z.EncBasicHandle().StructToArray
			var yyq1228 [3]bool
			_, _, _ = yysep1228, yyq1228, yy2arr1228
			const yyr1228 bool = false
			yyq1228[0] = x.Exec != nil
			yyq1228[1] = x.HTTPGet != nil
			yyq1228[2] = x.TCPSocket != nil
			var yynn1228 int
			if yyr1228 || yy2arr1228 {
				r.EncodeArrayStart(3)
			} else {
				yynn1228 = 0
				for _, b := range yyq1228 {
					if b {
						yynn1228++
					}
				}
				r.EncodeMapStart(yynn1228)
				yynn1228 = 0
			}
			if yyr1228 || yy2arr1228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1228[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1228[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1228 || yy2arr1228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1228[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1228[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1228 || yy2arr1228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1228[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1228[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1228 || yy2arr1228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1232 := z.DecBinary()
	_ = yym1232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1233 := r.ContainerType()
		if yyct1233 == codecSelferValueTypeMap1234 {
			yyl1233 := r.ReadMapStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1233, d)
			}
		} else if yyct1233 == codecSelferValueTypeArray1234 {
			yyl1233 := r.ReadArrayStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1234Slc
	var yyhl1234 bool = l >= 0
	for yyj1234 := 0; ; yyj1234++ {
		if yyhl1234 {
			if yyj1234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1234Slc = r.DecodeBytes(yys1234Slc, true, true)
		yys1234 := string(yys1234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1234 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1234)
		} // end switch yys1234
	} // end for yyj1234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1238 int
	var yyb1238 bool
	var yyhl1238 bool = l >= 0
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1238++
		if yyhl1238 {
			yyb1238 = yyj1238 > l
		} else {
			yyb1238 = r.CheckBreak()
		}
		if yyb1238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1242 := z.EncBinary()
		_ = yym1242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1243 := !z.EncBinary()
			yy2arr1243 := z.EncBasicHandle().StructToArray
			var yyq1243 [2]bool
			_, _, _ = yysep1243, yyq1243, yy2arr1243
			const yyr1243 bool = false
			yyq1243[0] = x.PostStart != nil
			yyq1243[1] = x.PreStop != nil
			var yynn1243 int
			if yyr1243 || yy2arr1243 {
				r.EncodeArrayStart(2)
			} else {
				yynn1243 = 0
				for _, b := range yyq1243 {
					if b {
						yynn1243++
					}
				}
				r.EncodeMapStart(yynn1243)
				yynn1243 = 0
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1243[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1243[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1243[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1246 := z.DecBinary()
	_ = yym1246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1247 := r.ContainerType()
		if yyct1247 == codecSelferValueTypeMap1234 {
			yyl1247 := r.ReadMapStart()
			if yyl1247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1247, d)
			}
		} else if yyct1247 == codecSelferValueTypeArray1234 {
			yyl1247 := r.ReadArrayStart()
			if yyl1247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1248Slc
	var yyhl1248 bool = l >= 0
	for yyj1248 := 0; ; yyj1248++ {
		if yyhl1248 {
			if yyj1248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1248Slc = r.DecodeBytes(yys1248Slc, true, true)
		yys1248 := string(yys1248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1248 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1248)
		} // end switch yys1248
	} // end for yyj1248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1251 int
	var yyb1251 bool
	var yyhl1251 bool = l >= 0
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1251++
		if yyhl1251 {
			yyb1251 = yyj1251 > l
		} else {
			yyb1251 = r.CheckBreak()
		}
		if yyb1251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1254 := z.EncBinary()
	_ = yym1254
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1256 := z.EncBinary()
		_ = yym1256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1257 := !z.EncBinary()
			yy2arr1257 := z.EncBasicHandle().StructToArray
			var yyq1257 [2]bool
			_, _, _ = yysep1257, yyq1257, yy2arr1257
			const yyr1257 bool = false
			yyq1257[0] = x.Reason != ""
			yyq1257[1] = x.Message != ""
			var yynn1257 int
			if yyr1257 || yy2arr1257 {
				r.EncodeArrayStart(2)
			} else {
				yynn1257 = 0
				for _, b := range yyq1257 {
					if b {
						yynn1257++
					}
				}
				r.EncodeMapStart(yynn1257)
				yynn1257 = 0
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1257[0] {
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1257[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1257[1] {
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1257[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1265 := r.ContainerType()
		if yyct1265 == codecSelferValueTypeMap1234 {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if yyct1265 == codecSelferValueTypeArray1234 {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1266 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1269 int
	var yyb1269 bool
	var yyhl1269 bool = l >= 0
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1269++
		if yyhl1269 {
			yyb1269 = yyj1269 > l
		} else {
			yyb1269 = r.CheckBreak()
		}
		if yyb1269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [1]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[0] = true
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(1)
			} else {
				yynn1273 = 0
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[0] {
					yy1275 := &x.StartedAt
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1275) {
					} else if yym1276 {
						z.EncBinaryMarshal(yy1275)
					} else if !yym1276 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1275)
					} else {
						z.EncFallback(yy1275)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1277 := &x.StartedAt
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1277) {
					} else if yym1278 {
						z.EncBinaryMarshal(yy1277)
					} else if !yym1278 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1277)
					} else {
						z.EncFallback(yy1277)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1280 := r.ContainerType()
		if yyct1280 == codecSelferValueTypeMap1234 {
			yyl1280 := r.ReadMapStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1280, d)
			}
		} else if yyct1280 == codecSelferValueTypeArray1234 {
			yyl1280 := r.ReadArrayStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1281Slc
	var yyhl1281 bool = l >= 0
	for yyj1281 := 0; ; yyj1281++ {
		if yyhl1281 {
			if yyj1281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1281Slc = r.DecodeBytes(yys1281Slc, true, true)
		yys1281 := string(yys1281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1281 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1282 := &x.StartedAt
				yym1283 := z.DecBinary()
				_ = yym1283
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1282) {
				} else if yym1283 {
					z.DecBinaryUnmarshal(yyv1282)
				} else if !yym1283 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1282)
				} else {
					z.DecFallback(yyv1282, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1281)
		} // end switch yys1281
	} // end for yyj1281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1285 := &x.StartedAt
		yym1286 := z.DecBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1285) {
		} else if yym1286 {
			z.DecBinaryUnmarshal(yyv1285)
		} else if !yym1286 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1285)
		} else {
			z.DecFallback(yyv1285, false)
		}
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1287 := z.EncBinary()
		_ = yym1287
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1288 := !z.EncBinary()
			yy2arr1288 := z.EncBasicHandle().StructToArray
			var yyq1288 [7]bool
			_, _, _ = yysep1288, yyq1288, yy2arr1288
			const yyr1288 bool = false
			yyq1288[1] = x.Signal != 0
			yyq1288[2] = x.Reason != ""
			yyq1288[3] = x.Message != ""
			yyq1288[4] = true
			yyq1288[5] = true
			yyq1288[6] = x.ContainerID != ""
			var yynn1288 int
			if yyr1288 || yy2arr1288 {
				r.EncodeArrayStart(7)
			} else {
				yynn1288 = 1
				for _, b := range yyq1288 {
					if b {
						yynn1288++
					}
				}
				r.EncodeMapStart(yynn1288)
				yynn1288 = 0
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[1] {
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1288[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[2] {
					yym1296 := z.EncBinary()
					_ = yym1296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1288[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[3] {
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1288[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[4] {
					yy1302 := &x.StartedAt
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1302) {
					} else if yym1303 {
						z.EncBinaryMarshal(yy1302)
					} else if !yym1303 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1302)
					} else {
						z.EncFallback(yy1302)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1288[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1304 := &x.StartedAt
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[5] {
					yy1307 := &x.FinishedAt
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1307) {
					} else if yym1308 {
						z.EncBinaryMarshal(yy1307)
					} else if !yym1308 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1307)
					} else {
						z.EncFallback(yy1307)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1288[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1309 := &x.FinishedAt
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1309) {
					} else if yym1310 {
						z.EncBinaryMarshal(yy1309)
					} else if !yym1310 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1309)
					} else {
						z.EncFallback(yy1309)
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[6] {
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1288[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1314 := z.DecBinary()
	_ = yym1314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1315 := r.ContainerType()
		if yyct1315 == codecSelferValueTypeMap1234 {
			yyl1315 := r.ReadMapStart()
			if yyl1315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1315, d)
			}
		} else if yyct1315 == codecSelferValueTypeArray1234 {
			yyl1315 := r.ReadArrayStart()
			if yyl1315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1316Slc
	var yyhl1316 bool = l >= 0
	for yyj1316 := 0; ; yyj1316++ {
		if yyhl1316 {
			if yyj1316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1316Slc = r.DecodeBytes(yys1316Slc, true, true)
		yys1316 := string(yys1316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1316 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1321 := &x.StartedAt
				yym1322 := z.DecBinary()
				_ = yym1322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1321) {
				} else if yym1322 {
					z.DecBinaryUnmarshal(yyv1321)
				} else if !yym1322 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1321)
				} else {
					z.DecFallback(yyv1321, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1323 := &x.FinishedAt
				yym1324 := z.DecBinary()
				_ = yym1324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1323) {
				} else if yym1324 {
					z.DecBinaryUnmarshal(yyv1323)
				} else if !yym1324 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1323)
				} else {
					z.DecFallback(yyv1323, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1316)
		} // end switch yys1316
	} // end for yyj1316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1326 int
	var yyb1326 bool
	var yyhl1326 bool = l >= 0
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1331 := &x.StartedAt
		yym1332 := z.DecBinary()
		_ = yym1332
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1331) {
		} else if yym1332 {
			z.DecBinaryUnmarshal(yyv1331)
		} else if !yym1332 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1331)
		} else {
			z.DecFallback(yyv1331, false)
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1333 := &x.FinishedAt
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1333) {
		} else if yym1334 {
			z.DecBinaryUnmarshal(yyv1333)
		} else if !yym1334 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1333)
		} else {
			z.DecFallback(yyv1333, false)
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1326++
		if yyhl1326 {
			yyb1326 = yyj1326 > l
		} else {
			yyb1326 = r.CheckBreak()
		}
		if yyb1326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1336 := z.EncBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1337 := !z.EncBinary()
			yy2arr1337 := z.EncBasicHandle().StructToArray
			var yyq1337 [3]bool
			_, _, _ = yysep1337, yyq1337, yy2arr1337
			const yyr1337 bool = false
			yyq1337[0] = x.Waiting != nil
			yyq1337[1] = x.Running != nil
			yyq1337[2] = x.Terminated != nil
			var yynn1337 int
			if yyr1337 || yy2arr1337 {
				r.EncodeArrayStart(3)
			} else {
				yynn1337 = 0
				for _, b := range yyq1337 {
					if b {
						yynn1337++
					}
				}
				r.EncodeMapStart(yynn1337)
				yynn1337 = 0
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1341 := z.DecBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1342 := r.ContainerType()
		if yyct1342 == codecSelferValueTypeMap1234 {
			yyl1342 := r.ReadMapStart()
			if yyl1342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1342, d)
			}
		} else if yyct1342 == codecSelferValueTypeArray1234 {
			yyl1342 := r.ReadArrayStart()
			if yyl1342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1343Slc
	var yyhl1343 bool = l >= 0
	for yyj1343 := 0; ; yyj1343++ {
		if yyhl1343 {
			if yyj1343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1343Slc = r.DecodeBytes(yys1343Slc, true, true)
		yys1343 := string(yys1343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1343 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1343)
		} // end switch yys1343
	} // end for yyj1343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1347 int
	var yyb1347 bool
	var yyhl1347 bool = l >= 0
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1347++
		if yyhl1347 {
			yyb1347 = yyj1347 > l
		} else {
			yyb1347 = r.CheckBreak()
		}
		if yyb1347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1351 := z.EncBinary()
		_ = yym1351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1352 := !z.EncBinary()
			yy2arr1352 := z.EncBasicHandle().StructToArray
			var yyq1352 [8]bool
			_, _, _ = yysep1352, yyq1352, yy2arr1352
			const yyr1352 bool = false
			yyq1352[1] = true
			yyq1352[2] = true
			yyq1352[7] = x.ContainerID != ""
			var yynn1352 int
			if yyr1352 || yy2arr1352 {
				r.EncodeArrayStart(8)
			} else {
				yynn1352 = 5
				for _, b := range yyq1352 {
					if b {
						yynn1352++
					}
				}
				r.EncodeMapStart(yynn1352)
				yynn1352 = 0
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1354 := z.EncBinary()
				_ = yym1354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1355 := z.EncBinary()
				_ = yym1355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1352[1] {
					yy1357 := &x.State
					yy1357.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1352[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1358 := &x.State
					yy1358.CodecEncodeSelf(e)
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1352[2] {
					yy1360 := &x.LastTerminationState
					yy1360.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1352[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1361 := &x.LastTerminationState
					yy1361.CodecEncodeSelf(e)
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1363 := z.EncBinary()
				_ = yym1363
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1364 := z.EncBinary()
				_ = yym1364
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1366 := z.EncBinary()
				_ = yym1366
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1367 := z.EncBinary()
				_ = yym1367
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1370 := z.EncBinary()
				_ = yym1370
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1372 := z.EncBinary()
				_ = yym1372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1373 := z.EncBinary()
				_ = yym1373
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1352[7] {
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1352[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1377 := z.DecBinary()
	_ = yym1377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1378 := r.ContainerType()
		if yyct1378 == codecSelferValueTypeMap1234 {
			yyl1378 := r.ReadMapStart()
			if yyl1378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1378, d)
			}
		} else if yyct1378 == codecSelferValueTypeArray1234 {
			yyl1378 := r.ReadArrayStart()
			if yyl1378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1379Slc
	var yyhl1379 bool = l >= 0
	for yyj1379 := 0; ; yyj1379++ {
		if yyhl1379 {
			if yyj1379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1379Slc = r.DecodeBytes(yys1379Slc, true, true)
		yys1379 := string(yys1379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1379 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1381 := &x.State
				yyv1381.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1382 := &x.LastTerminationState
				yyv1382.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1379)
		} // end switch yys1379
	} // end for yyj1379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1388 int
	var yyb1388 bool
	var yyhl1388 bool = l >= 0
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1390 := &x.State
		yyv1390.CodecDecodeSelf(d)
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1391 := &x.LastTerminationState
		yyv1391.CodecDecodeSelf(d)
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1388++
		if yyhl1388 {
			yyb1388 = yyj1388 > l
		} else {
			yyb1388 = r.CheckBreak()
		}
		if yyb1388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1397 := z.EncBinary()
	_ = yym1397
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1398 := z.DecBinary()
	_ = yym1398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1399 := z.EncBinary()
	_ = yym1399
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1400 := z.DecBinary()
	_ = yym1400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1401 := z.EncBinary()
		_ = yym1401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1402 := !z.EncBinary()
			yy2arr1402 := z.EncBasicHandle().StructToArray
			var yyq1402 [6]bool
			_, _, _ = yysep1402, yyq1402, yy2arr1402
			const yyr1402 bool = false
			yyq1402[2] = true
			yyq1402[3] = true
			yyq1402[4] = x.Reason != ""
			yyq1402[5] = x.Message != ""
			var yynn1402 int
			if yyr1402 || yy2arr1402 {
				r.EncodeArrayStart(6)
			} else {
				yynn1402 = 2
				for _, b := range yyq1402 {
					if b {
						yynn1402++
					}
				}
				r.EncodeMapStart(yynn1402)
				yynn1402 = 0
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[2] {
					yy1406 := &x.LastProbeTime
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1406) {
					} else if yym1407 {
						z.EncBinaryMarshal(yy1406)
					} else if !yym1407 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1406)
					} else {
						z.EncFallback(yy1406)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1408 := &x.LastProbeTime
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1408) {
					} else if yym1409 {
						z.EncBinaryMarshal(yy1408)
					} else if !yym1409 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1408)
					} else {
						z.EncFallback(yy1408)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[3] {
					yy1411 := &x.LastTransitionTime
					yym1412 := z.EncBinary()
					_ = yym1412
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1411) {
					} else if yym1412 {
						z.EncBinaryMarshal(yy1411)
					} else if !yym1412 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1411)
					} else {
						z.EncFallback(yy1411)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1413 := &x.LastTransitionTime
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1413) {
					} else if yym1414 {
						z.EncBinaryMarshal(yy1413)
					} else if !yym1414 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1413)
					} else {
						z.EncFallback(yy1413)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[4] {
					yym1416 := z.EncBinary()
					_ = yym1416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1402[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[5] {
					yym1419 := z.EncBinary()
					_ = yym1419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1402[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1421 := z.DecBinary()
	_ = yym1421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1422 := r.ContainerType()
		if yyct1422 == codecSelferValueTypeMap1234 {
			yyl1422 := r.ReadMapStart()
			if yyl1422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1422, d)
			}
		} else if yyct1422 == codecSelferValueTypeArray1234 {
			yyl1422 := r.ReadArrayStart()
			if yyl1422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1423Slc
	var yyhl1423 bool = l >= 0
	for yyj1423 := 0; ; yyj1423++ {
		if yyhl1423 {
			if yyj1423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1423Slc = r.DecodeBytes(yys1423Slc, true, true)
		yys1423 := string(yys1423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1423 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1426 := &x.LastProbeTime
				yym1427 := z.DecBinary()
				_ = yym1427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1426) {
				} else if yym1427 {
					z.DecBinaryUnmarshal(yyv1426)
				} else if !yym1427 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1426)
				} else {
					z.DecFallback(yyv1426, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1428 := &x.LastTransitionTime
				yym1429 := z.DecBinary()
				_ = yym1429
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1428) {
				} else if yym1429 {
					z.DecBinaryUnmarshal(yyv1428)
				} else if !yym1429 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1428)
				} else {
					z.DecFallback(yyv1428, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1423)
		} // end switch yys1423
	} // end for yyj1423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1432 int
	var yyb1432 bool
	var yyhl1432 bool = l >= 0
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1435 := &x.LastProbeTime
		yym1436 := z.DecBinary()
		_ = yym1436
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1435) {
		} else if yym1436 {
			z.DecBinaryUnmarshal(yyv1435)
		} else if !yym1436 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1435)
		} else {
			z.DecFallback(yyv1435, false)
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1437 := &x.LastTransitionTime
		yym1438 := z.DecBinary()
		_ = yym1438
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1437) {
		} else if yym1438 {
			z.DecBinaryUnmarshal(yyv1437)
		} else if !yym1438 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1437)
		} else {
			z.DecFallback(yyv1437, false)
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1432++
		if yyhl1432 {
			yyb1432 = yyj1432 > l
		} else {
			yyb1432 = r.CheckBreak()
		}
		if yyb1432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1441 := z.EncBinary()
	_ = yym1441
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1442 := z.DecBinary()
	_ = yym1442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1443 := z.EncBinary()
		_ = yym1443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1444 := !z.EncBinary()
			yy2arr1444 := z.EncBasicHandle().StructToArray
			var yyq1444 [4]bool
			_, _, _ = yysep1444, yyq1444, yy2arr1444
			const yyr1444 bool = false
			yyq1444[0] = x.Kind != ""
			yyq1444[1] = x.APIVersion != ""
			yyq1444[2] = true
			var yynn1444 int
			if yyr1444 || yy2arr1444 {
				r.EncodeArrayStart(4)
			} else {
				yynn1444 = 1
				for _, b := range yyq1444 {
					if b {
						yynn1444++
					}
				}
				r.EncodeMapStart(yynn1444)
				yynn1444 = 0
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[0] {
					yym1446 := z.EncBinary()
					_ = yym1446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[1] {
					yym1449 := z.EncBinary()
					_ = yym1449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[2] {
					yy1452 := &x.ListMeta
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1452) {
					} else {
						z.EncFallback(yy1452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1454 := &x.ListMeta
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1454) {
					} else {
						z.EncFallback(yy1454)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1458 := z.EncBinary()
					_ = yym1458
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1459 := z.DecBinary()
	_ = yym1459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1460 := r.ContainerType()
		if yyct1460 == codecSelferValueTypeMap1234 {
			yyl1460 := r.ReadMapStart()
			if yyl1460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1460, d)
			}
		} else if yyct1460 == codecSelferValueTypeArray1234 {
			yyl1460 := r.ReadArrayStart()
			if yyl1460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1461Slc
	var yyhl1461 bool = l >= 0
	for yyj1461 := 0; ; yyj1461++ {
		if yyhl1461 {
			if yyj1461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1461Slc = r.DecodeBytes(yys1461Slc, true, true)
		yys1461 := string(yys1461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1464 := &x.ListMeta
				yym1465 := z.DecBinary()
				_ = yym1465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1464) {
				} else {
					z.DecFallback(yyv1464, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1466 := &x.Items
				yym1467 := z.DecBinary()
				_ = yym1467
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1461)
		} // end switch yys1461
	} // end for yyj1461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1468 int
	var yyb1468 bool
	var yyhl1468 bool = l >= 0
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1471 := &x.ListMeta
		yym1472 := z.DecBinary()
		_ = yym1472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1471) {
		} else {
			z.DecFallback(yyv1471, false)
		}
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1473 := &x.Items
		yym1474 := z.DecBinary()
		_ = yym1474
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1473), d)
		}
	}
	for {
		yyj1468++
		if yyhl1468 {
			yyb1468 = yyj1468 > l
		} else {
			yyb1468 = r.CheckBreak()
		}
		if yyb1468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1475 := z.EncBinary()
	_ = yym1475
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1476 := z.DecBinary()
	_ = yym1476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1477 := z.EncBinary()
		_ = yym1477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1478 := !z.EncBinary()
			yy2arr1478 := z.EncBasicHandle().StructToArray
			var yyq1478 [11]bool
			_, _, _ = yysep1478, yyq1478, yy2arr1478
			const yyr1478 bool = false
			yyq1478[2] = x.RestartPolicy != ""
			yyq1478[3] = x.TerminationGracePeriodSeconds != nil
			yyq1478[4] = x.ActiveDeadlineSeconds != nil
			yyq1478[5] = x.DNSPolicy != ""
			yyq1478[6] = len(x.NodeSelector) != 0
			yyq1478[8] = x.NodeName != ""
			yyq1478[9] = x.SecurityContext != nil
			yyq1478[10] = len(x.ImagePullSecrets) != 0
			var yynn1478 int
			if yyr1478 || yy2arr1478 {
				r.EncodeArrayStart(11)
			} else {
				yynn1478 = 3
				for _, b := range yyq1478 {
					if b {
						yynn1478++
					}
				}
				r.EncodeMapStart(yynn1478)
				yynn1478 = 0
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1480 := z.EncBinary()
					_ = yym1480
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1483 := z.EncBinary()
					_ = yym1483
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1487 := *x.TerminationGracePeriodSeconds
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else {
							r.EncodeInt(int64(yy1487))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1489 := *x.TerminationGracePeriodSeconds
						yym1490 := z.EncBinary()
						_ = yym1490
						if false {
						} else {
							r.EncodeInt(int64(yy1489))
						}
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1492 := *x.ActiveDeadlineSeconds
						yym1493 := z.EncBinary()
						_ = yym1493
						if false {
						} else {
							r.EncodeInt(int64(yy1492))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1494 := *x.ActiveDeadlineSeconds
						yym1495 := z.EncBinary()
						_ = yym1495
						if false {
						} else {
							r.EncodeInt(int64(yy1494))
						}
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1501 := z.EncBinary()
				_ = yym1501
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1502 := z.EncBinary()
				_ = yym1502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[8] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1478[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1509 := z.EncBinary()
						_ = yym1509
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1510 := z.DecBinary()
	_ = yym1510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1511 := r.ContainerType()
		if yyct1511 == codecSelferValueTypeMap1234 {
			yyl1511 := r.ReadMapStart()
			if yyl1511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1511, d)
			}
		} else if yyct1511 == codecSelferValueTypeArray1234 {
			yyl1511 := r.ReadArrayStart()
			if yyl1511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1512Slc
	var yyhl1512 bool = l >= 0
	for yyj1512 := 0; ; yyj1512++ {
		if yyhl1512 {
			if yyj1512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1512Slc = r.DecodeBytes(yys1512Slc, true, true)
		yys1512 := string(yys1512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1512 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1513 := &x.Volumes
				yym1514 := z.DecBinary()
				_ = yym1514
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1513), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1515 := &x.Containers
				yym1516 := z.DecBinary()
				_ = yym1516
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1515), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1521 := z.DecBinary()
				_ = yym1521
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1523 := &x.NodeSelector
				yym1524 := z.DecBinary()
				_ = yym1524
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1523, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1528 := &x.ImagePullSecrets
				yym1529 := z.DecBinary()
				_ = yym1529
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1528), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1512)
		} // end switch yys1512
	} // end for yyj1512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1530 int
	var yyb1530 bool
	var yyhl1530 bool = l >= 0
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1531 := &x.Volumes
		yym1532 := z.DecBinary()
		_ = yym1532
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1531), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1533 := &x.Containers
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1533), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1537 := z.DecBinary()
		_ = yym1537
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1539 := z.DecBinary()
		_ = yym1539
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1541 := &x.NodeSelector
		yym1542 := z.DecBinary()
		_ = yym1542
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1541, false, d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1546 := &x.ImagePullSecrets
		yym1547 := z.DecBinary()
		_ = yym1547
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1546), d)
		}
	}
	for {
		yyj1530++
		if yyhl1530 {
			yyb1530 = yyj1530 > l
		} else {
			yyb1530 = r.CheckBreak()
		}
		if yyb1530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1548 := z.EncBinary()
		_ = yym1548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1549 := !z.EncBinary()
			yy2arr1549 := z.EncBasicHandle().StructToArray
			var yyq1549 [8]bool
			_, _, _ = yysep1549, yyq1549, yy2arr1549
			const yyr1549 bool = false
			yyq1549[0] = x.HostNetwork != false
			yyq1549[1] = x.HostPID != false
			yyq1549[2] = x.HostIPC != false
			yyq1549[3] = x.SELinuxOptions != nil
			yyq1549[4] = x.RunAsUser != nil
			yyq1549[5] = x.RunAsNonRoot != nil
			yyq1549[6] = len(x.SupplementalGroups) != 0
			yyq1549[7] = x.FSGroup != nil
			var yynn1549 int
			if yyr1549 || yy2arr1549 {
				r.EncodeArrayStart(8)
			} else {
				yynn1549 = 0
				for _, b := range yyq1549 {
					if b {
						yynn1549++
					}
				}
				r.EncodeMapStart(yynn1549)
				yynn1549 = 0
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[0] {
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[1] {
					yym1554 := z.EncBinary()
					_ = yym1554
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[2] {
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1561 := *x.RunAsUser
						yym1562 := z.EncBinary()
						_ = yym1562
						if false {
						} else {
							r.EncodeInt(int64(yy1561))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1549[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1563 := *x.RunAsUser
						yym1564 := z.EncBinary()
						_ = yym1564
						if false {
						} else {
							r.EncodeInt(int64(yy1563))
						}
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1566 := *x.RunAsNonRoot
						yym1567 := z.EncBinary()
						_ = yym1567
						if false {
						} else {
							r.EncodeBool(bool(yy1566))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1549[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1568 := *x.RunAsNonRoot
						yym1569 := z.EncBinary()
						_ = yym1569
						if false {
						} else {
							r.EncodeBool(bool(yy1568))
						}
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1571 := z.EncBinary()
						_ = yym1571
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1549[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1549[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1574 := *x.FSGroup
						yym1575 := z.EncBinary()
						_ = yym1575
						if false {
						} else {
							r.EncodeInt(int64(yy1574))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1549[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1576 := *x.FSGroup
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else {
							r.EncodeInt(int64(yy1576))
						}
					}
				}
			}
			if yyr1549 || yy2arr1549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1578 := z.DecBinary()
	_ = yym1578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1579 := r.ContainerType()
		if yyct1579 == codecSelferValueTypeMap1234 {
			yyl1579 := r.ReadMapStart()
			if yyl1579 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1579, d)
			}
		} else if yyct1579 == codecSelferValueTypeArray1234 {
			yyl1579 := r.ReadArrayStart()
			if yyl1579 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1579, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1580Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1580Slc
	var yyhl1580 bool = l >= 0
	for yyj1580 := 0; ; yyj1580++ {
		if yyhl1580 {
			if yyj1580 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1580Slc = r.DecodeBytes(yys1580Slc, true, true)
		yys1580 := string(yys1580Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1580 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1586 := z.DecBinary()
				_ = yym1586
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1588 := z.DecBinary()
				_ = yym1588
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1589 := &x.SupplementalGroups
				yym1590 := z.DecBinary()
				_ = yym1590
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1589, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1592 := z.DecBinary()
				_ = yym1592
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1580)
		} // end switch yys1580
	} // end for yyj1580
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1593 int
	var yyb1593 bool
	var yyhl1593 bool = l >= 0
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1601 := z.DecBinary()
		_ = yym1601
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1602 := &x.SupplementalGroups
		yym1603 := z.DecBinary()
		_ = yym1603
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1602, false, d)
		}
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1605 := z.DecBinary()
		_ = yym1605
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1593++
		if yyhl1593 {
			yyb1593 = yyj1593 > l
		} else {
			yyb1593 = r.CheckBreak()
		}
		if yyb1593 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1593-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1606 := z.EncBinary()
		_ = yym1606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1607 := !z.EncBinary()
			yy2arr1607 := z.EncBasicHandle().StructToArray
			var yyq1607 [8]bool
			_, _, _ = yysep1607, yyq1607, yy2arr1607
			const yyr1607 bool = false
			yyq1607[0] = x.Phase != ""
			yyq1607[1] = len(x.Conditions) != 0
			yyq1607[2] = x.Message != ""
			yyq1607[3] = x.Reason != ""
			yyq1607[4] = x.HostIP != ""
			yyq1607[5] = x.PodIP != ""
			yyq1607[6] = x.StartTime != nil
			yyq1607[7] = len(x.ContainerStatuses) != 0
			var yynn1607 int
			if yyr1607 || yy2arr1607 {
				r.EncodeArrayStart(8)
			} else {
				yynn1607 = 0
				for _, b := range yyq1607 {
					if b {
						yynn1607++
					}
				}
				r.EncodeMapStart(yynn1607)
				yynn1607 = 0
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1607[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1610 := z.EncBinary()
						_ = yym1610
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1607[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1611 := z.EncBinary()
						_ = yym1611
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[2] {
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1607[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[3] {
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1607[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[4] {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1607[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[5] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1607[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1625 := z.EncBinary()
						_ = yym1625
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1625 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1625 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1607[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1626 := z.EncBinary()
						_ = yym1626
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1626 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1626 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1607[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1628 := z.EncBinary()
						_ = yym1628
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1607[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1629 := z.EncBinary()
						_ = yym1629
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1607 || yy2arr1607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1630 := z.DecBinary()
	_ = yym1630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1631 := r.ContainerType()
		if yyct1631 == codecSelferValueTypeMap1234 {
			yyl1631 := r.ReadMapStart()
			if yyl1631 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1631, d)
			}
		} else if yyct1631 == codecSelferValueTypeArray1234 {
			yyl1631 := r.ReadArrayStart()
			if yyl1631 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1631, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1632Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1632Slc
	var yyhl1632 bool = l >= 0
	for yyj1632 := 0; ; yyj1632++ {
		if yyhl1632 {
			if yyj1632 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1632Slc = r.DecodeBytes(yys1632Slc, true, true)
		yys1632 := string(yys1632Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1632 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1634 := &x.Conditions
				yym1635 := z.DecBinary()
				_ = yym1635
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1634), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1641 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1641 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1642 := &x.ContainerStatuses
				yym1643 := z.DecBinary()
				_ = yym1643
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1642), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1632)
		} // end switch yys1632
	} // end for yyj1632
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1644 int
	var yyb1644 bool
	var yyhl1644 bool = l >= 0
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1646 := &x.Conditions
		yym1647 := z.DecBinary()
		_ = yym1647
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1646), d)
		}
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1653 := z.DecBinary()
		_ = yym1653
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1653 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1653 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1654 := &x.ContainerStatuses
		yym1655 := z.DecBinary()
		_ = yym1655
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1654), d)
		}
	}
	for {
		yyj1644++
		if yyhl1644 {
			yyb1644 = yyj1644 > l
		} else {
			yyb1644 = r.CheckBreak()
		}
		if yyb1644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1656 := z.EncBinary()
		_ = yym1656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1657 := !z.EncBinary()
			yy2arr1657 := z.EncBasicHandle().StructToArray
			var yyq1657 [4]bool
			_, _, _ = yysep1657, yyq1657, yy2arr1657
			const yyr1657 bool = false
			yyq1657[0] = x.Kind != ""
			yyq1657[1] = x.APIVersion != ""
			yyq1657[2] = true
			yyq1657[3] = true
			var yynn1657 int
			if yyr1657 || yy2arr1657 {
				r.EncodeArrayStart(4)
			} else {
				yynn1657 = 0
				for _, b := range yyq1657 {
					if b {
						yynn1657++
					}
				}
				r.EncodeMapStart(yynn1657)
				yynn1657 = 0
			}
			if yyr1657 || yy2arr1657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1657[0] {
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1657[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1657 || yy2arr1657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1657[1] {
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1657[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1657 || yy2arr1657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1657[2] {
					yy1665 := &x.ObjectMeta
					yy1665.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1657[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1666 := &x.ObjectMeta
					yy1666.CodecEncodeSelf(e)
				}
			}
			if yyr1657 || yy2arr1657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1657[3] {
					yy1668 := &x.Status
					yy1668.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1657[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1669 := &x.Status
					yy1669.CodecEncodeSelf(e)
				}
			}
			if yyr1657 || yy2arr1657 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1670 := z.DecBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1671 := r.ContainerType()
		if yyct1671 == codecSelferValueTypeMap1234 {
			yyl1671 := r.ReadMapStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1671, d)
			}
		} else if yyct1671 == codecSelferValueTypeArray1234 {
			yyl1671 := r.ReadArrayStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1672Slc
	var yyhl1672 bool = l >= 0
	for yyj1672 := 0; ; yyj1672++ {
		if yyhl1672 {
			if yyj1672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1672Slc = r.DecodeBytes(yys1672Slc, true, true)
		yys1672 := string(yys1672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1672 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1675 := &x.ObjectMeta
				yyv1675.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1676 := &x.Status
				yyv1676.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1672)
		} // end switch yys1672
	} // end for yyj1672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1680 := &x.ObjectMeta
		yyv1680.CodecDecodeSelf(d)
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1681 := &x.Status
		yyv1681.CodecDecodeSelf(d)
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1682 := z.EncBinary()
		_ = yym1682
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1683 := !z.EncBinary()
			yy2arr1683 := z.EncBasicHandle().StructToArray
			var yyq1683 [5]bool
			_, _, _ = yysep1683, yyq1683, yy2arr1683
			const yyr1683 bool = false
			yyq1683[0] = x.Kind != ""
			yyq1683[1] = x.APIVersion != ""
			yyq1683[2] = true
			yyq1683[3] = true
			yyq1683[4] = true
			var yynn1683 int
			if yyr1683 || yy2arr1683 {
				r.EncodeArrayStart(5)
			} else {
				yynn1683 = 0
				for _, b := range yyq1683 {
					if b {
						yynn1683++
					}
				}
				r.EncodeMapStart(yynn1683)
				yynn1683 = 0
			}
			if yyr1683 || yy2arr1683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1683[0] {
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1683[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1683 || yy2arr1683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1683[1] {
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1683[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1683 || yy2arr1683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1683[2] {
					yy1691 := &x.ObjectMeta
					yy1691.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1683[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1692 := &x.ObjectMeta
					yy1692.CodecEncodeSelf(e)
				}
			}
			if yyr1683 || yy2arr1683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1683[3] {
					yy1694 := &x.Spec
					yy1694.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1683[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1695 := &x.Spec
					yy1695.CodecEncodeSelf(e)
				}
			}
			if yyr1683 || yy2arr1683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1683[4] {
					yy1697 := &x.Status
					yy1697.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1683[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1698 := &x.Status
					yy1698.CodecEncodeSelf(e)
				}
			}
			if yyr1683 || yy2arr1683 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1700 := r.ContainerType()
		if yyct1700 == codecSelferValueTypeMap1234 {
			yyl1700 := r.ReadMapStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1700, d)
			}
		} else if yyct1700 == codecSelferValueTypeArray1234 {
			yyl1700 := r.ReadArrayStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1701Slc
	var yyhl1701 bool = l >= 0
	for yyj1701 := 0; ; yyj1701++ {
		if yyhl1701 {
			if yyj1701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1701Slc = r.DecodeBytes(yys1701Slc, true, true)
		yys1701 := string(yys1701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1701 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1704 := &x.ObjectMeta
				yyv1704.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1705 := &x.Spec
				yyv1705.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1706 := &x.Status
				yyv1706.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1701)
		} // end switch yys1701
	} // end for yyj1701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1707 int
	var yyb1707 bool
	var yyhl1707 bool = l >= 0
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1710 := &x.ObjectMeta
		yyv1710.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1711 := &x.Spec
		yyv1711.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1712 := &x.Status
		yyv1712.CodecDecodeSelf(d)
	}
	for {
		yyj1707++
		if yyhl1707 {
			yyb1707 = yyj1707 > l
		} else {
			yyb1707 = r.CheckBreak()
		}
		if yyb1707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1713 := z.EncBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1714 := !z.EncBinary()
			yy2arr1714 := z.EncBasicHandle().StructToArray
			var yyq1714 [2]bool
			_, _, _ = yysep1714, yyq1714, yy2arr1714
			const yyr1714 bool = false
			yyq1714[0] = true
			yyq1714[1] = true
			var yynn1714 int
			if yyr1714 || yy2arr1714 {
				r.EncodeArrayStart(2)
			} else {
				yynn1714 = 0
				for _, b := range yyq1714 {
					if b {
						yynn1714++
					}
				}
				r.EncodeMapStart(yynn1714)
				yynn1714 = 0
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[0] {
					yy1716 := &x.ObjectMeta
					yy1716.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1717 := &x.ObjectMeta
					yy1717.CodecEncodeSelf(e)
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[1] {
					yy1719 := &x.Spec
					yy1719.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1720 := &x.Spec
					yy1720.CodecEncodeSelf(e)
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1721 := z.DecBinary()
	_ = yym1721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1722 := r.ContainerType()
		if yyct1722 == codecSelferValueTypeMap1234 {
			yyl1722 := r.ReadMapStart()
			if yyl1722 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1722, d)
			}
		} else if yyct1722 == codecSelferValueTypeArray1234 {
			yyl1722 := r.ReadArrayStart()
			if yyl1722 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1723Slc
	var yyhl1723 bool = l >= 0
	for yyj1723 := 0; ; yyj1723++ {
		if yyhl1723 {
			if yyj1723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1723Slc = r.DecodeBytes(yys1723Slc, true, true)
		yys1723 := string(yys1723Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1723 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1724 := &x.ObjectMeta
				yyv1724.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1725 := &x.Spec
				yyv1725.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1723)
		} // end switch yys1723
	} // end for yyj1723
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1726 int
	var yyb1726 bool
	var yyhl1726 bool = l >= 0
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1727 := &x.ObjectMeta
		yyv1727.CodecDecodeSelf(d)
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1728 := &x.Spec
		yyv1728.CodecDecodeSelf(d)
	}
	for {
		yyj1726++
		if yyhl1726 {
			yyb1726 = yyj1726 > l
		} else {
			yyb1726 = r.CheckBreak()
		}
		if yyb1726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1729 := z.EncBinary()
		_ = yym1729
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1730 := !z.EncBinary()
			yy2arr1730 := z.EncBasicHandle().StructToArray
			var yyq1730 [4]bool
			_, _, _ = yysep1730, yyq1730, yy2arr1730
			const yyr1730 bool = false
			yyq1730[0] = x.Kind != ""
			yyq1730[1] = x.APIVersion != ""
			yyq1730[2] = true
			yyq1730[3] = true
			var yynn1730 int
			if yyr1730 || yy2arr1730 {
				r.EncodeArrayStart(4)
			} else {
				yynn1730 = 0
				for _, b := range yyq1730 {
					if b {
						yynn1730++
					}
				}
				r.EncodeMapStart(yynn1730)
				yynn1730 = 0
			}
			if yyr1730 || yy2arr1730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1730[0] {
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1730[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1730 || yy2arr1730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1730[1] {
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1730[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1730 || yy2arr1730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1730[2] {
					yy1738 := &x.ObjectMeta
					yy1738.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1730[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1739 := &x.ObjectMeta
					yy1739.CodecEncodeSelf(e)
				}
			}
			if yyr1730 || yy2arr1730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1730[3] {
					yy1741 := &x.Template
					yy1741.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1730[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1742 := &x.Template
					yy1742.CodecEncodeSelf(e)
				}
			}
			if yyr1730 || yy2arr1730 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1743 := z.DecBinary()
	_ = yym1743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1744 := r.ContainerType()
		if yyct1744 == codecSelferValueTypeMap1234 {
			yyl1744 := r.ReadMapStart()
			if yyl1744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1744, d)
			}
		} else if yyct1744 == codecSelferValueTypeArray1234 {
			yyl1744 := r.ReadArrayStart()
			if yyl1744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1745Slc
	var yyhl1745 bool = l >= 0
	for yyj1745 := 0; ; yyj1745++ {
		if yyhl1745 {
			if yyj1745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1745Slc = r.DecodeBytes(yys1745Slc, true, true)
		yys1745 := string(yys1745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1745 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1748 := &x.ObjectMeta
				yyv1748.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1749 := &x.Template
				yyv1749.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1745)
		} // end switch yys1745
	} // end for yyj1745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1750 int
	var yyb1750 bool
	var yyhl1750 bool = l >= 0
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1753 := &x.ObjectMeta
		yyv1753.CodecDecodeSelf(d)
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1754 := &x.Template
		yyv1754.CodecDecodeSelf(d)
	}
	for {
		yyj1750++
		if yyhl1750 {
			yyb1750 = yyj1750 > l
		} else {
			yyb1750 = r.CheckBreak()
		}
		if yyb1750 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1750-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1755 := z.EncBinary()
		_ = yym1755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1756 := !z.EncBinary()
			yy2arr1756 := z.EncBasicHandle().StructToArray
			var yyq1756 [4]bool
			_, _, _ = yysep1756, yyq1756, yy2arr1756
			const yyr1756 bool = false
			yyq1756[0] = x.Kind != ""
			yyq1756[1] = x.APIVersion != ""
			yyq1756[2] = true
			var yynn1756 int
			if yyr1756 || yy2arr1756 {
				r.EncodeArrayStart(4)
			} else {
				yynn1756 = 1
				for _, b := range yyq1756 {
					if b {
						yynn1756++
					}
				}
				r.EncodeMapStart(yynn1756)
				yynn1756 = 0
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[0] {
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1756[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[1] {
					yym1761 := z.EncBinary()
					_ = yym1761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[2] {
					yy1764 := &x.ListMeta
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1764) {
					} else {
						z.EncFallback(yy1764)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1756[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1766 := &x.ListMeta
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1766) {
					} else {
						z.EncFallback(yy1766)
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1770 := z.EncBinary()
					_ = yym1770
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1771 := z.DecBinary()
	_ = yym1771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1772 := r.ContainerType()
		if yyct1772 == codecSelferValueTypeMap1234 {
			yyl1772 := r.ReadMapStart()
			if yyl1772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1772, d)
			}
		} else if yyct1772 == codecSelferValueTypeArray1234 {
			yyl1772 := r.ReadArrayStart()
			if yyl1772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1773Slc
	var yyhl1773 bool = l >= 0
	for yyj1773 := 0; ; yyj1773++ {
		if yyhl1773 {
			if yyj1773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1773Slc = r.DecodeBytes(yys1773Slc, true, true)
		yys1773 := string(yys1773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1773 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1776 := &x.ListMeta
				yym1777 := z.DecBinary()
				_ = yym1777
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1776) {
				} else {
					z.DecFallback(yyv1776, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1778 := &x.Items
				yym1779 := z.DecBinary()
				_ = yym1779
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1778), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1773)
		} // end switch yys1773
	} // end for yyj1773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1780 int
	var yyb1780 bool
	var yyhl1780 bool = l >= 0
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1783 := &x.ListMeta
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1783) {
		} else {
			z.DecFallback(yyv1783, false)
		}
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1785 := &x.Items
		yym1786 := z.DecBinary()
		_ = yym1786
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1785), d)
		}
	}
	for {
		yyj1780++
		if yyhl1780 {
			yyb1780 = yyj1780 > l
		} else {
			yyb1780 = r.CheckBreak()
		}
		if yyb1780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1787 := z.EncBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1788 := !z.EncBinary()
			yy2arr1788 := z.EncBasicHandle().StructToArray
			var yyq1788 [3]bool
			_, _, _ = yysep1788, yyq1788, yy2arr1788
			const yyr1788 bool = false
			yyq1788[2] = x.Template != nil
			var yynn1788 int
			if yyr1788 || yy2arr1788 {
				r.EncodeArrayStart(3)
			} else {
				yynn1788 = 2
				for _, b := range yyq1788 {
					if b {
						yynn1788++
					}
				}
				r.EncodeMapStart(yynn1788)
				yynn1788 = 0
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1790 := z.EncBinary()
				_ = yym1790
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1791 := z.EncBinary()
				_ = yym1791
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1796 := z.DecBinary()
	_ = yym1796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1797 := r.ContainerType()
		if yyct1797 == codecSelferValueTypeMap1234 {
			yyl1797 := r.ReadMapStart()
			if yyl1797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1797, d)
			}
		} else if yyct1797 == codecSelferValueTypeArray1234 {
			yyl1797 := r.ReadArrayStart()
			if yyl1797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1798Slc
	var yyhl1798 bool = l >= 0
	for yyj1798 := 0; ; yyj1798++ {
		if yyhl1798 {
			if yyj1798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1798Slc = r.DecodeBytes(yys1798Slc, true, true)
		yys1798 := string(yys1798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1798 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1800 := &x.Selector
				yym1801 := z.DecBinary()
				_ = yym1801
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1800, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1798)
		} // end switch yys1798
	} // end for yyj1798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1803 int
	var yyb1803 bool
	var yyhl1803 bool = l >= 0
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1805 := &x.Selector
		yym1806 := z.DecBinary()
		_ = yym1806
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1805, false, d)
		}
	}
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1803++
		if yyhl1803 {
			yyb1803 = yyj1803 > l
		} else {
			yyb1803 = r.CheckBreak()
		}
		if yyb1803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1808 := z.EncBinary()
		_ = yym1808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1809 := !z.EncBinary()
			yy2arr1809 := z.EncBasicHandle().StructToArray
			var yyq1809 [2]bool
			_, _, _ = yysep1809, yyq1809, yy2arr1809
			const yyr1809 bool = false
			yyq1809[1] = x.ObservedGeneration != 0
			var yynn1809 int
			if yyr1809 || yy2arr1809 {
				r.EncodeArrayStart(2)
			} else {
				yynn1809 = 1
				for _, b := range yyq1809 {
					if b {
						yynn1809++
					}
				}
				r.EncodeMapStart(yynn1809)
				yynn1809 = 0
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1811 := z.EncBinary()
				_ = yym1811
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1812 := z.EncBinary()
				_ = yym1812
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[1] {
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1809[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1816 := z.DecBinary()
	_ = yym1816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1817 := r.ContainerType()
		if yyct1817 == codecSelferValueTypeMap1234 {
			yyl1817 := r.ReadMapStart()
			if yyl1817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1817, d)
			}
		} else if yyct1817 == codecSelferValueTypeArray1234 {
			yyl1817 := r.ReadArrayStart()
			if yyl1817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1818Slc
	var yyhl1818 bool = l >= 0
	for yyj1818 := 0; ; yyj1818++ {
		if yyhl1818 {
			if yyj1818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1818Slc = r.DecodeBytes(yys1818Slc, true, true)
		yys1818 := string(yys1818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1818 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1818)
		} // end switch yys1818
	} // end for yyj1818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1821 int
	var yyb1821 bool
	var yyhl1821 bool = l >= 0
	yyj1821++
	if yyhl1821 {
		yyb1821 = yyj1821 > l
	} else {
		yyb1821 = r.CheckBreak()
	}
	if yyb1821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1821++
	if yyhl1821 {
		yyb1821 = yyj1821 > l
	} else {
		yyb1821 = r.CheckBreak()
	}
	if yyb1821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1821++
		if yyhl1821 {
			yyb1821 = yyj1821 > l
		} else {
			yyb1821 = r.CheckBreak()
		}
		if yyb1821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1824 := z.EncBinary()
		_ = yym1824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1825 := !z.EncBinary()
			yy2arr1825 := z.EncBasicHandle().StructToArray
			var yyq1825 [5]bool
			_, _, _ = yysep1825, yyq1825, yy2arr1825
			const yyr1825 bool = false
			yyq1825[0] = x.Kind != ""
			yyq1825[1] = x.APIVersion != ""
			yyq1825[2] = true
			yyq1825[3] = true
			yyq1825[4] = true
			var yynn1825 int
			if yyr1825 || yy2arr1825 {
				r.EncodeArrayStart(5)
			} else {
				yynn1825 = 0
				for _, b := range yyq1825 {
					if b {
						yynn1825++
					}
				}
				r.EncodeMapStart(yynn1825)
				yynn1825 = 0
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1825[0] {
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1825[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1825[1] {
					yym1830 := z.EncBinary()
					_ = yym1830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1825[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1831 := z.EncBinary()
					_ = yym1831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1825[2] {
					yy1833 := &x.ObjectMeta
					yy1833.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1825[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1834 := &x.ObjectMeta
					yy1834.CodecEncodeSelf(e)
				}
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1825[3] {
					yy1836 := &x.Spec
					yy1836.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1825[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1837 := &x.Spec
					yy1837.CodecEncodeSelf(e)
				}
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1825[4] {
					yy1839 := &x.Status
					yy1839.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1825[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1840 := &x.Status
					yy1840.CodecEncodeSelf(e)
				}
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1841 := z.DecBinary()
	_ = yym1841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1842 := r.ContainerType()
		if yyct1842 == codecSelferValueTypeMap1234 {
			yyl1842 := r.ReadMapStart()
			if yyl1842 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1842, d)
			}
		} else if yyct1842 == codecSelferValueTypeArray1234 {
			yyl1842 := r.ReadArrayStart()
			if yyl1842 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1843Slc
	var yyhl1843 bool = l >= 0
	for yyj1843 := 0; ; yyj1843++ {
		if yyhl1843 {
			if yyj1843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1843Slc = r.DecodeBytes(yys1843Slc, true, true)
		yys1843 := string(yys1843Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1843 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1846 := &x.ObjectMeta
				yyv1846.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1847 := &x.Spec
				yyv1847.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1848 := &x.Status
				yyv1848.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1843)
		} // end switch yys1843
	} // end for yyj1843
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1849 int
	var yyb1849 bool
	var yyhl1849 bool = l >= 0
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1852 := &x.ObjectMeta
		yyv1852.CodecDecodeSelf(d)
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1853 := &x.Spec
		yyv1853.CodecDecodeSelf(d)
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1854 := &x.Status
		yyv1854.CodecDecodeSelf(d)
	}
	for {
		yyj1849++
		if yyhl1849 {
			yyb1849 = yyj1849 > l
		} else {
			yyb1849 = r.CheckBreak()
		}
		if yyb1849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1855 := z.EncBinary()
		_ = yym1855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1856 := !z.EncBinary()
			yy2arr1856 := z.EncBasicHandle().StructToArray
			var yyq1856 [4]bool
			_, _, _ = yysep1856, yyq1856, yy2arr1856
			const yyr1856 bool = false
			yyq1856[0] = x.Kind != ""
			yyq1856[1] = x.APIVersion != ""
			yyq1856[2] = true
			var yynn1856 int
			if yyr1856 || yy2arr1856 {
				r.EncodeArrayStart(4)
			} else {
				yynn1856 = 1
				for _, b := range yyq1856 {
					if b {
						yynn1856++
					}
				}
				r.EncodeMapStart(yynn1856)
				yynn1856 = 0
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[0] {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1856[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[1] {
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[2] {
					yy1864 := &x.ListMeta
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1864) {
					} else {
						z.EncFallback(yy1864)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1866 := &x.ListMeta
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1866) {
					} else {
						z.EncFallback(yy1866)
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1869 := z.EncBinary()
					_ = yym1869
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1871 := z.DecBinary()
	_ = yym1871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1872 := r.ContainerType()
		if yyct1872 == codecSelferValueTypeMap1234 {
			yyl1872 := r.ReadMapStart()
			if yyl1872 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1872, d)
			}
		} else if yyct1872 == codecSelferValueTypeArray1234 {
			yyl1872 := r.ReadArrayStart()
			if yyl1872 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1873Slc
	var yyhl1873 bool = l >= 0
	for yyj1873 := 0; ; yyj1873++ {
		if yyhl1873 {
			if yyj1873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1873Slc = r.DecodeBytes(yys1873Slc, true, true)
		yys1873 := string(yys1873Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1873 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1876 := &x.ListMeta
				yym1877 := z.DecBinary()
				_ = yym1877
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1876) {
				} else {
					z.DecFallback(yyv1876, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1878 := &x.Items
				yym1879 := z.DecBinary()
				_ = yym1879
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1878), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1873)
		} // end switch yys1873
	} // end for yyj1873
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1880 int
	var yyb1880 bool
	var yyhl1880 bool = l >= 0
	yyj1880++
	if yyhl1880 {
		yyb1880 = yyj1880 > l
	} else {
		yyb1880 = r.CheckBreak()
	}
	if yyb1880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1880++
	if yyhl1880 {
		yyb1880 = yyj1880 > l
	} else {
		yyb1880 = r.CheckBreak()
	}
	if yyb1880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1880++
	if yyhl1880 {
		yyb1880 = yyj1880 > l
	} else {
		yyb1880 = r.CheckBreak()
	}
	if yyb1880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1883 := &x.ListMeta
		yym1884 := z.DecBinary()
		_ = yym1884
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1883) {
		} else {
			z.DecFallback(yyv1883, false)
		}
	}
	yyj1880++
	if yyhl1880 {
		yyb1880 = yyj1880 > l
	} else {
		yyb1880 = r.CheckBreak()
	}
	if yyb1880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1885 := &x.Items
		yym1886 := z.DecBinary()
		_ = yym1886
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1885), d)
		}
	}
	for {
		yyj1880++
		if yyhl1880 {
			yyb1880 = yyj1880 > l
		} else {
			yyb1880 = r.CheckBreak()
		}
		if yyb1880 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1880-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1887 := z.EncBinary()
		_ = yym1887
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1888 := !z.EncBinary()
			yy2arr1888 := z.EncBasicHandle().StructToArray
			var yyq1888 [4]bool
			_, _, _ = yysep1888, yyq1888, yy2arr1888
			const yyr1888 bool = false
			yyq1888[0] = x.Kind != ""
			yyq1888[1] = x.APIVersion != ""
			yyq1888[2] = true
			var yynn1888 int
			if yyr1888 || yy2arr1888 {
				r.EncodeArrayStart(4)
			} else {
				yynn1888 = 1
				for _, b := range yyq1888 {
					if b {
						yynn1888++
					}
				}
				r.EncodeMapStart(yynn1888)
				yynn1888 = 0
			}
			if yyr1888 || yy2arr1888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1888[0] {
					yym1890 := z.EncBinary()
					_ = yym1890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1888[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1888 || yy2arr1888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1888[1] {
					yym1893 := z.EncBinary()
					_ = yym1893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1888[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1888 || yy2arr1888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1888[2] {
					yy1896 := &x.ListMeta
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1896) {
					} else {
						z.EncFallback(yy1896)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1888[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1898 := &x.ListMeta
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1898) {
					} else {
						z.EncFallback(yy1898)
					}
				}
			}
			if yyr1888 || yy2arr1888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1888 || yy2arr1888 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1903 := z.DecBinary()
	_ = yym1903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1904 := r.ContainerType()
		if yyct1904 == codecSelferValueTypeMap1234 {
			yyl1904 := r.ReadMapStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1904, d)
			}
		} else if yyct1904 == codecSelferValueTypeArray1234 {
			yyl1904 := r.ReadArrayStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1905Slc
	var yyhl1905 bool = l >= 0
	for yyj1905 := 0; ; yyj1905++ {
		if yyhl1905 {
			if yyj1905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1905Slc = r.DecodeBytes(yys1905Slc, true, true)
		yys1905 := string(yys1905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1905 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1908 := &x.ListMeta
				yym1909 := z.DecBinary()
				_ = yym1909
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1908) {
				} else {
					z.DecFallback(yyv1908, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1910 := &x.Items
				yym1911 := z.DecBinary()
				_ = yym1911
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1910), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1905)
		} // end switch yys1905
	} // end for yyj1905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1912 int
	var yyb1912 bool
	var yyhl1912 bool = l >= 0
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1915 := &x.ListMeta
		yym1916 := z.DecBinary()
		_ = yym1916
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1915) {
		} else {
			z.DecFallback(yyv1915, false)
		}
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1917 := &x.Items
		yym1918 := z.DecBinary()
		_ = yym1918
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1917), d)
		}
	}
	for {
		yyj1912++
		if yyhl1912 {
			yyb1912 = yyj1912 > l
		} else {
			yyb1912 = r.CheckBreak()
		}
		if yyb1912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1919 := z.EncBinary()
	_ = yym1919
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1920 := z.DecBinary()
	_ = yym1920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1921 := z.EncBinary()
	_ = yym1921
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1922 := z.DecBinary()
	_ = yym1922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1923 := z.EncBinary()
		_ = yym1923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1924 := !z.EncBinary()
			yy2arr1924 := z.EncBasicHandle().StructToArray
			var yyq1924 [1]bool
			_, _, _ = yysep1924, yyq1924, yy2arr1924
			const yyr1924 bool = false
			yyq1924[0] = true
			var yynn1924 int
			if yyr1924 || yy2arr1924 {
				r.EncodeArrayStart(1)
			} else {
				yynn1924 = 0
				for _, b := range yyq1924 {
					if b {
						yynn1924++
					}
				}
				r.EncodeMapStart(yynn1924)
				yynn1924 = 0
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[0] {
					yy1926 := &x.LoadBalancer
					yy1926.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1927 := &x.LoadBalancer
					yy1927.CodecEncodeSelf(e)
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1928 := z.DecBinary()
	_ = yym1928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1929 := r.ContainerType()
		if yyct1929 == codecSelferValueTypeMap1234 {
			yyl1929 := r.ReadMapStart()
			if yyl1929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1929, d)
			}
		} else if yyct1929 == codecSelferValueTypeArray1234 {
			yyl1929 := r.ReadArrayStart()
			if yyl1929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1930Slc
	var yyhl1930 bool = l >= 0
	for yyj1930 := 0; ; yyj1930++ {
		if yyhl1930 {
			if yyj1930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1930Slc = r.DecodeBytes(yys1930Slc, true, true)
		yys1930 := string(yys1930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1930 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1931 := &x.LoadBalancer
				yyv1931.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1930)
		} // end switch yys1930
	} // end for yyj1930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1932 int
	var yyb1932 bool
	var yyhl1932 bool = l >= 0
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1933 := &x.LoadBalancer
		yyv1933.CodecDecodeSelf(d)
	}
	for {
		yyj1932++
		if yyhl1932 {
			yyb1932 = yyj1932 > l
		} else {
			yyb1932 = r.CheckBreak()
		}
		if yyb1932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1934 := z.EncBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1935 := !z.EncBinary()
			yy2arr1935 := z.EncBasicHandle().StructToArray
			var yyq1935 [1]bool
			_, _, _ = yysep1935, yyq1935, yy2arr1935
			const yyr1935 bool = false
			yyq1935[0] = len(x.Ingress) != 0
			var yynn1935 int
			if yyr1935 || yy2arr1935 {
				r.EncodeArrayStart(1)
			} else {
				yynn1935 = 0
				for _, b := range yyq1935 {
					if b {
						yynn1935++
					}
				}
				r.EncodeMapStart(yynn1935)
				yynn1935 = 0
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1937 := z.EncBinary()
						_ = yym1937
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1938 := z.EncBinary()
						_ = yym1938
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1939 := z.DecBinary()
	_ = yym1939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1940 := r.ContainerType()
		if yyct1940 == codecSelferValueTypeMap1234 {
			yyl1940 := r.ReadMapStart()
			if yyl1940 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1940, d)
			}
		} else if yyct1940 == codecSelferValueTypeArray1234 {
			yyl1940 := r.ReadArrayStart()
			if yyl1940 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1941Slc
	var yyhl1941 bool = l >= 0
	for yyj1941 := 0; ; yyj1941++ {
		if yyhl1941 {
			if yyj1941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1941Slc = r.DecodeBytes(yys1941Slc, true, true)
		yys1941 := string(yys1941Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1941 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1942 := &x.Ingress
				yym1943 := z.DecBinary()
				_ = yym1943
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1942), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1941)
		} // end switch yys1941
	} // end for yyj1941
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1944 int
	var yyb1944 bool
	var yyhl1944 bool = l >= 0
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1945 := &x.Ingress
		yym1946 := z.DecBinary()
		_ = yym1946
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1945), d)
		}
	}
	for {
		yyj1944++
		if yyhl1944 {
			yyb1944 = yyj1944 > l
		} else {
			yyb1944 = r.CheckBreak()
		}
		if yyb1944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1947 := z.EncBinary()
		_ = yym1947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1948 := !z.EncBinary()
			yy2arr1948 := z.EncBasicHandle().StructToArray
			var yyq1948 [2]bool
			_, _, _ = yysep1948, yyq1948, yy2arr1948
			const yyr1948 bool = false
			yyq1948[0] = x.IP != ""
			yyq1948[1] = x.Hostname != ""
			var yynn1948 int
			if yyr1948 || yy2arr1948 {
				r.EncodeArrayStart(2)
			} else {
				yynn1948 = 0
				for _, b := range yyq1948 {
					if b {
						yynn1948++
					}
				}
				r.EncodeMapStart(yynn1948)
				yynn1948 = 0
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[0] {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[1] {
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1954 := z.EncBinary()
					_ = yym1954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1955 := z.DecBinary()
	_ = yym1955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1956 := r.ContainerType()
		if yyct1956 == codecSelferValueTypeMap1234 {
			yyl1956 := r.ReadMapStart()
			if yyl1956 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1956, d)
			}
		} else if yyct1956 == codecSelferValueTypeArray1234 {
			yyl1956 := r.ReadArrayStart()
			if yyl1956 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1956, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1957Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1957Slc
	var yyhl1957 bool = l >= 0
	for yyj1957 := 0; ; yyj1957++ {
		if yyhl1957 {
			if yyj1957 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1957Slc = r.DecodeBytes(yys1957Slc, true, true)
		yys1957 := string(yys1957Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1957 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1957)
		} // end switch yys1957
	} // end for yyj1957
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1960 int
	var yyb1960 bool
	var yyhl1960 bool = l >= 0
	yyj1960++
	if yyhl1960 {
		yyb1960 = yyj1960 > l
	} else {
		yyb1960 = r.CheckBreak()
	}
	if yyb1960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1960++
	if yyhl1960 {
		yyb1960 = yyj1960 > l
	} else {
		yyb1960 = r.CheckBreak()
	}
	if yyb1960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1960++
		if yyhl1960 {
			yyb1960 = yyj1960 > l
		} else {
			yyb1960 = r.CheckBreak()
		}
		if yyb1960 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1960-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1963 := z.EncBinary()
		_ = yym1963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1964 := !z.EncBinary()
			yy2arr1964 := z.EncBasicHandle().StructToArray
			var yyq1964 [7]bool
			_, _, _ = yysep1964, yyq1964, yy2arr1964
			const yyr1964 bool = false
			yyq1964[0] = x.Type != ""
			yyq1964[3] = x.ClusterIP != ""
			yyq1964[4] = len(x.ExternalIPs) != 0
			yyq1964[5] = x.LoadBalancerIP != ""
			yyq1964[6] = x.SessionAffinity != ""
			var yynn1964 int
			if yyr1964 || yy2arr1964 {
				r.EncodeArrayStart(7)
			} else {
				yynn1964 = 2
				for _, b := range yyq1964 {
					if b {
						yynn1964++
					}
				}
				r.EncodeMapStart(yynn1964)
				yynn1964 = 0
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1967 := z.EncBinary()
					_ = yym1967
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1968 := z.EncBinary()
					_ = yym1968
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[3] {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1964[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1976 := z.EncBinary()
						_ = yym1976
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1964[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1977 := z.EncBinary()
						_ = yym1977
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[5] {
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1964[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1964[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1982 := z.DecBinary()
	_ = yym1982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1983 := r.ContainerType()
		if yyct1983 == codecSelferValueTypeMap1234 {
			yyl1983 := r.ReadMapStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1983, d)
			}
		} else if yyct1983 == codecSelferValueTypeArray1234 {
			yyl1983 := r.ReadArrayStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1984Slc
	var yyhl1984 bool = l >= 0
	for yyj1984 := 0; ; yyj1984++ {
		if yyhl1984 {
			if yyj1984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1984Slc = r.DecodeBytes(yys1984Slc, true, true)
		yys1984 := string(yys1984Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1984 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1986 := &x.Ports
				yym1987 := z.DecBinary()
				_ = yym1987
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1986), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1988 := &x.Selector
				yym1989 := z.DecBinary()
				_ = yym1989
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1988, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1991 := &x.ExternalIPs
				yym1992 := z.DecBinary()
				_ = yym1992
				if false {
				} else {
					z.F.DecSliceStringX(yyv1991, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1984)
		} // end switch yys1984
	} // end for yyj1984
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1995 int
	var yyb1995 bool
	var yyhl1995 bool = l >= 0
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1997 := &x.Ports
		yym1998 := z.DecBinary()
		_ = yym1998
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1997), d)
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1999 := &x.Selector
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1999, false, d)
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2002 := &x.ExternalIPs
		yym2003 := z.DecBinary()
		_ = yym2003
		if false {
		} else {
			z.F.DecSliceStringX(yyv2002, false, d)
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1995++
		if yyhl1995 {
			yyb1995 = yyj1995 > l
		} else {
			yyb1995 = r.CheckBreak()
		}
		if yyb1995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2006 := z.EncBinary()
		_ = yym2006
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2007 := !z.EncBinary()
			yy2arr2007 := z.EncBasicHandle().StructToArray
			var yyq2007 [5]bool
			_, _, _ = yysep2007, yyq2007, yy2arr2007
			const yyr2007 bool = false
			var yynn2007 int
			if yyr2007 || yy2arr2007 {
				r.EncodeArrayStart(5)
			} else {
				yynn2007 = 5
				for _, b := range yyq2007 {
					if b {
						yynn2007++
					}
				}
				r.EncodeMapStart(yynn2007)
				yynn2007 = 0
			}
			if yyr2007 || yy2arr2007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2009 := z.EncBinary()
				_ = yym2009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2010 := z.EncBinary()
				_ = yym2010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2007 || yy2arr2007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2007 || yy2arr2007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2013 := z.EncBinary()
				_ = yym2013
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2014 := z.EncBinary()
				_ = yym2014
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2007 || yy2arr2007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2016 := &x.TargetPort
				yym2017 := z.EncBinary()
				_ = yym2017
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2016) {
				} else if !yym2017 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2016)
				} else {
					z.EncFallback(yy2016)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2018 := &x.TargetPort
				yym2019 := z.EncBinary()
				_ = yym2019
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2018) {
				} else if !yym2019 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2018)
				} else {
					z.EncFallback(yy2018)
				}
			}
			if yyr2007 || yy2arr2007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2021 := z.EncBinary()
				_ = yym2021
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2022 := z.EncBinary()
				_ = yym2022
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2007 || yy2arr2007 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2023 := z.DecBinary()
	_ = yym2023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2024 := r.ContainerType()
		if yyct2024 == codecSelferValueTypeMap1234 {
			yyl2024 := r.ReadMapStart()
			if yyl2024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2024, d)
			}
		} else if yyct2024 == codecSelferValueTypeArray1234 {
			yyl2024 := r.ReadArrayStart()
			if yyl2024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2025Slc
	var yyhl2025 bool = l >= 0
	for yyj2025 := 0; ; yyj2025++ {
		if yyhl2025 {
			if yyj2025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2025Slc = r.DecodeBytes(yys2025Slc, true, true)
		yys2025 := string(yys2025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2025 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2029 := &x.TargetPort
				yym2030 := z.DecBinary()
				_ = yym2030
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2029) {
				} else if !yym2030 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2029)
				} else {
					z.DecFallback(yyv2029, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2025)
		} // end switch yys2025
	} // end for yyj2025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2032 int
	var yyb2032 bool
	var yyhl2032 bool = l >= 0
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2036 := &x.TargetPort
		yym2037 := z.DecBinary()
		_ = yym2037
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2036) {
		} else if !yym2037 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2036)
		} else {
			z.DecFallback(yyv2036, false)
		}
	}
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2032++
		if yyhl2032 {
			yyb2032 = yyj2032 > l
		} else {
			yyb2032 = r.CheckBreak()
		}
		if yyb2032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2039 := z.EncBinary()
		_ = yym2039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2040 := !z.EncBinary()
			yy2arr2040 := z.EncBasicHandle().StructToArray
			var yyq2040 [5]bool
			_, _, _ = yysep2040, yyq2040, yy2arr2040
			const yyr2040 bool = false
			yyq2040[0] = x.Kind != ""
			yyq2040[1] = x.APIVersion != ""
			yyq2040[2] = true
			yyq2040[3] = true
			yyq2040[4] = true
			var yynn2040 int
			if yyr2040 || yy2arr2040 {
				r.EncodeArrayStart(5)
			} else {
				yynn2040 = 0
				for _, b := range yyq2040 {
					if b {
						yynn2040++
					}
				}
				r.EncodeMapStart(yynn2040)
				yynn2040 = 0
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[0] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[1] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[2] {
					yy2048 := &x.ObjectMeta
					yy2048.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2040[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2049 := &x.ObjectMeta
					yy2049.CodecEncodeSelf(e)
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[3] {
					yy2051 := &x.Spec
					yy2051.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2040[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2052 := &x.Spec
					yy2052.CodecEncodeSelf(e)
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[4] {
					yy2054 := &x.Status
					yy2054.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2040[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2055 := &x.Status
					yy2055.CodecEncodeSelf(e)
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2056 := z.DecBinary()
	_ = yym2056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2057 := r.ContainerType()
		if yyct2057 == codecSelferValueTypeMap1234 {
			yyl2057 := r.ReadMapStart()
			if yyl2057 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2057, d)
			}
		} else if yyct2057 == codecSelferValueTypeArray1234 {
			yyl2057 := r.ReadArrayStart()
			if yyl2057 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2058Slc
	var yyhl2058 bool = l >= 0
	for yyj2058 := 0; ; yyj2058++ {
		if yyhl2058 {
			if yyj2058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2058Slc = r.DecodeBytes(yys2058Slc, true, true)
		yys2058 := string(yys2058Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2058 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2061 := &x.ObjectMeta
				yyv2061.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2062 := &x.Spec
				yyv2062.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2063 := &x.Status
				yyv2063.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2058)
		} // end switch yys2058
	} // end for yyj2058
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2064 int
	var yyb2064 bool
	var yyhl2064 bool = l >= 0
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2067 := &x.ObjectMeta
		yyv2067.CodecDecodeSelf(d)
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2068 := &x.Spec
		yyv2068.CodecDecodeSelf(d)
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2069 := &x.Status
		yyv2069.CodecDecodeSelf(d)
	}
	for {
		yyj2064++
		if yyhl2064 {
			yyb2064 = yyj2064 > l
		} else {
			yyb2064 = r.CheckBreak()
		}
		if yyb2064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2070 := z.EncBinary()
		_ = yym2070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2071 := !z.EncBinary()
			yy2arr2071 := z.EncBasicHandle().StructToArray
			var yyq2071 [5]bool
			_, _, _ = yysep2071, yyq2071, yy2arr2071
			const yyr2071 bool = false
			yyq2071[0] = x.Kind != ""
			yyq2071[1] = x.APIVersion != ""
			yyq2071[2] = true
			yyq2071[4] = len(x.ImagePullSecrets) != 0
			var yynn2071 int
			if yyr2071 || yy2arr2071 {
				r.EncodeArrayStart(5)
			} else {
				yynn2071 = 1
				for _, b := range yyq2071 {
					if b {
						yynn2071++
					}
				}
				r.EncodeMapStart(yynn2071)
				yynn2071 = 0
			}
			if yyr2071 || yy2arr2071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2071[0] {
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2074 := z.EncBinary()
					_ = yym2074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2071 || yy2arr2071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2071[1] {
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2071[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2071 || yy2arr2071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2071[2] {
					yy2079 := &x.ObjectMeta
					yy2079.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2071[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2080 := &x.ObjectMeta
					yy2080.CodecEncodeSelf(e)
				}
			}
			if yyr2071 || yy2arr2071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2071 || yy2arr2071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2071[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2085 := z.EncBinary()
						_ = yym2085
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2071[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2086 := z.EncBinary()
						_ = yym2086
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2071 || yy2arr2071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2087 := z.DecBinary()
	_ = yym2087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2088 := r.ContainerType()
		if yyct2088 == codecSelferValueTypeMap1234 {
			yyl2088 := r.ReadMapStart()
			if yyl2088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2088, d)
			}
		} else if yyct2088 == codecSelferValueTypeArray1234 {
			yyl2088 := r.ReadArrayStart()
			if yyl2088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2089Slc
	var yyhl2089 bool = l >= 0
	for yyj2089 := 0; ; yyj2089++ {
		if yyhl2089 {
			if yyj2089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2089Slc = r.DecodeBytes(yys2089Slc, true, true)
		yys2089 := string(yys2089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2089 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2092 := &x.ObjectMeta
				yyv2092.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2093 := &x.Secrets
				yym2094 := z.DecBinary()
				_ = yym2094
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2093), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2095 := &x.ImagePullSecrets
				yym2096 := z.DecBinary()
				_ = yym2096
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2095), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2089)
		} // end switch yys2089
	} // end for yyj2089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2097 int
	var yyb2097 bool
	var yyhl2097 bool = l >= 0
	yyj2097++
	if yyhl2097 {
		yyb2097 = yyj2097 > l
	} else {
		yyb2097 = r.CheckBreak()
	}
	if yyb2097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2097++
	if yyhl2097 {
		yyb2097 = yyj2097 > l
	} else {
		yyb2097 = r.CheckBreak()
	}
	if yyb2097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2097++
	if yyhl2097 {
		yyb2097 = yyj2097 > l
	} else {
		yyb2097 = r.CheckBreak()
	}
	if yyb2097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2100 := &x.ObjectMeta
		yyv2100.CodecDecodeSelf(d)
	}
	yyj2097++
	if yyhl2097 {
		yyb2097 = yyj2097 > l
	} else {
		yyb2097 = r.CheckBreak()
	}
	if yyb2097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2101 := &x.Secrets
		yym2102 := z.DecBinary()
		_ = yym2102
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2101), d)
		}
	}
	yyj2097++
	if yyhl2097 {
		yyb2097 = yyj2097 > l
	} else {
		yyb2097 = r.CheckBreak()
	}
	if yyb2097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2103 := &x.ImagePullSecrets
		yym2104 := z.DecBinary()
		_ = yym2104
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2103), d)
		}
	}
	for {
		yyj2097++
		if yyhl2097 {
			yyb2097 = yyj2097 > l
		} else {
			yyb2097 = r.CheckBreak()
		}
		if yyb2097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2105 := z.EncBinary()
		_ = yym2105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2106 := !z.EncBinary()
			yy2arr2106 := z.EncBasicHandle().StructToArray
			var yyq2106 [4]bool
			_, _, _ = yysep2106, yyq2106, yy2arr2106
			const yyr2106 bool = false
			yyq2106[0] = x.Kind != ""
			yyq2106[1] = x.APIVersion != ""
			yyq2106[2] = true
			var yynn2106 int
			if yyr2106 || yy2arr2106 {
				r.EncodeArrayStart(4)
			} else {
				yynn2106 = 1
				for _, b := range yyq2106 {
					if b {
						yynn2106++
					}
				}
				r.EncodeMapStart(yynn2106)
				yynn2106 = 0
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[0] {
					yym2108 := z.EncBinary()
					_ = yym2108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2106[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[1] {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2106[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[2] {
					yy2114 := &x.ListMeta
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2114) {
					} else {
						z.EncFallback(yy2114)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2106[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2116 := &x.ListMeta
					yym2117 := z.EncBinary()
					_ = yym2117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2116) {
					} else {
						z.EncFallback(yy2116)
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2121 := z.DecBinary()
	_ = yym2121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2122 := r.ContainerType()
		if yyct2122 == codecSelferValueTypeMap1234 {
			yyl2122 := r.ReadMapStart()
			if yyl2122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2122, d)
			}
		} else if yyct2122 == codecSelferValueTypeArray1234 {
			yyl2122 := r.ReadArrayStart()
			if yyl2122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2123Slc
	var yyhl2123 bool = l >= 0
	for yyj2123 := 0; ; yyj2123++ {
		if yyhl2123 {
			if yyj2123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2123Slc = r.DecodeBytes(yys2123Slc, true, true)
		yys2123 := string(yys2123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2123 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2126 := &x.ListMeta
				yym2127 := z.DecBinary()
				_ = yym2127
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2126) {
				} else {
					z.DecFallback(yyv2126, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2128 := &x.Items
				yym2129 := z.DecBinary()
				_ = yym2129
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2128), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2123)
		} // end switch yys2123
	} // end for yyj2123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2130 int
	var yyb2130 bool
	var yyhl2130 bool = l >= 0
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2133 := &x.ListMeta
		yym2134 := z.DecBinary()
		_ = yym2134
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2133) {
		} else {
			z.DecFallback(yyv2133, false)
		}
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2135 := &x.Items
		yym2136 := z.DecBinary()
		_ = yym2136
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2135), d)
		}
	}
	for {
		yyj2130++
		if yyhl2130 {
			yyb2130 = yyj2130 > l
		} else {
			yyb2130 = r.CheckBreak()
		}
		if yyb2130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2137 := z.EncBinary()
		_ = yym2137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2138 := !z.EncBinary()
			yy2arr2138 := z.EncBasicHandle().StructToArray
			var yyq2138 [4]bool
			_, _, _ = yysep2138, yyq2138, yy2arr2138
			const yyr2138 bool = false
			yyq2138[0] = x.Kind != ""
			yyq2138[1] = x.APIVersion != ""
			yyq2138[2] = true
			var yynn2138 int
			if yyr2138 || yy2arr2138 {
				r.EncodeArrayStart(4)
			} else {
				yynn2138 = 1
				for _, b := range yyq2138 {
					if b {
						yynn2138++
					}
				}
				r.EncodeMapStart(yynn2138)
				yynn2138 = 0
			}
			if yyr2138 || yy2arr2138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2138[0] {
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2138[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2138 || yy2arr2138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2138[1] {
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2138[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2138 || yy2arr2138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2138[2] {
					yy2146 := &x.ObjectMeta
					yy2146.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2138[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2147 := &x.ObjectMeta
					yy2147.CodecEncodeSelf(e)
				}
			}
			if yyr2138 || yy2arr2138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2138 || yy2arr2138 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2151 := z.DecBinary()
	_ = yym2151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2152 := r.ContainerType()
		if yyct2152 == codecSelferValueTypeMap1234 {
			yyl2152 := r.ReadMapStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2152, d)
			}
		} else if yyct2152 == codecSelferValueTypeArray1234 {
			yyl2152 := r.ReadArrayStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2153Slc
	var yyhl2153 bool = l >= 0
	for yyj2153 := 0; ; yyj2153++ {
		if yyhl2153 {
			if yyj2153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2153Slc = r.DecodeBytes(yys2153Slc, true, true)
		yys2153 := string(yys2153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2153 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2156 := &x.ObjectMeta
				yyv2156.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2157 := &x.Subsets
				yym2158 := z.DecBinary()
				_ = yym2158
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2157), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2153)
		} // end switch yys2153
	} // end for yyj2153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2159 int
	var yyb2159 bool
	var yyhl2159 bool = l >= 0
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2162 := &x.ObjectMeta
		yyv2162.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2163 := &x.Subsets
		yym2164 := z.DecBinary()
		_ = yym2164
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2163), d)
		}
	}
	for {
		yyj2159++
		if yyhl2159 {
			yyb2159 = yyj2159 > l
		} else {
			yyb2159 = r.CheckBreak()
		}
		if yyb2159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2165 := z.EncBinary()
		_ = yym2165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2166 := !z.EncBinary()
			yy2arr2166 := z.EncBasicHandle().StructToArray
			var yyq2166 [3]bool
			_, _, _ = yysep2166, yyq2166, yy2arr2166
			const yyr2166 bool = false
			var yynn2166 int
			if yyr2166 || yy2arr2166 {
				r.EncodeArrayStart(3)
			} else {
				yynn2166 = 3
				for _, b := range yyq2166 {
					if b {
						yynn2166++
					}
				}
				r.EncodeMapStart(yynn2166)
				yynn2166 = 0
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2176 := z.DecBinary()
	_ = yym2176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2177 := r.ContainerType()
		if yyct2177 == codecSelferValueTypeMap1234 {
			yyl2177 := r.ReadMapStart()
			if yyl2177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2177, d)
			}
		} else if yyct2177 == codecSelferValueTypeArray1234 {
			yyl2177 := r.ReadArrayStart()
			if yyl2177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2178Slc
	var yyhl2178 bool = l >= 0
	for yyj2178 := 0; ; yyj2178++ {
		if yyhl2178 {
			if yyj2178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2178Slc = r.DecodeBytes(yys2178Slc, true, true)
		yys2178 := string(yys2178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2178 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2179 := &x.Addresses
				yym2180 := z.DecBinary()
				_ = yym2180
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2179), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2181 := &x.NotReadyAddresses
				yym2182 := z.DecBinary()
				_ = yym2182
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2181), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2183 := &x.Ports
				yym2184 := z.DecBinary()
				_ = yym2184
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2183), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2178)
		} // end switch yys2178
	} // end for yyj2178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2185 int
	var yyb2185 bool
	var yyhl2185 bool = l >= 0
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2186 := &x.Addresses
		yym2187 := z.DecBinary()
		_ = yym2187
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2186), d)
		}
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2188 := &x.NotReadyAddresses
		yym2189 := z.DecBinary()
		_ = yym2189
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2188), d)
		}
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2190 := &x.Ports
		yym2191 := z.DecBinary()
		_ = yym2191
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2190), d)
		}
	}
	for {
		yyj2185++
		if yyhl2185 {
			yyb2185 = yyj2185 > l
		} else {
			yyb2185 = r.CheckBreak()
		}
		if yyb2185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2192 := z.EncBinary()
		_ = yym2192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2193 := !z.EncBinary()
			yy2arr2193 := z.EncBasicHandle().StructToArray
			var yyq2193 [2]bool
			_, _, _ = yysep2193, yyq2193, yy2arr2193
			const yyr2193 bool = false
			var yynn2193 int
			if yyr2193 || yy2arr2193 {
				r.EncodeArrayStart(2)
			} else {
				yynn2193 = 2
				for _, b := range yyq2193 {
					if b {
						yynn2193++
					}
				}
				r.EncodeMapStart(yynn2193)
				yynn2193 = 0
			}
			if yyr2193 || yy2arr2193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2195 := z.EncBinary()
				_ = yym2195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2196 := z.EncBinary()
				_ = yym2196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2193 || yy2arr2193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2193 || yy2arr2193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2198 := z.DecBinary()
	_ = yym2198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2199 := r.ContainerType()
		if yyct2199 == codecSelferValueTypeMap1234 {
			yyl2199 := r.ReadMapStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2199, d)
			}
		} else if yyct2199 == codecSelferValueTypeArray1234 {
			yyl2199 := r.ReadArrayStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2200Slc
	var yyhl2200 bool = l >= 0
	for yyj2200 := 0; ; yyj2200++ {
		if yyhl2200 {
			if yyj2200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2200Slc = r.DecodeBytes(yys2200Slc, true, true)
		yys2200 := string(yys2200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2200 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2200)
		} // end switch yys2200
	} // end for yyj2200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2203 int
	var yyb2203 bool
	var yyhl2203 bool = l >= 0
	yyj2203++
	if yyhl2203 {
		yyb2203 = yyj2203 > l
	} else {
		yyb2203 = r.CheckBreak()
	}
	if yyb2203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2203++
	if yyhl2203 {
		yyb2203 = yyj2203 > l
	} else {
		yyb2203 = r.CheckBreak()
	}
	if yyb2203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2203++
		if yyhl2203 {
			yyb2203 = yyj2203 > l
		} else {
			yyb2203 = r.CheckBreak()
		}
		if yyb2203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2206 := z.EncBinary()
		_ = yym2206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2207 := !z.EncBinary()
			yy2arr2207 := z.EncBasicHandle().StructToArray
			var yyq2207 [3]bool
			_, _, _ = yysep2207, yyq2207, yy2arr2207
			const yyr2207 bool = false
			var yynn2207 int
			if yyr2207 || yy2arr2207 {
				r.EncodeArrayStart(3)
			} else {
				yynn2207 = 3
				for _, b := range yyq2207 {
					if b {
						yynn2207++
					}
				}
				r.EncodeMapStart(yynn2207)
				yynn2207 = 0
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2209 := z.EncBinary()
				_ = yym2209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2210 := z.EncBinary()
				_ = yym2210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2212 := z.EncBinary()
				_ = yym2212
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2213 := z.EncBinary()
				_ = yym2213
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2215 := z.DecBinary()
	_ = yym2215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2216 := r.ContainerType()
		if yyct2216 == codecSelferValueTypeMap1234 {
			yyl2216 := r.ReadMapStart()
			if yyl2216 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2216, d)
			}
		} else if yyct2216 == codecSelferValueTypeArray1234 {
			yyl2216 := r.ReadArrayStart()
			if yyl2216 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2217Slc
	var yyhl2217 bool = l >= 0
	for yyj2217 := 0; ; yyj2217++ {
		if yyhl2217 {
			if yyj2217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2217Slc = r.DecodeBytes(yys2217Slc, true, true)
		yys2217 := string(yys2217Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2217 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2217)
		} // end switch yys2217
	} // end for yyj2217
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2221 int
	var yyb2221 bool
	var yyhl2221 bool = l >= 0
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2221++
		if yyhl2221 {
			yyb2221 = yyj2221 > l
		} else {
			yyb2221 = r.CheckBreak()
		}
		if yyb2221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2225 := z.EncBinary()
		_ = yym2225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2226 := !z.EncBinary()
			yy2arr2226 := z.EncBasicHandle().StructToArray
			var yyq2226 [4]bool
			_, _, _ = yysep2226, yyq2226, yy2arr2226
			const yyr2226 bool = false
			yyq2226[0] = x.Kind != ""
			yyq2226[1] = x.APIVersion != ""
			yyq2226[2] = true
			var yynn2226 int
			if yyr2226 || yy2arr2226 {
				r.EncodeArrayStart(4)
			} else {
				yynn2226 = 1
				for _, b := range yyq2226 {
					if b {
						yynn2226++
					}
				}
				r.EncodeMapStart(yynn2226)
				yynn2226 = 0
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[0] {
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2226[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[1] {
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2226[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[2] {
					yy2234 := &x.ListMeta
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2234) {
					} else {
						z.EncFallback(yy2234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2226[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2236 := &x.ListMeta
					yym2237 := z.EncBinary()
					_ = yym2237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2236) {
					} else {
						z.EncFallback(yy2236)
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2240 := z.EncBinary()
					_ = yym2240
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2241 := z.DecBinary()
	_ = yym2241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2242 := r.ContainerType()
		if yyct2242 == codecSelferValueTypeMap1234 {
			yyl2242 := r.ReadMapStart()
			if yyl2242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2242, d)
			}
		} else if yyct2242 == codecSelferValueTypeArray1234 {
			yyl2242 := r.ReadArrayStart()
			if yyl2242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2243Slc
	var yyhl2243 bool = l >= 0
	for yyj2243 := 0; ; yyj2243++ {
		if yyhl2243 {
			if yyj2243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2243Slc = r.DecodeBytes(yys2243Slc, true, true)
		yys2243 := string(yys2243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2243 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2246 := &x.ListMeta
				yym2247 := z.DecBinary()
				_ = yym2247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2246) {
				} else {
					z.DecFallback(yyv2246, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2248 := &x.Items
				yym2249 := z.DecBinary()
				_ = yym2249
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2248), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2243)
		} // end switch yys2243
	} // end for yyj2243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2250 int
	var yyb2250 bool
	var yyhl2250 bool = l >= 0
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2253 := &x.ListMeta
		yym2254 := z.DecBinary()
		_ = yym2254
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2253) {
		} else {
			z.DecFallback(yyv2253, false)
		}
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2255 := &x.Items
		yym2256 := z.DecBinary()
		_ = yym2256
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2255), d)
		}
	}
	for {
		yyj2250++
		if yyhl2250 {
			yyb2250 = yyj2250 > l
		} else {
			yyb2250 = r.CheckBreak()
		}
		if yyb2250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [4]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			yyq2258[0] = x.PodCIDR != ""
			yyq2258[1] = x.ExternalID != ""
			yyq2258[2] = x.ProviderID != ""
			yyq2258[3] = x.Unschedulable != false
			var yynn2258 int
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(4)
			} else {
				yynn2258 = 0
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
				yynn2258 = 0
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[0] {
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2258[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[1] {
					yym2263 := z.EncBinary()
					_ = yym2263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2258[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2264 := z.EncBinary()
					_ = yym2264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[2] {
					yym2266 := z.EncBinary()
					_ = yym2266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2258[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2267 := z.EncBinary()
					_ = yym2267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[3] {
					yym2269 := z.EncBinary()
					_ = yym2269
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2258[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2271 := z.DecBinary()
	_ = yym2271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2272 := r.ContainerType()
		if yyct2272 == codecSelferValueTypeMap1234 {
			yyl2272 := r.ReadMapStart()
			if yyl2272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2272, d)
			}
		} else if yyct2272 == codecSelferValueTypeArray1234 {
			yyl2272 := r.ReadArrayStart()
			if yyl2272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2273Slc
	var yyhl2273 bool = l >= 0
	for yyj2273 := 0; ; yyj2273++ {
		if yyhl2273 {
			if yyj2273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2273Slc = r.DecodeBytes(yys2273Slc, true, true)
		yys2273 := string(yys2273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2273 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2273)
		} // end switch yys2273
	} // end for yyj2273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2278 int
	var yyb2278 bool
	var yyhl2278 bool = l >= 0
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2278++
		if yyhl2278 {
			yyb2278 = yyj2278 > l
		} else {
			yyb2278 = r.CheckBreak()
		}
		if yyb2278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2283 := z.EncBinary()
		_ = yym2283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2284 := !z.EncBinary()
			yy2arr2284 := z.EncBasicHandle().StructToArray
			var yyq2284 [1]bool
			_, _, _ = yysep2284, yyq2284, yy2arr2284
			const yyr2284 bool = false
			var yynn2284 int
			if yyr2284 || yy2arr2284 {
				r.EncodeArrayStart(1)
			} else {
				yynn2284 = 1
				for _, b := range yyq2284 {
					if b {
						yynn2284++
					}
				}
				r.EncodeMapStart(yynn2284)
				yynn2284 = 0
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2286 := z.EncBinary()
				_ = yym2286
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2287 := z.EncBinary()
				_ = yym2287
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2288 := z.DecBinary()
	_ = yym2288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2289 := r.ContainerType()
		if yyct2289 == codecSelferValueTypeMap1234 {
			yyl2289 := r.ReadMapStart()
			if yyl2289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2289, d)
			}
		} else if yyct2289 == codecSelferValueTypeArray1234 {
			yyl2289 := r.ReadArrayStart()
			if yyl2289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2290Slc
	var yyhl2290 bool = l >= 0
	for yyj2290 := 0; ; yyj2290++ {
		if yyhl2290 {
			if yyj2290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2290Slc = r.DecodeBytes(yys2290Slc, true, true)
		yys2290 := string(yys2290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2290 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2290)
		} // end switch yys2290
	} // end for yyj2290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2292 int
	var yyb2292 bool
	var yyhl2292 bool = l >= 0
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2292++
		if yyhl2292 {
			yyb2292 = yyj2292 > l
		} else {
			yyb2292 = r.CheckBreak()
		}
		if yyb2292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2294 := z.EncBinary()
		_ = yym2294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2295 := !z.EncBinary()
			yy2arr2295 := z.EncBasicHandle().StructToArray
			var yyq2295 [1]bool
			_, _, _ = yysep2295, yyq2295, yy2arr2295
			const yyr2295 bool = false
			yyq2295[0] = true
			var yynn2295 int
			if yyr2295 || yy2arr2295 {
				r.EncodeArrayStart(1)
			} else {
				yynn2295 = 0
				for _, b := range yyq2295 {
					if b {
						yynn2295++
					}
				}
				r.EncodeMapStart(yynn2295)
				yynn2295 = 0
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2295[0] {
					yy2297 := &x.KubeletEndpoint
					yy2297.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2298 := &x.KubeletEndpoint
					yy2298.CodecEncodeSelf(e)
				}
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2299 := z.DecBinary()
	_ = yym2299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2300 := r.ContainerType()
		if yyct2300 == codecSelferValueTypeMap1234 {
			yyl2300 := r.ReadMapStart()
			if yyl2300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2300, d)
			}
		} else if yyct2300 == codecSelferValueTypeArray1234 {
			yyl2300 := r.ReadArrayStart()
			if yyl2300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2301Slc
	var yyhl2301 bool = l >= 0
	for yyj2301 := 0; ; yyj2301++ {
		if yyhl2301 {
			if yyj2301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2301Slc = r.DecodeBytes(yys2301Slc, true, true)
		yys2301 := string(yys2301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2301 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2302 := &x.KubeletEndpoint
				yyv2302.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2301)
		} // end switch yys2301
	} // end for yyj2301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2303 int
	var yyb2303 bool
	var yyhl2303 bool = l >= 0
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2304 := &x.KubeletEndpoint
		yyv2304.CodecDecodeSelf(d)
	}
	for {
		yyj2303++
		if yyhl2303 {
			yyb2303 = yyj2303 > l
		} else {
			yyb2303 = r.CheckBreak()
		}
		if yyb2303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2305 := z.EncBinary()
		_ = yym2305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2306 := !z.EncBinary()
			yy2arr2306 := z.EncBasicHandle().StructToArray
			var yyq2306 [8]bool
			_, _, _ = yysep2306, yyq2306, yy2arr2306
			const yyr2306 bool = false
			var yynn2306 int
			if yyr2306 || yy2arr2306 {
				r.EncodeArrayStart(8)
			} else {
				yynn2306 = 8
				for _, b := range yyq2306 {
					if b {
						yynn2306++
					}
				}
				r.EncodeMapStart(yynn2306)
				yynn2306 = 0
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2308 := z.EncBinary()
				_ = yym2308
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2309 := z.EncBinary()
				_ = yym2309
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2311 := z.EncBinary()
				_ = yym2311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2312 := z.EncBinary()
				_ = yym2312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2314 := z.EncBinary()
				_ = yym2314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2315 := z.EncBinary()
				_ = yym2315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2317 := z.EncBinary()
				_ = yym2317
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2318 := z.EncBinary()
				_ = yym2318
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2320 := z.EncBinary()
				_ = yym2320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2321 := z.EncBinary()
				_ = yym2321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2323 := z.EncBinary()
				_ = yym2323
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2324 := z.EncBinary()
				_ = yym2324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2326 := z.EncBinary()
				_ = yym2326
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2327 := z.EncBinary()
				_ = yym2327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2329 := z.EncBinary()
				_ = yym2329
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2330 := z.EncBinary()
				_ = yym2330
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2331 := z.DecBinary()
	_ = yym2331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2332 := r.ContainerType()
		if yyct2332 == codecSelferValueTypeMap1234 {
			yyl2332 := r.ReadMapStart()
			if yyl2332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2332, d)
			}
		} else if yyct2332 == codecSelferValueTypeArray1234 {
			yyl2332 := r.ReadArrayStart()
			if yyl2332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2333Slc
	var yyhl2333 bool = l >= 0
	for yyj2333 := 0; ; yyj2333++ {
		if yyhl2333 {
			if yyj2333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2333Slc = r.DecodeBytes(yys2333Slc, true, true)
		yys2333 := string(yys2333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2333 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2333)
		} // end switch yys2333
	} // end for yyj2333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2342 int
	var yyb2342 bool
	var yyhl2342 bool = l >= 0
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2342++
		if yyhl2342 {
			yyb2342 = yyj2342 > l
		} else {
			yyb2342 = r.CheckBreak()
		}
		if yyb2342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2351 := z.EncBinary()
		_ = yym2351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2352 := !z.EncBinary()
			yy2arr2352 := z.EncBasicHandle().StructToArray
			var yyq2352 [8]bool
			_, _, _ = yysep2352, yyq2352, yy2arr2352
			const yyr2352 bool = false
			yyq2352[0] = len(x.Capacity) != 0
			yyq2352[1] = len(x.Allocatable) != 0
			yyq2352[2] = x.Phase != ""
			yyq2352[3] = len(x.Conditions) != 0
			yyq2352[4] = len(x.Addresses) != 0
			yyq2352[5] = true
			yyq2352[6] = true
			var yynn2352 int
			if yyr2352 || yy2arr2352 {
				r.EncodeArrayStart(8)
			} else {
				yynn2352 = 1
				for _, b := range yyq2352 {
					if b {
						yynn2352++
					}
				}
				r.EncodeMapStart(yynn2352)
				yynn2352 = 0
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2352[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2357 := z.EncBinary()
						_ = yym2357
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2358 := z.EncBinary()
						_ = yym2358
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2360 := z.EncBinary()
						_ = yym2360
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2361 := z.EncBinary()
						_ = yym2361
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[5] {
					yy2363 := &x.DaemonEndpoints
					yy2363.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2364 := &x.DaemonEndpoints
					yy2364.CodecEncodeSelf(e)
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[6] {
					yy2366 := &x.NodeInfo
					yy2366.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2367 := &x.NodeInfo
					yy2367.CodecEncodeSelf(e)
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2374 := &x.Capacity
				yyv2374.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2375 := &x.Allocatable
				yyv2375.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2377 := &x.Conditions
				yym2378 := z.DecBinary()
				_ = yym2378
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2377), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2379 := &x.Addresses
				yym2380 := z.DecBinary()
				_ = yym2380
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2379), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2381 := &x.DaemonEndpoints
				yyv2381.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2382 := &x.NodeInfo
				yyv2382.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2383 := &x.Images
				yym2384 := z.DecBinary()
				_ = yym2384
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2383), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2385 int
	var yyb2385 bool
	var yyhl2385 bool = l >= 0
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2386 := &x.Capacity
		yyv2386.CodecDecodeSelf(d)
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2387 := &x.Allocatable
		yyv2387.CodecDecodeSelf(d)
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2389 := &x.Conditions
		yym2390 := z.DecBinary()
		_ = yym2390
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2389), d)
		}
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2391 := &x.Addresses
		yym2392 := z.DecBinary()
		_ = yym2392
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2391), d)
		}
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2393 := &x.DaemonEndpoints
		yyv2393.CodecDecodeSelf(d)
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2394 := &x.NodeInfo
		yyv2394.CodecDecodeSelf(d)
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2395 := &x.Images
		yym2396 := z.DecBinary()
		_ = yym2396
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2395), d)
		}
	}
	for {
		yyj2385++
		if yyhl2385 {
			yyb2385 = yyj2385 > l
		} else {
			yyb2385 = r.CheckBreak()
		}
		if yyb2385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2397 := z.EncBinary()
		_ = yym2397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2398 := !z.EncBinary()
			yy2arr2398 := z.EncBasicHandle().StructToArray
			var yyq2398 [2]bool
			_, _, _ = yysep2398, yyq2398, yy2arr2398
			const yyr2398 bool = false
			yyq2398[1] = x.Size != 0
			var yynn2398 int
			if yyr2398 || yy2arr2398 {
				r.EncodeArrayStart(2)
			} else {
				yynn2398 = 1
				for _, b := range yyq2398 {
					if b {
						yynn2398++
					}
				}
				r.EncodeMapStart(yynn2398)
				yynn2398 = 0
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[1] {
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2398[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2405 := z.DecBinary()
	_ = yym2405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2406 := r.ContainerType()
		if yyct2406 == codecSelferValueTypeMap1234 {
			yyl2406 := r.ReadMapStart()
			if yyl2406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2406, d)
			}
		} else if yyct2406 == codecSelferValueTypeArray1234 {
			yyl2406 := r.ReadArrayStart()
			if yyl2406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2407Slc
	var yyhl2407 bool = l >= 0
	for yyj2407 := 0; ; yyj2407++ {
		if yyhl2407 {
			if yyj2407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2407Slc = r.DecodeBytes(yys2407Slc, true, true)
		yys2407 := string(yys2407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2407 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2408 := &x.RepoTags
				yym2409 := z.DecBinary()
				_ = yym2409
				if false {
				} else {
					z.F.DecSliceStringX(yyv2408, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2407)
		} // end switch yys2407
	} // end for yyj2407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2411 int
	var yyb2411 bool
	var yyhl2411 bool = l >= 0
	yyj2411++
	if yyhl2411 {
		yyb2411 = yyj2411 > l
	} else {
		yyb2411 = r.CheckBreak()
	}
	if yyb2411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2412 := &x.RepoTags
		yym2413 := z.DecBinary()
		_ = yym2413
		if false {
		} else {
			z.F.DecSliceStringX(yyv2412, false, d)
		}
	}
	yyj2411++
	if yyhl2411 {
		yyb2411 = yyj2411 > l
	} else {
		yyb2411 = r.CheckBreak()
	}
	if yyb2411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2411++
		if yyhl2411 {
			yyb2411 = yyj2411 > l
		} else {
			yyb2411 = r.CheckBreak()
		}
		if yyb2411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2415 := z.EncBinary()
	_ = yym2415
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2416 := z.DecBinary()
	_ = yym2416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2417 := z.EncBinary()
	_ = yym2417
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2418 := z.DecBinary()
	_ = yym2418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2419 := z.EncBinary()
		_ = yym2419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2420 := !z.EncBinary()
			yy2arr2420 := z.EncBasicHandle().StructToArray
			var yyq2420 [6]bool
			_, _, _ = yysep2420, yyq2420, yy2arr2420
			const yyr2420 bool = false
			yyq2420[2] = true
			yyq2420[3] = true
			yyq2420[4] = x.Reason != ""
			yyq2420[5] = x.Message != ""
			var yynn2420 int
			if yyr2420 || yy2arr2420 {
				r.EncodeArrayStart(6)
			} else {
				yynn2420 = 2
				for _, b := range yyq2420 {
					if b {
						yynn2420++
					}
				}
				r.EncodeMapStart(yynn2420)
				yynn2420 = 0
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[2] {
					yy2424 := &x.LastHeartbeatTime
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2424) {
					} else if yym2425 {
						z.EncBinaryMarshal(yy2424)
					} else if !yym2425 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2424)
					} else {
						z.EncFallback(yy2424)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2426 := &x.LastHeartbeatTime
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2426) {
					} else if yym2427 {
						z.EncBinaryMarshal(yy2426)
					} else if !yym2427 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2426)
					} else {
						z.EncFallback(yy2426)
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[3] {
					yy2429 := &x.LastTransitionTime
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2429) {
					} else if yym2430 {
						z.EncBinaryMarshal(yy2429)
					} else if !yym2430 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2429)
					} else {
						z.EncFallback(yy2429)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2431 := &x.LastTransitionTime
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2431) {
					} else if yym2432 {
						z.EncBinaryMarshal(yy2431)
					} else if !yym2432 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2431)
					} else {
						z.EncFallback(yy2431)
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[4] {
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2420[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[5] {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2420[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2439 := z.DecBinary()
	_ = yym2439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2440 := r.ContainerType()
		if yyct2440 == codecSelferValueTypeMap1234 {
			yyl2440 := r.ReadMapStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2440, d)
			}
		} else if yyct2440 == codecSelferValueTypeArray1234 {
			yyl2440 := r.ReadArrayStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2441Slc
	var yyhl2441 bool = l >= 0
	for yyj2441 := 0; ; yyj2441++ {
		if yyhl2441 {
			if yyj2441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2441Slc = r.DecodeBytes(yys2441Slc, true, true)
		yys2441 := string(yys2441Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2441 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2444 := &x.LastHeartbeatTime
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2444) {
				} else if yym2445 {
					z.DecBinaryUnmarshal(yyv2444)
				} else if !yym2445 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2444)
				} else {
					z.DecFallback(yyv2444, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2446 := &x.LastTransitionTime
				yym2447 := z.DecBinary()
				_ = yym2447
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2446) {
				} else if yym2447 {
					z.DecBinaryUnmarshal(yyv2446)
				} else if !yym2447 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2446)
				} else {
					z.DecFallback(yyv2446, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2441)
		} // end switch yys2441
	} // end for yyj2441
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2450 int
	var yyb2450 bool
	var yyhl2450 bool = l >= 0
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2453 := &x.LastHeartbeatTime
		yym2454 := z.DecBinary()
		_ = yym2454
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2453) {
		} else if yym2454 {
			z.DecBinaryUnmarshal(yyv2453)
		} else if !yym2454 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2453)
		} else {
			z.DecFallback(yyv2453, false)
		}
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2455 := &x.LastTransitionTime
		yym2456 := z.DecBinary()
		_ = yym2456
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2455) {
		} else if yym2456 {
			z.DecBinaryUnmarshal(yyv2455)
		} else if !yym2456 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2455)
		} else {
			z.DecFallback(yyv2455, false)
		}
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2450++
		if yyhl2450 {
			yyb2450 = yyj2450 > l
		} else {
			yyb2450 = r.CheckBreak()
		}
		if yyb2450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2459 := z.EncBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2460 := z.DecBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2461 := z.EncBinary()
		_ = yym2461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2462 := !z.EncBinary()
			yy2arr2462 := z.EncBasicHandle().StructToArray
			var yyq2462 [2]bool
			_, _, _ = yysep2462, yyq2462, yy2arr2462
			const yyr2462 bool = false
			var yynn2462 int
			if yyr2462 || yy2arr2462 {
				r.EncodeArrayStart(2)
			} else {
				yynn2462 = 2
				for _, b := range yyq2462 {
					if b {
						yynn2462++
					}
				}
				r.EncodeMapStart(yynn2462)
				yynn2462 = 0
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2465 := z.EncBinary()
				_ = yym2465
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2466 := z.EncBinary()
				_ = yym2466
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2467 := z.DecBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2468 := r.ContainerType()
		if yyct2468 == codecSelferValueTypeMap1234 {
			yyl2468 := r.ReadMapStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2468, d)
			}
		} else if yyct2468 == codecSelferValueTypeArray1234 {
			yyl2468 := r.ReadArrayStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2469Slc
	var yyhl2469 bool = l >= 0
	for yyj2469 := 0; ; yyj2469++ {
		if yyhl2469 {
			if yyj2469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2469Slc = r.DecodeBytes(yys2469Slc, true, true)
		yys2469 := string(yys2469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2469 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2469)
		} // end switch yys2469
	} // end for yyj2469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2472 int
	var yyb2472 bool
	var yyhl2472 bool = l >= 0
	yyj2472++
	if yyhl2472 {
		yyb2472 = yyj2472 > l
	} else {
		yyb2472 = r.CheckBreak()
	}
	if yyb2472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2472++
	if yyhl2472 {
		yyb2472 = yyj2472 > l
	} else {
		yyb2472 = r.CheckBreak()
	}
	if yyb2472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2472++
		if yyhl2472 {
			yyb2472 = yyj2472 > l
		} else {
			yyb2472 = r.CheckBreak()
		}
		if yyb2472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2475 := z.EncBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2476 := !z.EncBinary()
			yy2arr2476 := z.EncBasicHandle().StructToArray
			var yyq2476 [1]bool
			_, _, _ = yysep2476, yyq2476, yy2arr2476
			const yyr2476 bool = false
			yyq2476[0] = len(x.Capacity) != 0
			var yynn2476 int
			if yyr2476 || yy2arr2476 {
				r.EncodeArrayStart(1)
			} else {
				yynn2476 = 0
				for _, b := range yyq2476 {
					if b {
						yynn2476++
					}
				}
				r.EncodeMapStart(yynn2476)
				yynn2476 = 0
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2479 := r.ContainerType()
		if yyct2479 == codecSelferValueTypeMap1234 {
			yyl2479 := r.ReadMapStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2479, d)
			}
		} else if yyct2479 == codecSelferValueTypeArray1234 {
			yyl2479 := r.ReadArrayStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2480Slc
	var yyhl2480 bool = l >= 0
	for yyj2480 := 0; ; yyj2480++ {
		if yyhl2480 {
			if yyj2480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2480Slc = r.DecodeBytes(yys2480Slc, true, true)
		yys2480 := string(yys2480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2480 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2481 := &x.Capacity
				yyv2481.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2480)
		} // end switch yys2480
	} // end for yyj2480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2482 int
	var yyb2482 bool
	var yyhl2482 bool = l >= 0
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2483 := &x.Capacity
		yyv2483.CodecDecodeSelf(d)
	}
	for {
		yyj2482++
		if yyhl2482 {
			yyb2482 = yyj2482 > l
		} else {
			yyb2482 = r.CheckBreak()
		}
		if yyb2482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2484 := z.EncBinary()
	_ = yym2484
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2485 := z.DecBinary()
	_ = yym2485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2486 := z.EncBinary()
		_ = yym2486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2488 := z.EncBinary()
		_ = yym2488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2489 := !z.EncBinary()
			yy2arr2489 := z.EncBasicHandle().StructToArray
			var yyq2489 [5]bool
			_, _, _ = yysep2489, yyq2489, yy2arr2489
			const yyr2489 bool = false
			yyq2489[0] = x.Kind != ""
			yyq2489[1] = x.APIVersion != ""
			yyq2489[2] = true
			yyq2489[3] = true
			yyq2489[4] = true
			var yynn2489 int
			if yyr2489 || yy2arr2489 {
				r.EncodeArrayStart(5)
			} else {
				yynn2489 = 0
				for _, b := range yyq2489 {
					if b {
						yynn2489++
					}
				}
				r.EncodeMapStart(yynn2489)
				yynn2489 = 0
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[0] {
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2489[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[1] {
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2489[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[2] {
					yy2497 := &x.ObjectMeta
					yy2497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2489[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2498 := &x.ObjectMeta
					yy2498.CodecEncodeSelf(e)
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[3] {
					yy2500 := &x.Spec
					yy2500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2489[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2501 := &x.Spec
					yy2501.CodecEncodeSelf(e)
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[4] {
					yy2503 := &x.Status
					yy2503.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2489[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2504 := &x.Status
					yy2504.CodecEncodeSelf(e)
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2505 := z.DecBinary()
	_ = yym2505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2506 := r.ContainerType()
		if yyct2506 == codecSelferValueTypeMap1234 {
			yyl2506 := r.ReadMapStart()
			if yyl2506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2506, d)
			}
		} else if yyct2506 == codecSelferValueTypeArray1234 {
			yyl2506 := r.ReadArrayStart()
			if yyl2506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2507Slc
	var yyhl2507 bool = l >= 0
	for yyj2507 := 0; ; yyj2507++ {
		if yyhl2507 {
			if yyj2507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2507Slc = r.DecodeBytes(yys2507Slc, true, true)
		yys2507 := string(yys2507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2507 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2510 := &x.ObjectMeta
				yyv2510.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2511 := &x.Spec
				yyv2511.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2512 := &x.Status
				yyv2512.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2507)
		} // end switch yys2507
	} // end for yyj2507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2513 int
	var yyb2513 bool
	var yyhl2513 bool = l >= 0
	yyj2513++
	if yyhl2513 {
		yyb2513 = yyj2513 > l
	} else {
		yyb2513 = r.CheckBreak()
	}
	if yyb2513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2513++
	if yyhl2513 {
		yyb2513 = yyj2513 > l
	} else {
		yyb2513 = r.CheckBreak()
	}
	if yyb2513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2513++
	if yyhl2513 {
		yyb2513 = yyj2513 > l
	} else {
		yyb2513 = r.CheckBreak()
	}
	if yyb2513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2516 := &x.ObjectMeta
		yyv2516.CodecDecodeSelf(d)
	}
	yyj2513++
	if yyhl2513 {
		yyb2513 = yyj2513 > l
	} else {
		yyb2513 = r.CheckBreak()
	}
	if yyb2513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2517 := &x.Spec
		yyv2517.CodecDecodeSelf(d)
	}
	yyj2513++
	if yyhl2513 {
		yyb2513 = yyj2513 > l
	} else {
		yyb2513 = r.CheckBreak()
	}
	if yyb2513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2518 := &x.Status
		yyv2518.CodecDecodeSelf(d)
	}
	for {
		yyj2513++
		if yyhl2513 {
			yyb2513 = yyj2513 > l
		} else {
			yyb2513 = r.CheckBreak()
		}
		if yyb2513 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2513-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2519 := z.EncBinary()
		_ = yym2519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2520 := !z.EncBinary()
			yy2arr2520 := z.EncBasicHandle().StructToArray
			var yyq2520 [4]bool
			_, _, _ = yysep2520, yyq2520, yy2arr2520
			const yyr2520 bool = false
			yyq2520[0] = x.Kind != ""
			yyq2520[1] = x.APIVersion != ""
			yyq2520[2] = true
			var yynn2520 int
			if yyr2520 || yy2arr2520 {
				r.EncodeArrayStart(4)
			} else {
				yynn2520 = 1
				for _, b := range yyq2520 {
					if b {
						yynn2520++
					}
				}
				r.EncodeMapStart(yynn2520)
				yynn2520 = 0
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[0] {
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[1] {
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[2] {
					yy2528 := &x.ListMeta
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2528) {
					} else {
						z.EncFallback(yy2528)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2530 := &x.ListMeta
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2530) {
					} else {
						z.EncFallback(yy2530)
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2535 := z.DecBinary()
	_ = yym2535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2536 := r.ContainerType()
		if yyct2536 == codecSelferValueTypeMap1234 {
			yyl2536 := r.ReadMapStart()
			if yyl2536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2536, d)
			}
		} else if yyct2536 == codecSelferValueTypeArray1234 {
			yyl2536 := r.ReadArrayStart()
			if yyl2536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2537Slc
	var yyhl2537 bool = l >= 0
	for yyj2537 := 0; ; yyj2537++ {
		if yyhl2537 {
			if yyj2537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2537Slc = r.DecodeBytes(yys2537Slc, true, true)
		yys2537 := string(yys2537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2537 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2540 := &x.ListMeta
				yym2541 := z.DecBinary()
				_ = yym2541
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2540) {
				} else {
					z.DecFallback(yyv2540, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2542 := &x.Items
				yym2543 := z.DecBinary()
				_ = yym2543
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2542), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2537)
		} // end switch yys2537
	} // end for yyj2537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2544 int
	var yyb2544 bool
	var yyhl2544 bool = l >= 0
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2547 := &x.ListMeta
		yym2548 := z.DecBinary()
		_ = yym2548
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2547) {
		} else {
			z.DecFallback(yyv2547, false)
		}
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2549 := &x.Items
		yym2550 := z.DecBinary()
		_ = yym2550
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2549), d)
		}
	}
	for {
		yyj2544++
		if yyhl2544 {
			yyb2544 = yyj2544 > l
		} else {
			yyb2544 = r.CheckBreak()
		}
		if yyb2544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2551 := z.EncBinary()
		_ = yym2551
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2552 := !z.EncBinary()
			yy2arr2552 := z.EncBasicHandle().StructToArray
			var yyq2552 [2]bool
			_, _, _ = yysep2552, yyq2552, yy2arr2552
			const yyr2552 bool = false
			yyq2552[1] = x.Network != ""
			var yynn2552 int
			if yyr2552 || yy2arr2552 {
				r.EncodeArrayStart(2)
			} else {
				yynn2552 = 1
				for _, b := range yyq2552 {
					if b {
						yynn2552++
					}
				}
				r.EncodeMapStart(yynn2552)
				yynn2552 = 0
			}
			if yyr2552 || yy2arr2552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2552 || yy2arr2552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2552[1] {
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Network))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2552[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Network))
					}
				}
			}
			if yyr2552 || yy2arr2552 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2559 := z.DecBinary()
	_ = yym2559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2560 := r.ContainerType()
		if yyct2560 == codecSelferValueTypeMap1234 {
			yyl2560 := r.ReadMapStart()
			if yyl2560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2560, d)
			}
		} else if yyct2560 == codecSelferValueTypeArray1234 {
			yyl2560 := r.ReadArrayStart()
			if yyl2560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2561Slc
	var yyhl2561 bool = l >= 0
	for yyj2561 := 0; ; yyj2561++ {
		if yyhl2561 {
			if yyj2561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2561Slc = r.DecodeBytes(yys2561Slc, true, true)
		yys2561 := string(yys2561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2561 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2562 := &x.Finalizers
				yym2563 := z.DecBinary()
				_ = yym2563
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2562), d)
				}
			}
		case "network":
			if r.TryDecodeAsNil() {
				x.Network = ""
			} else {
				x.Network = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2561)
		} // end switch yys2561
	} // end for yyj2561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2565 int
	var yyb2565 bool
	var yyhl2565 bool = l >= 0
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2566 := &x.Finalizers
		yym2567 := z.DecBinary()
		_ = yym2567
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2566), d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Network = ""
	} else {
		x.Network = string(r.DecodeString())
	}
	for {
		yyj2565++
		if yyhl2565 {
			yyb2565 = yyj2565 > l
		} else {
			yyb2565 = r.CheckBreak()
		}
		if yyb2565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2569 := z.EncBinary()
	_ = yym2569
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2570 := z.DecBinary()
	_ = yym2570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2571 := z.EncBinary()
		_ = yym2571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2572 := !z.EncBinary()
			yy2arr2572 := z.EncBasicHandle().StructToArray
			var yyq2572 [1]bool
			_, _, _ = yysep2572, yyq2572, yy2arr2572
			const yyr2572 bool = false
			yyq2572[0] = x.Phase != ""
			var yynn2572 int
			if yyr2572 || yy2arr2572 {
				r.EncodeArrayStart(1)
			} else {
				yynn2572 = 0
				for _, b := range yyq2572 {
					if b {
						yynn2572++
					}
				}
				r.EncodeMapStart(yynn2572)
				yynn2572 = 0
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2572[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2574 := z.DecBinary()
	_ = yym2574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2575 := r.ContainerType()
		if yyct2575 == codecSelferValueTypeMap1234 {
			yyl2575 := r.ReadMapStart()
			if yyl2575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2575, d)
			}
		} else if yyct2575 == codecSelferValueTypeArray1234 {
			yyl2575 := r.ReadArrayStart()
			if yyl2575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2576Slc
	var yyhl2576 bool = l >= 0
	for yyj2576 := 0; ; yyj2576++ {
		if yyhl2576 {
			if yyj2576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2576Slc = r.DecodeBytes(yys2576Slc, true, true)
		yys2576 := string(yys2576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2576 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2576)
		} // end switch yys2576
	} // end for yyj2576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2578 int
	var yyb2578 bool
	var yyhl2578 bool = l >= 0
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2578++
		if yyhl2578 {
			yyb2578 = yyj2578 > l
		} else {
			yyb2578 = r.CheckBreak()
		}
		if yyb2578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2580 := z.EncBinary()
	_ = yym2580
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2581 := z.DecBinary()
	_ = yym2581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2582 := z.EncBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2583 := !z.EncBinary()
			yy2arr2583 := z.EncBasicHandle().StructToArray
			var yyq2583 [5]bool
			_, _, _ = yysep2583, yyq2583, yy2arr2583
			const yyr2583 bool = false
			yyq2583[0] = x.Kind != ""
			yyq2583[1] = x.APIVersion != ""
			yyq2583[2] = true
			yyq2583[3] = true
			yyq2583[4] = true
			var yynn2583 int
			if yyr2583 || yy2arr2583 {
				r.EncodeArrayStart(5)
			} else {
				yynn2583 = 0
				for _, b := range yyq2583 {
					if b {
						yynn2583++
					}
				}
				r.EncodeMapStart(yynn2583)
				yynn2583 = 0
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[0] {
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2583[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[1] {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2583[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[2] {
					yy2591 := &x.ObjectMeta
					yy2591.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2583[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2592 := &x.ObjectMeta
					yy2592.CodecEncodeSelf(e)
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[3] {
					yy2594 := &x.Spec
					yy2594.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2583[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2595 := &x.Spec
					yy2595.CodecEncodeSelf(e)
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[4] {
					yy2597 := &x.Status
					yy2597.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2583[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2598 := &x.Status
					yy2598.CodecEncodeSelf(e)
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2599 := z.DecBinary()
	_ = yym2599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2600 := r.ContainerType()
		if yyct2600 == codecSelferValueTypeMap1234 {
			yyl2600 := r.ReadMapStart()
			if yyl2600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2600, d)
			}
		} else if yyct2600 == codecSelferValueTypeArray1234 {
			yyl2600 := r.ReadArrayStart()
			if yyl2600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2601Slc
	var yyhl2601 bool = l >= 0
	for yyj2601 := 0; ; yyj2601++ {
		if yyhl2601 {
			if yyj2601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2601Slc = r.DecodeBytes(yys2601Slc, true, true)
		yys2601 := string(yys2601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2601 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2604 := &x.ObjectMeta
				yyv2604.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2605 := &x.Spec
				yyv2605.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2606 := &x.Status
				yyv2606.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2601)
		} // end switch yys2601
	} // end for yyj2601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2607 int
	var yyb2607 bool
	var yyhl2607 bool = l >= 0
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2610 := &x.ObjectMeta
		yyv2610.CodecDecodeSelf(d)
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2611 := &x.Spec
		yyv2611.CodecDecodeSelf(d)
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2612 := &x.Status
		yyv2612.CodecDecodeSelf(d)
	}
	for {
		yyj2607++
		if yyhl2607 {
			yyb2607 = yyj2607 > l
		} else {
			yyb2607 = r.CheckBreak()
		}
		if yyb2607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2613 := z.EncBinary()
		_ = yym2613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2614 := !z.EncBinary()
			yy2arr2614 := z.EncBasicHandle().StructToArray
			var yyq2614 [4]bool
			_, _, _ = yysep2614, yyq2614, yy2arr2614
			const yyr2614 bool = false
			yyq2614[0] = x.Kind != ""
			yyq2614[1] = x.APIVersion != ""
			yyq2614[2] = true
			var yynn2614 int
			if yyr2614 || yy2arr2614 {
				r.EncodeArrayStart(4)
			} else {
				yynn2614 = 1
				for _, b := range yyq2614 {
					if b {
						yynn2614++
					}
				}
				r.EncodeMapStart(yynn2614)
				yynn2614 = 0
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2614[0] {
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2614[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2614[1] {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2614[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2614[2] {
					yy2622 := &x.ListMeta
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2622) {
					} else {
						z.EncFallback(yy2622)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2614[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2624 := &x.ListMeta
					yym2625 := z.EncBinary()
					_ = yym2625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2624) {
					} else {
						z.EncFallback(yy2624)
					}
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2629 := z.DecBinary()
	_ = yym2629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2630 := r.ContainerType()
		if yyct2630 == codecSelferValueTypeMap1234 {
			yyl2630 := r.ReadMapStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2630, d)
			}
		} else if yyct2630 == codecSelferValueTypeArray1234 {
			yyl2630 := r.ReadArrayStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2631Slc
	var yyhl2631 bool = l >= 0
	for yyj2631 := 0; ; yyj2631++ {
		if yyhl2631 {
			if yyj2631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2631Slc = r.DecodeBytes(yys2631Slc, true, true)
		yys2631 := string(yys2631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2631 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2634 := &x.ListMeta
				yym2635 := z.DecBinary()
				_ = yym2635
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2634) {
				} else {
					z.DecFallback(yyv2634, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2636 := &x.Items
				yym2637 := z.DecBinary()
				_ = yym2637
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2636), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2631)
		} // end switch yys2631
	} // end for yyj2631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2638 int
	var yyb2638 bool
	var yyhl2638 bool = l >= 0
	yyj2638++
	if yyhl2638 {
		yyb2638 = yyj2638 > l
	} else {
		yyb2638 = r.CheckBreak()
	}
	if yyb2638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2638++
	if yyhl2638 {
		yyb2638 = yyj2638 > l
	} else {
		yyb2638 = r.CheckBreak()
	}
	if yyb2638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2638++
	if yyhl2638 {
		yyb2638 = yyj2638 > l
	} else {
		yyb2638 = r.CheckBreak()
	}
	if yyb2638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2641 := &x.ListMeta
		yym2642 := z.DecBinary()
		_ = yym2642
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2641) {
		} else {
			z.DecFallback(yyv2641, false)
		}
	}
	yyj2638++
	if yyhl2638 {
		yyb2638 = yyj2638 > l
	} else {
		yyb2638 = r.CheckBreak()
	}
	if yyb2638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2643 := &x.Items
		yym2644 := z.DecBinary()
		_ = yym2644
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2643), d)
		}
	}
	for {
		yyj2638++
		if yyhl2638 {
			yyb2638 = yyj2638 > l
		} else {
			yyb2638 = r.CheckBreak()
		}
		if yyb2638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2645 := z.EncBinary()
		_ = yym2645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2646 := !z.EncBinary()
			yy2arr2646 := z.EncBasicHandle().StructToArray
			var yyq2646 [1]bool
			_, _, _ = yysep2646, yyq2646, yy2arr2646
			const yyr2646 bool = false
			yyq2646[0] = x.Phase != ""
			var yynn2646 int
			if yyr2646 || yy2arr2646 {
				r.EncodeArrayStart(1)
			} else {
				yynn2646 = 0
				for _, b := range yyq2646 {
					if b {
						yynn2646++
					}
				}
				r.EncodeMapStart(yynn2646)
				yynn2646 = 0
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2648 := z.DecBinary()
	_ = yym2648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2649 := r.ContainerType()
		if yyct2649 == codecSelferValueTypeMap1234 {
			yyl2649 := r.ReadMapStart()
			if yyl2649 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2649, d)
			}
		} else if yyct2649 == codecSelferValueTypeArray1234 {
			yyl2649 := r.ReadArrayStart()
			if yyl2649 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2650Slc
	var yyhl2650 bool = l >= 0
	for yyj2650 := 0; ; yyj2650++ {
		if yyhl2650 {
			if yyj2650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2650Slc = r.DecodeBytes(yys2650Slc, true, true)
		yys2650 := string(yys2650Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2650 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NetworkPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2650)
		} // end switch yys2650
	} // end for yyj2650
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2652 int
	var yyb2652 bool
	var yyhl2652 bool = l >= 0
	yyj2652++
	if yyhl2652 {
		yyb2652 = yyj2652 > l
	} else {
		yyb2652 = r.CheckBreak()
	}
	if yyb2652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NetworkPhase(r.DecodeString())
	}
	for {
		yyj2652++
		if yyhl2652 {
			yyb2652 = yyj2652 > l
		} else {
			yyb2652 = r.CheckBreak()
		}
		if yyb2652 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2652-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NetworkPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2654 := z.EncBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NetworkPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2655 := z.DecBinary()
	_ = yym2655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Subnet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2656 := z.EncBinary()
		_ = yym2656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2657 := !z.EncBinary()
			yy2arr2657 := z.EncBasicHandle().StructToArray
			var yyq2657 [2]bool
			_, _, _ = yysep2657, yyq2657, yy2arr2657
			const yyr2657 bool = false
			var yynn2657 int
			if yyr2657 || yy2arr2657 {
				r.EncodeArrayStart(2)
			} else {
				yynn2657 = 2
				for _, b := range yyq2657 {
					if b {
						yynn2657++
					}
				}
				r.EncodeMapStart(yynn2657)
				yynn2657 = 0
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2659 := z.EncBinary()
				_ = yym2659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CIDR))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("cidr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2660 := z.EncBinary()
				_ = yym2660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CIDR))
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2662 := z.EncBinary()
				_ = yym2662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Gateway))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gateway"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2663 := z.EncBinary()
				_ = yym2663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Gateway))
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Subnet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2664 := z.DecBinary()
	_ = yym2664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2665 := r.ContainerType()
		if yyct2665 == codecSelferValueTypeMap1234 {
			yyl2665 := r.ReadMapStart()
			if yyl2665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2665, d)
			}
		} else if yyct2665 == codecSelferValueTypeArray1234 {
			yyl2665 := r.ReadArrayStart()
			if yyl2665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Subnet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2666Slc
	var yyhl2666 bool = l >= 0
	for yyj2666 := 0; ; yyj2666++ {
		if yyhl2666 {
			if yyj2666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2666Slc = r.DecodeBytes(yys2666Slc, true, true)
		yys2666 := string(yys2666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2666 {
		case "cidr":
			if r.TryDecodeAsNil() {
				x.CIDR = ""
			} else {
				x.CIDR = string(r.DecodeString())
			}
		case "gateway":
			if r.TryDecodeAsNil() {
				x.Gateway = ""
			} else {
				x.Gateway = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2666)
		} // end switch yys2666
	} // end for yyj2666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Subnet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2669 int
	var yyb2669 bool
	var yyhl2669 bool = l >= 0
	yyj2669++
	if yyhl2669 {
		yyb2669 = yyj2669 > l
	} else {
		yyb2669 = r.CheckBreak()
	}
	if yyb2669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CIDR = ""
	} else {
		x.CIDR = string(r.DecodeString())
	}
	yyj2669++
	if yyhl2669 {
		yyb2669 = yyj2669 > l
	} else {
		yyb2669 = r.CheckBreak()
	}
	if yyb2669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Gateway = ""
	} else {
		x.Gateway = string(r.DecodeString())
	}
	for {
		yyj2669++
		if yyhl2669 {
			yyb2669 = yyj2669 > l
		} else {
			yyb2669 = r.CheckBreak()
		}
		if yyb2669 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2669-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2672 := z.EncBinary()
		_ = yym2672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2673 := !z.EncBinary()
			yy2arr2673 := z.EncBasicHandle().StructToArray
			var yyq2673 [3]bool
			_, _, _ = yysep2673, yyq2673, yy2arr2673
			const yyr2673 bool = false
			yyq2673[0] = len(x.Subnets) != 0
			yyq2673[1] = x.ProviderNetworkID != ""
			var yynn2673 int
			if yyr2673 || yy2arr2673 {
				r.EncodeArrayStart(3)
			} else {
				yynn2673 = 1
				for _, b := range yyq2673 {
					if b {
						yynn2673++
					}
				}
				r.EncodeMapStart(yynn2673)
				yynn2673 = 0
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2673[0] {
					if x.Subnets == nil {
						r.EncodeNil()
					} else {
						yym2675 := z.EncBinary()
						_ = yym2675
						if false {
						} else {
							h.encMapstringSubnet((map[string]Subnet)(x.Subnets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2673[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subnets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Subnets == nil {
						r.EncodeNil()
					} else {
						yym2676 := z.EncBinary()
						_ = yym2676
						if false {
						} else {
							h.encMapstringSubnet((map[string]Subnet)(x.Subnets), e)
						}
					}
				}
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2673[1] {
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderNetworkID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2673[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerNetworkID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderNetworkID))
					}
				}
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2681 := z.EncBinary()
				_ = yym2681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TenantID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("tenantID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2682 := z.EncBinary()
				_ = yym2682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TenantID))
				}
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2684 := r.ContainerType()
		if yyct2684 == codecSelferValueTypeMap1234 {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if yyct2684 == codecSelferValueTypeArray1234 {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2685 {
		case "subnets":
			if r.TryDecodeAsNil() {
				x.Subnets = nil
			} else {
				yyv2686 := &x.Subnets
				yym2687 := z.DecBinary()
				_ = yym2687
				if false {
				} else {
					h.decMapstringSubnet((*map[string]Subnet)(yyv2686), d)
				}
			}
		case "providerNetworkID":
			if r.TryDecodeAsNil() {
				x.ProviderNetworkID = ""
			} else {
				x.ProviderNetworkID = string(r.DecodeString())
			}
		case "tenantID":
			if r.TryDecodeAsNil() {
				x.TenantID = ""
			} else {
				x.TenantID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2690 int
	var yyb2690 bool
	var yyhl2690 bool = l >= 0
	yyj2690++
	if yyhl2690 {
		yyb2690 = yyj2690 > l
	} else {
		yyb2690 = r.CheckBreak()
	}
	if yyb2690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subnets = nil
	} else {
		yyv2691 := &x.Subnets
		yym2692 := z.DecBinary()
		_ = yym2692
		if false {
		} else {
			h.decMapstringSubnet((*map[string]Subnet)(yyv2691), d)
		}
	}
	yyj2690++
	if yyhl2690 {
		yyb2690 = yyj2690 > l
	} else {
		yyb2690 = r.CheckBreak()
	}
	if yyb2690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderNetworkID = ""
	} else {
		x.ProviderNetworkID = string(r.DecodeString())
	}
	yyj2690++
	if yyhl2690 {
		yyb2690 = yyj2690 > l
	} else {
		yyb2690 = r.CheckBreak()
	}
	if yyb2690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TenantID = ""
	} else {
		x.TenantID = string(r.DecodeString())
	}
	for {
		yyj2690++
		if yyhl2690 {
			yyb2690 = yyj2690 > l
		} else {
			yyb2690 = r.CheckBreak()
		}
		if yyb2690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Network) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2695 := z.EncBinary()
		_ = yym2695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2696 := !z.EncBinary()
			yy2arr2696 := z.EncBasicHandle().StructToArray
			var yyq2696 [5]bool
			_, _, _ = yysep2696, yyq2696, yy2arr2696
			const yyr2696 bool = false
			yyq2696[0] = x.Kind != ""
			yyq2696[1] = x.APIVersion != ""
			yyq2696[2] = true
			yyq2696[3] = true
			yyq2696[4] = true
			var yynn2696 int
			if yyr2696 || yy2arr2696 {
				r.EncodeArrayStart(5)
			} else {
				yynn2696 = 0
				for _, b := range yyq2696 {
					if b {
						yynn2696++
					}
				}
				r.EncodeMapStart(yynn2696)
				yynn2696 = 0
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[0] {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2696[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[1] {
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2696[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[2] {
					yy2704 := &x.ObjectMeta
					yy2704.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2705 := &x.ObjectMeta
					yy2705.CodecEncodeSelf(e)
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[3] {
					yy2707 := &x.Spec
					yy2707.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2708 := &x.Spec
					yy2708.CodecEncodeSelf(e)
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[4] {
					yy2710 := &x.Status
					yy2710.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2711 := &x.Status
					yy2711.CodecEncodeSelf(e)
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Network) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2712 := z.DecBinary()
	_ = yym2712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2713 := r.ContainerType()
		if yyct2713 == codecSelferValueTypeMap1234 {
			yyl2713 := r.ReadMapStart()
			if yyl2713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2713, d)
			}
		} else if yyct2713 == codecSelferValueTypeArray1234 {
			yyl2713 := r.ReadArrayStart()
			if yyl2713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Network) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2714Slc
	var yyhl2714 bool = l >= 0
	for yyj2714 := 0; ; yyj2714++ {
		if yyhl2714 {
			if yyj2714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2714Slc = r.DecodeBytes(yys2714Slc, true, true)
		yys2714 := string(yys2714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2714 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2717 := &x.ObjectMeta
				yyv2717.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkSpec{}
			} else {
				yyv2718 := &x.Spec
				yyv2718.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NetworkStatus{}
			} else {
				yyv2719 := &x.Status
				yyv2719.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2714)
		} // end switch yys2714
	} // end for yyj2714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Network) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2720 int
	var yyb2720 bool
	var yyhl2720 bool = l >= 0
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2723 := &x.ObjectMeta
		yyv2723.CodecDecodeSelf(d)
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkSpec{}
	} else {
		yyv2724 := &x.Spec
		yyv2724.CodecDecodeSelf(d)
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NetworkStatus{}
	} else {
		yyv2725 := &x.Status
		yyv2725.CodecDecodeSelf(d)
	}
	for {
		yyj2720++
		if yyhl2720 {
			yyb2720 = yyj2720 > l
		} else {
			yyb2720 = r.CheckBreak()
		}
		if yyb2720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2726 := z.EncBinary()
		_ = yym2726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2727 := !z.EncBinary()
			yy2arr2727 := z.EncBasicHandle().StructToArray
			var yyq2727 [4]bool
			_, _, _ = yysep2727, yyq2727, yy2arr2727
			const yyr2727 bool = false
			yyq2727[0] = x.Kind != ""
			yyq2727[1] = x.APIVersion != ""
			yyq2727[2] = true
			var yynn2727 int
			if yyr2727 || yy2arr2727 {
				r.EncodeArrayStart(4)
			} else {
				yynn2727 = 1
				for _, b := range yyq2727 {
					if b {
						yynn2727++
					}
				}
				r.EncodeMapStart(yynn2727)
				yynn2727 = 0
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[0] {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[1] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[2] {
					yy2735 := &x.ListMeta
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2735) {
					} else {
						z.EncFallback(yy2735)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2727[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2737 := &x.ListMeta
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2737) {
					} else {
						z.EncFallback(yy2737)
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						h.encSliceNetwork(([]Network)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						h.encSliceNetwork(([]Network)(x.Items), e)
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2742 := z.DecBinary()
	_ = yym2742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2743 := r.ContainerType()
		if yyct2743 == codecSelferValueTypeMap1234 {
			yyl2743 := r.ReadMapStart()
			if yyl2743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2743, d)
			}
		} else if yyct2743 == codecSelferValueTypeArray1234 {
			yyl2743 := r.ReadArrayStart()
			if yyl2743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2744Slc
	var yyhl2744 bool = l >= 0
	for yyj2744 := 0; ; yyj2744++ {
		if yyhl2744 {
			if yyj2744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2744Slc = r.DecodeBytes(yys2744Slc, true, true)
		yys2744 := string(yys2744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2744 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2747 := &x.ListMeta
				yym2748 := z.DecBinary()
				_ = yym2748
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2747) {
				} else {
					z.DecFallback(yyv2747, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2749 := &x.Items
				yym2750 := z.DecBinary()
				_ = yym2750
				if false {
				} else {
					h.decSliceNetwork((*[]Network)(yyv2749), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2744)
		} // end switch yys2744
	} // end for yyj2744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2751 int
	var yyb2751 bool
	var yyhl2751 bool = l >= 0
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2754 := &x.ListMeta
		yym2755 := z.DecBinary()
		_ = yym2755
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2754) {
		} else {
			z.DecFallback(yyv2754, false)
		}
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2756 := &x.Items
		yym2757 := z.DecBinary()
		_ = yym2757
		if false {
		} else {
			h.decSliceNetwork((*[]Network)(yyv2756), d)
		}
	}
	for {
		yyj2751++
		if yyhl2751 {
			yyb2751 = yyj2751 > l
		} else {
			yyb2751 = r.CheckBreak()
		}
		if yyb2751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2758 := z.EncBinary()
		_ = yym2758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2759 := !z.EncBinary()
			yy2arr2759 := z.EncBasicHandle().StructToArray
			var yyq2759 [4]bool
			_, _, _ = yysep2759, yyq2759, yy2arr2759
			const yyr2759 bool = false
			yyq2759[0] = x.Kind != ""
			yyq2759[1] = x.APIVersion != ""
			yyq2759[2] = true
			var yynn2759 int
			if yyr2759 || yy2arr2759 {
				r.EncodeArrayStart(4)
			} else {
				yynn2759 = 1
				for _, b := range yyq2759 {
					if b {
						yynn2759++
					}
				}
				r.EncodeMapStart(yynn2759)
				yynn2759 = 0
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[0] {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2759[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[1] {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[2] {
					yy2767 := &x.ObjectMeta
					yy2767.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2768 := &x.ObjectMeta
					yy2768.CodecEncodeSelf(e)
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2770 := &x.Target
				yy2770.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2771 := &x.Target
				yy2771.CodecEncodeSelf(e)
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2772 := z.DecBinary()
	_ = yym2772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2773 := r.ContainerType()
		if yyct2773 == codecSelferValueTypeMap1234 {
			yyl2773 := r.ReadMapStart()
			if yyl2773 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2773, d)
			}
		} else if yyct2773 == codecSelferValueTypeArray1234 {
			yyl2773 := r.ReadArrayStart()
			if yyl2773 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2774Slc
	var yyhl2774 bool = l >= 0
	for yyj2774 := 0; ; yyj2774++ {
		if yyhl2774 {
			if yyj2774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2774Slc = r.DecodeBytes(yys2774Slc, true, true)
		yys2774 := string(yys2774Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2774 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2777 := &x.ObjectMeta
				yyv2777.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2778 := &x.Target
				yyv2778.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2774)
		} // end switch yys2774
	} // end for yyj2774
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2779 int
	var yyb2779 bool
	var yyhl2779 bool = l >= 0
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2782 := &x.ObjectMeta
		yyv2782.CodecDecodeSelf(d)
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2783 := &x.Target
		yyv2783.CodecDecodeSelf(d)
	}
	for {
		yyj2779++
		if yyhl2779 {
			yyb2779 = yyj2779 > l
		} else {
			yyb2779 = r.CheckBreak()
		}
		if yyb2779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2784 := z.EncBinary()
		_ = yym2784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2785 := !z.EncBinary()
			yy2arr2785 := z.EncBasicHandle().StructToArray
			var yyq2785 [3]bool
			_, _, _ = yysep2785, yyq2785, yy2arr2785
			const yyr2785 bool = false
			yyq2785[0] = x.Kind != ""
			yyq2785[1] = x.APIVersion != ""
			var yynn2785 int
			if yyr2785 || yy2arr2785 {
				r.EncodeArrayStart(3)
			} else {
				yynn2785 = 1
				for _, b := range yyq2785 {
					if b {
						yynn2785++
					}
				}
				r.EncodeMapStart(yynn2785)
				yynn2785 = 0
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2785[0] {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2785[1] {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2793 := *x.GracePeriodSeconds
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeInt(int64(yy2793))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2795 := *x.GracePeriodSeconds
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeInt(int64(yy2795))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2797 := z.DecBinary()
	_ = yym2797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2798 := r.ContainerType()
		if yyct2798 == codecSelferValueTypeMap1234 {
			yyl2798 := r.ReadMapStart()
			if yyl2798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2798, d)
			}
		} else if yyct2798 == codecSelferValueTypeArray1234 {
			yyl2798 := r.ReadArrayStart()
			if yyl2798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2799Slc
	var yyhl2799 bool = l >= 0
	for yyj2799 := 0; ; yyj2799++ {
		if yyhl2799 {
			if yyj2799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2799Slc = r.DecodeBytes(yys2799Slc, true, true)
		yys2799 := string(yys2799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2799 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2803 := z.DecBinary()
				_ = yym2803
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2799)
		} // end switch yys2799
	} // end for yyj2799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2804 int
	var yyb2804 bool
	var yyhl2804 bool = l >= 0
	yyj2804++
	if yyhl2804 {
		yyb2804 = yyj2804 > l
	} else {
		yyb2804 = r.CheckBreak()
	}
	if yyb2804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2804++
	if yyhl2804 {
		yyb2804 = yyj2804 > l
	} else {
		yyb2804 = r.CheckBreak()
	}
	if yyb2804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2804++
	if yyhl2804 {
		yyb2804 = yyj2804 > l
	} else {
		yyb2804 = r.CheckBreak()
	}
	if yyb2804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2808 := z.DecBinary()
		_ = yym2808
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2804++
		if yyhl2804 {
			yyb2804 = yyj2804 > l
		} else {
			yyb2804 = r.CheckBreak()
		}
		if yyb2804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2809 := z.EncBinary()
		_ = yym2809
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2810 := !z.EncBinary()
			yy2arr2810 := z.EncBasicHandle().StructToArray
			var yyq2810 [4]bool
			_, _, _ = yysep2810, yyq2810, yy2arr2810
			const yyr2810 bool = false
			yyq2810[0] = x.Kind != ""
			yyq2810[1] = x.APIVersion != ""
			var yynn2810 int
			if yyr2810 || yy2arr2810 {
				r.EncodeArrayStart(4)
			} else {
				yynn2810 = 2
				for _, b := range yyq2810 {
					if b {
						yynn2810++
					}
				}
				r.EncodeMapStart(yynn2810)
				yynn2810 = 0
			}
			if yyr2810 || yy2arr2810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2810[0] {
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2810[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2810 || yy2arr2810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2810[1] {
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2810[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2810 || yy2arr2810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2819 := z.EncBinary()
				_ = yym2819
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2810 || yy2arr2810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2821 := z.EncBinary()
				_ = yym2821
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2822 := z.EncBinary()
				_ = yym2822
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2810 || yy2arr2810 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2823 := z.DecBinary()
	_ = yym2823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2824 := r.ContainerType()
		if yyct2824 == codecSelferValueTypeMap1234 {
			yyl2824 := r.ReadMapStart()
			if yyl2824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2824, d)
			}
		} else if yyct2824 == codecSelferValueTypeArray1234 {
			yyl2824 := r.ReadArrayStart()
			if yyl2824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2825Slc
	var yyhl2825 bool = l >= 0
	for yyj2825 := 0; ; yyj2825++ {
		if yyhl2825 {
			if yyj2825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2825Slc = r.DecodeBytes(yys2825Slc, true, true)
		yys2825 := string(yys2825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2825)
		} // end switch yys2825
	} // end for yyj2825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2830 int
	var yyb2830 bool
	var yyhl2830 bool = l >= 0
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj2830++
		if yyhl2830 {
			yyb2830 = yyj2830 > l
		} else {
			yyb2830 = r.CheckBreak()
		}
		if yyb2830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2835 := z.EncBinary()
		_ = yym2835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2836 := !z.EncBinary()
			yy2arr2836 := z.EncBasicHandle().StructToArray
			var yyq2836 [7]bool
			_, _, _ = yysep2836, yyq2836, yy2arr2836
			const yyr2836 bool = false
			yyq2836[0] = x.Kind != ""
			yyq2836[1] = x.APIVersion != ""
			var yynn2836 int
			if yyr2836 || yy2arr2836 {
				r.EncodeArrayStart(7)
			} else {
				yynn2836 = 5
				for _, b := range yyq2836 {
					if b {
						yynn2836++
					}
				}
				r.EncodeMapStart(yynn2836)
				yynn2836 = 0
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2836[0] {
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2836[1] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2836[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2850 := z.EncBinary()
				_ = yym2850
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2851 := z.EncBinary()
				_ = yym2851
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2853 := z.EncBinary()
				_ = yym2853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2854 := z.EncBinary()
				_ = yym2854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2856 := *x.TimeoutSeconds
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeInt(int64(yy2856))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2858 := *x.TimeoutSeconds
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeInt(int64(yy2858))
					}
				}
			}
			if yyr2836 || yy2arr2836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2860 := z.DecBinary()
	_ = yym2860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2861 := r.ContainerType()
		if yyct2861 == codecSelferValueTypeMap1234 {
			yyl2861 := r.ReadMapStart()
			if yyl2861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2861, d)
			}
		} else if yyct2861 == codecSelferValueTypeArray1234 {
			yyl2861 := r.ReadArrayStart()
			if yyl2861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2862Slc
	var yyhl2862 bool = l >= 0
	for yyj2862 := 0; ; yyj2862++ {
		if yyhl2862 {
			if yyj2862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2862Slc = r.DecodeBytes(yys2862Slc, true, true)
		yys2862 := string(yys2862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2862 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2865 := &x.LabelSelector
				yym2866 := z.DecBinary()
				_ = yym2866
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2865) {
				} else {
					z.DecFallback(yyv2865, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2867 := &x.FieldSelector
				yym2868 := z.DecBinary()
				_ = yym2868
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2867) {
				} else {
					z.DecFallback(yyv2867, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2872 := z.DecBinary()
				_ = yym2872
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2862)
		} // end switch yys2862
	} // end for yyj2862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2873 int
	var yyb2873 bool
	var yyhl2873 bool = l >= 0
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2876 := &x.LabelSelector
		yym2877 := z.DecBinary()
		_ = yym2877
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2876) {
		} else {
			z.DecFallback(yyv2876, true)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2878 := &x.FieldSelector
		yym2879 := z.DecBinary()
		_ = yym2879
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2878) {
		} else {
			z.DecFallback(yyv2878, true)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2883 := z.DecBinary()
		_ = yym2883
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2873++
		if yyhl2873 {
			yyb2873 = yyj2873 > l
		} else {
			yyb2873 = r.CheckBreak()
		}
		if yyb2873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2884 := z.EncBinary()
		_ = yym2884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2885 := !z.EncBinary()
			yy2arr2885 := z.EncBasicHandle().StructToArray
			var yyq2885 [10]bool
			_, _, _ = yysep2885, yyq2885, yy2arr2885
			const yyr2885 bool = false
			yyq2885[0] = x.Kind != ""
			yyq2885[1] = x.APIVersion != ""
			var yynn2885 int
			if yyr2885 || yy2arr2885 {
				r.EncodeArrayStart(10)
			} else {
				yynn2885 = 8
				for _, b := range yyq2885 {
					if b {
						yynn2885++
					}
				}
				r.EncodeMapStart(yynn2885)
				yynn2885 = 0
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[0] {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[1] {
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2893 := z.EncBinary()
				_ = yym2893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2894 := z.EncBinary()
				_ = yym2894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2896 := z.EncBinary()
				_ = yym2896
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2897 := z.EncBinary()
				_ = yym2897
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2899 := z.EncBinary()
				_ = yym2899
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2900 := z.EncBinary()
				_ = yym2900
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2902 := *x.SinceSeconds
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeInt(int64(yy2902))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2904 := *x.SinceSeconds
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeInt(int64(yy2904))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2907 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2907 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2908 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2908 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2910 := z.EncBinary()
				_ = yym2910
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2911 := z.EncBinary()
				_ = yym2911
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2913 := *x.TailLines
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeInt(int64(yy2913))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2915 := *x.TailLines
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeInt(int64(yy2915))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2918 := *x.LimitBytes
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else {
						r.EncodeInt(int64(yy2918))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2920 := *x.LimitBytes
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeInt(int64(yy2920))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2922 := z.DecBinary()
	_ = yym2922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2923 := r.ContainerType()
		if yyct2923 == codecSelferValueTypeMap1234 {
			yyl2923 := r.ReadMapStart()
			if yyl2923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2923, d)
			}
		} else if yyct2923 == codecSelferValueTypeArray1234 {
			yyl2923 := r.ReadArrayStart()
			if yyl2923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2924Slc
	var yyhl2924 bool = l >= 0
	for yyj2924 := 0; ; yyj2924++ {
		if yyhl2924 {
			if yyj2924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2924Slc = r.DecodeBytes(yys2924Slc, true, true)
		yys2924 := string(yys2924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2924 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2931 := z.DecBinary()
				_ = yym2931
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2933 := z.DecBinary()
				_ = yym2933
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2933 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2933 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2936 := z.DecBinary()
				_ = yym2936
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2938 := z.DecBinary()
				_ = yym2938
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2924)
		} // end switch yys2924
	} // end for yyj2924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2939 int
	var yyb2939 bool
	var yyhl2939 bool = l >= 0
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2946 := z.DecBinary()
		_ = yym2946
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2948 := z.DecBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2948 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2948 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2951 := z.DecBinary()
		_ = yym2951
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2953 := z.DecBinary()
		_ = yym2953
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2939++
		if yyhl2939 {
			yyb2939 = yyj2939 > l
		} else {
			yyb2939 = r.CheckBreak()
		}
		if yyb2939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2954 := z.EncBinary()
		_ = yym2954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2955 := !z.EncBinary()
			yy2arr2955 := z.EncBasicHandle().StructToArray
			var yyq2955 [7]bool
			_, _, _ = yysep2955, yyq2955, yy2arr2955
			const yyr2955 bool = false
			yyq2955[0] = x.Kind != ""
			yyq2955[1] = x.APIVersion != ""
			yyq2955[2] = x.Stdin != false
			yyq2955[3] = x.Stdout != false
			yyq2955[4] = x.Stderr != false
			yyq2955[5] = x.TTY != false
			yyq2955[6] = x.Container != ""
			var yynn2955 int
			if yyr2955 || yy2arr2955 {
				r.EncodeArrayStart(7)
			} else {
				yynn2955 = 0
				for _, b := range yyq2955 {
					if b {
						yynn2955++
					}
				}
				r.EncodeMapStart(yynn2955)
				yynn2955 = 0
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[0] {
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2955[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[1] {
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2955[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[2] {
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2955[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[3] {
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2955[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[4] {
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2955[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[5] {
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2955[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[6] {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2955[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2977 := z.DecBinary()
	_ = yym2977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2978 := r.ContainerType()
		if yyct2978 == codecSelferValueTypeMap1234 {
			yyl2978 := r.ReadMapStart()
			if yyl2978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2978, d)
			}
		} else if yyct2978 == codecSelferValueTypeArray1234 {
			yyl2978 := r.ReadArrayStart()
			if yyl2978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2979Slc
	var yyhl2979 bool = l >= 0
	for yyj2979 := 0; ; yyj2979++ {
		if yyhl2979 {
			if yyj2979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2979Slc = r.DecodeBytes(yys2979Slc, true, true)
		yys2979 := string(yys2979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2979 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2979)
		} // end switch yys2979
	} // end for yyj2979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2987 int
	var yyb2987 bool
	var yyhl2987 bool = l >= 0
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2987++
		if yyhl2987 {
			yyb2987 = yyj2987 > l
		} else {
			yyb2987 = r.CheckBreak()
		}
		if yyb2987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2995 := z.EncBinary()
		_ = yym2995
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2996 := !z.EncBinary()
			yy2arr2996 := z.EncBasicHandle().StructToArray
			var yyq2996 [8]bool
			_, _, _ = yysep2996, yyq2996, yy2arr2996
			const yyr2996 bool = false
			yyq2996[0] = x.Kind != ""
			yyq2996[1] = x.APIVersion != ""
			var yynn2996 int
			if yyr2996 || yy2arr2996 {
				r.EncodeArrayStart(8)
			} else {
				yynn2996 = 6
				for _, b := range yyq2996 {
					if b {
						yynn2996++
					}
				}
				r.EncodeMapStart(yynn2996)
				yynn2996 = 0
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2996[0] {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2996[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2996[1] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2996[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3004 := z.EncBinary()
				_ = yym3004
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3005 := z.EncBinary()
				_ = yym3005
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3007 := z.EncBinary()
				_ = yym3007
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3008 := z.EncBinary()
				_ = yym3008
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3010 := z.EncBinary()
				_ = yym3010
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3011 := z.EncBinary()
				_ = yym3011
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3014 := z.EncBinary()
				_ = yym3014
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3017 := z.EncBinary()
				_ = yym3017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3021 := z.DecBinary()
	_ = yym3021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3022 := r.ContainerType()
		if yyct3022 == codecSelferValueTypeMap1234 {
			yyl3022 := r.ReadMapStart()
			if yyl3022 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3022, d)
			}
		} else if yyct3022 == codecSelferValueTypeArray1234 {
			yyl3022 := r.ReadArrayStart()
			if yyl3022 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3023Slc
	var yyhl3023 bool = l >= 0
	for yyj3023 := 0; ; yyj3023++ {
		if yyhl3023 {
			if yyj3023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3023Slc = r.DecodeBytes(yys3023Slc, true, true)
		yys3023 := string(yys3023Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3023 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3031 := &x.Command
				yym3032 := z.DecBinary()
				_ = yym3032
				if false {
				} else {
					z.F.DecSliceStringX(yyv3031, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3023)
		} // end switch yys3023
	} // end for yyj3023
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3033 int
	var yyb3033 bool
	var yyhl3033 bool = l >= 0
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3041 := &x.Command
		yym3042 := z.DecBinary()
		_ = yym3042
		if false {
		} else {
			z.F.DecSliceStringX(yyv3041, false, d)
		}
	}
	for {
		yyj3033++
		if yyhl3033 {
			yyb3033 = yyj3033 > l
		} else {
			yyb3033 = r.CheckBreak()
		}
		if yyb3033 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3033-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3043 := z.EncBinary()
		_ = yym3043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3044 := !z.EncBinary()
			yy2arr3044 := z.EncBasicHandle().StructToArray
			var yyq3044 [3]bool
			_, _, _ = yysep3044, yyq3044, yy2arr3044
			const yyr3044 bool = false
			yyq3044[0] = x.Kind != ""
			yyq3044[1] = x.APIVersion != ""
			var yynn3044 int
			if yyr3044 || yy2arr3044 {
				r.EncodeArrayStart(3)
			} else {
				yynn3044 = 1
				for _, b := range yyq3044 {
					if b {
						yynn3044++
					}
				}
				r.EncodeMapStart(yynn3044)
				yynn3044 = 0
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[0] {
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3044[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[1] {
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3044[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3052 := z.EncBinary()
				_ = yym3052
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3053 := z.EncBinary()
				_ = yym3053
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3054 := z.DecBinary()
	_ = yym3054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3055 := r.ContainerType()
		if yyct3055 == codecSelferValueTypeMap1234 {
			yyl3055 := r.ReadMapStart()
			if yyl3055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3055, d)
			}
		} else if yyct3055 == codecSelferValueTypeArray1234 {
			yyl3055 := r.ReadArrayStart()
			if yyl3055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3056Slc
	var yyhl3056 bool = l >= 0
	for yyj3056 := 0; ; yyj3056++ {
		if yyhl3056 {
			if yyj3056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3056Slc = r.DecodeBytes(yys3056Slc, true, true)
		yys3056 := string(yys3056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3056 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3056)
		} // end switch yys3056
	} // end for yyj3056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3060 int
	var yyb3060 bool
	var yyhl3060 bool = l >= 0
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3060++
		if yyhl3060 {
			yyb3060 = yyj3060 > l
		} else {
			yyb3060 = r.CheckBreak()
		}
		if yyb3060 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3060-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3064 := z.EncBinary()
		_ = yym3064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3065 := !z.EncBinary()
			yy2arr3065 := z.EncBasicHandle().StructToArray
			var yyq3065 [7]bool
			_, _, _ = yysep3065, yyq3065, yy2arr3065
			const yyr3065 bool = false
			yyq3065[0] = x.Kind != ""
			yyq3065[1] = x.Namespace != ""
			yyq3065[2] = x.Name != ""
			yyq3065[3] = x.UID != ""
			yyq3065[4] = x.APIVersion != ""
			yyq3065[5] = x.ResourceVersion != ""
			yyq3065[6] = x.FieldPath != ""
			var yynn3065 int
			if yyr3065 || yy2arr3065 {
				r.EncodeArrayStart(7)
			} else {
				yynn3065 = 0
				for _, b := range yyq3065 {
					if b {
						yynn3065++
					}
				}
				r.EncodeMapStart(yynn3065)
				yynn3065 = 0
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[0] {
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[1] {
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[2] {
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[3] {
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[4] {
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[5] {
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[6] {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3087 := z.DecBinary()
	_ = yym3087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3088 := r.ContainerType()
		if yyct3088 == codecSelferValueTypeMap1234 {
			yyl3088 := r.ReadMapStart()
			if yyl3088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3088, d)
			}
		} else if yyct3088 == codecSelferValueTypeArray1234 {
			yyl3088 := r.ReadArrayStart()
			if yyl3088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3089Slc
	var yyhl3089 bool = l >= 0
	for yyj3089 := 0; ; yyj3089++ {
		if yyhl3089 {
			if yyj3089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3089Slc = r.DecodeBytes(yys3089Slc, true, true)
		yys3089 := string(yys3089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3089 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3089)
		} // end switch yys3089
	} // end for yyj3089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3097 int
	var yyb3097 bool
	var yyhl3097 bool = l >= 0
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3097++
		if yyhl3097 {
			yyb3097 = yyj3097 > l
		} else {
			yyb3097 = r.CheckBreak()
		}
		if yyb3097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3105 := z.EncBinary()
		_ = yym3105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3106 := !z.EncBinary()
			yy2arr3106 := z.EncBasicHandle().StructToArray
			var yyq3106 [1]bool
			_, _, _ = yysep3106, yyq3106, yy2arr3106
			const yyr3106 bool = false
			var yynn3106 int
			if yyr3106 || yy2arr3106 {
				r.EncodeArrayStart(1)
			} else {
				yynn3106 = 1
				for _, b := range yyq3106 {
					if b {
						yynn3106++
					}
				}
				r.EncodeMapStart(yynn3106)
				yynn3106 = 0
			}
			if yyr3106 || yy2arr3106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3108 := z.EncBinary()
				_ = yym3108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3109 := z.EncBinary()
				_ = yym3109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3106 || yy2arr3106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3110 := z.DecBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3111 := r.ContainerType()
		if yyct3111 == codecSelferValueTypeMap1234 {
			yyl3111 := r.ReadMapStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3111, d)
			}
		} else if yyct3111 == codecSelferValueTypeArray1234 {
			yyl3111 := r.ReadArrayStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3112Slc
	var yyhl3112 bool = l >= 0
	for yyj3112 := 0; ; yyj3112++ {
		if yyhl3112 {
			if yyj3112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3112Slc = r.DecodeBytes(yys3112Slc, true, true)
		yys3112 := string(yys3112Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3112 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3112)
		} // end switch yys3112
	} // end for yyj3112
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3114 int
	var yyb3114 bool
	var yyhl3114 bool = l >= 0
	yyj3114++
	if yyhl3114 {
		yyb3114 = yyj3114 > l
	} else {
		yyb3114 = r.CheckBreak()
	}
	if yyb3114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3114++
		if yyhl3114 {
			yyb3114 = yyj3114 > l
		} else {
			yyb3114 = r.CheckBreak()
		}
		if yyb3114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3116 := z.EncBinary()
		_ = yym3116
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3117 := !z.EncBinary()
			yy2arr3117 := z.EncBasicHandle().StructToArray
			var yyq3117 [3]bool
			_, _, _ = yysep3117, yyq3117, yy2arr3117
			const yyr3117 bool = false
			yyq3117[0] = x.Kind != ""
			yyq3117[1] = x.APIVersion != ""
			yyq3117[2] = true
			var yynn3117 int
			if yyr3117 || yy2arr3117 {
				r.EncodeArrayStart(3)
			} else {
				yynn3117 = 0
				for _, b := range yyq3117 {
					if b {
						yynn3117++
					}
				}
				r.EncodeMapStart(yynn3117)
				yynn3117 = 0
			}
			if yyr3117 || yy2arr3117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3117[0] {
					yym3119 := z.EncBinary()
					_ = yym3119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3117[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3117 || yy2arr3117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3117[1] {
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3117[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3117 || yy2arr3117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3117[2] {
					yy3125 := &x.Reference
					yy3125.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3117[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3126 := &x.Reference
					yy3126.CodecEncodeSelf(e)
				}
			}
			if yyr3117 || yy2arr3117 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3128 := r.ContainerType()
		if yyct3128 == codecSelferValueTypeMap1234 {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if yyct3128 == codecSelferValueTypeArray1234 {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3129 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3132 := &x.Reference
				yyv3132.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3133 int
	var yyb3133 bool
	var yyhl3133 bool = l >= 0
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3136 := &x.Reference
		yyv3136.CodecDecodeSelf(d)
	}
	for {
		yyj3133++
		if yyhl3133 {
			yyb3133 = yyj3133 > l
		} else {
			yyb3133 = r.CheckBreak()
		}
		if yyb3133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3137 := z.EncBinary()
		_ = yym3137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3138 := !z.EncBinary()
			yy2arr3138 := z.EncBasicHandle().StructToArray
			var yyq3138 [2]bool
			_, _, _ = yysep3138, yyq3138, yy2arr3138
			const yyr3138 bool = false
			yyq3138[0] = x.Component != ""
			yyq3138[1] = x.Host != ""
			var yynn3138 int
			if yyr3138 || yy2arr3138 {
				r.EncodeArrayStart(2)
			} else {
				yynn3138 = 0
				for _, b := range yyq3138 {
					if b {
						yynn3138++
					}
				}
				r.EncodeMapStart(yynn3138)
				yynn3138 = 0
			}
			if yyr3138 || yy2arr3138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3138[0] {
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3138[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3138 || yy2arr3138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3138[1] {
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3138[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3138 || yy2arr3138 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3145 := z.DecBinary()
	_ = yym3145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3146 := r.ContainerType()
		if yyct3146 == codecSelferValueTypeMap1234 {
			yyl3146 := r.ReadMapStart()
			if yyl3146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3146, d)
			}
		} else if yyct3146 == codecSelferValueTypeArray1234 {
			yyl3146 := r.ReadArrayStart()
			if yyl3146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3147Slc
	var yyhl3147 bool = l >= 0
	for yyj3147 := 0; ; yyj3147++ {
		if yyhl3147 {
			if yyj3147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3147Slc = r.DecodeBytes(yys3147Slc, true, true)
		yys3147 := string(yys3147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3147 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3147)
		} // end switch yys3147
	} // end for yyj3147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3150 int
	var yyb3150 bool
	var yyhl3150 bool = l >= 0
	yyj3150++
	if yyhl3150 {
		yyb3150 = yyj3150 > l
	} else {
		yyb3150 = r.CheckBreak()
	}
	if yyb3150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3150++
	if yyhl3150 {
		yyb3150 = yyj3150 > l
	} else {
		yyb3150 = r.CheckBreak()
	}
	if yyb3150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3150++
		if yyhl3150 {
			yyb3150 = yyj3150 > l
		} else {
			yyb3150 = r.CheckBreak()
		}
		if yyb3150 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3150-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3153 := z.EncBinary()
		_ = yym3153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3154 := !z.EncBinary()
			yy2arr3154 := z.EncBasicHandle().StructToArray
			var yyq3154 [11]bool
			_, _, _ = yysep3154, yyq3154, yy2arr3154
			const yyr3154 bool = false
			yyq3154[0] = x.Kind != ""
			yyq3154[1] = x.APIVersion != ""
			yyq3154[2] = true
			yyq3154[3] = true
			yyq3154[4] = x.Reason != ""
			yyq3154[5] = x.Message != ""
			yyq3154[6] = true
			yyq3154[7] = true
			yyq3154[8] = true
			yyq3154[9] = x.Count != 0
			yyq3154[10] = x.Type != ""
			var yynn3154 int
			if yyr3154 || yy2arr3154 {
				r.EncodeArrayStart(11)
			} else {
				yynn3154 = 0
				for _, b := range yyq3154 {
					if b {
						yynn3154++
					}
				}
				r.EncodeMapStart(yynn3154)
				yynn3154 = 0
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[0] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3154[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[1] {
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3154[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[2] {
					yy3162 := &x.ObjectMeta
					yy3162.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3154[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3163 := &x.ObjectMeta
					yy3163.CodecEncodeSelf(e)
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[3] {
					yy3165 := &x.InvolvedObject
					yy3165.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3154[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3166 := &x.InvolvedObject
					yy3166.CodecEncodeSelf(e)
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[4] {
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3154[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[5] {
					yym3171 := z.EncBinary()
					_ = yym3171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3154[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[6] {
					yy3174 := &x.Source
					yy3174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3154[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3175 := &x.Source
					yy3175.CodecEncodeSelf(e)
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[7] {
					yy3177 := &x.FirstTimestamp
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3177) {
					} else if yym3178 {
						z.EncBinaryMarshal(yy3177)
					} else if !yym3178 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3177)
					} else {
						z.EncFallback(yy3177)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3154[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3179 := &x.FirstTimestamp
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3179) {
					} else if yym3180 {
						z.EncBinaryMarshal(yy3179)
					} else if !yym3180 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3179)
					} else {
						z.EncFallback(yy3179)
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[8] {
					yy3182 := &x.LastTimestamp
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3182) {
					} else if yym3183 {
						z.EncBinaryMarshal(yy3182)
					} else if !yym3183 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3182)
					} else {
						z.EncFallback(yy3182)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3154[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3184 := &x.LastTimestamp
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3184) {
					} else if yym3185 {
						z.EncBinaryMarshal(yy3184)
					} else if !yym3185 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3184)
					} else {
						z.EncFallback(yy3184)
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[9] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3154[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3154[10] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3154[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3154 || yy2arr3154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3193 := r.ContainerType()
		if yyct3193 == codecSelferValueTypeMap1234 {
			yyl3193 := r.ReadMapStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3193, d)
			}
		} else if yyct3193 == codecSelferValueTypeArray1234 {
			yyl3193 := r.ReadArrayStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3194Slc
	var yyhl3194 bool = l >= 0
	for yyj3194 := 0; ; yyj3194++ {
		if yyhl3194 {
			if yyj3194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3194Slc = r.DecodeBytes(yys3194Slc, true, true)
		yys3194 := string(yys3194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3197 := &x.ObjectMeta
				yyv3197.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3198 := &x.InvolvedObject
				yyv3198.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3201 := &x.Source
				yyv3201.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3202 := &x.FirstTimestamp
				yym3203 := z.DecBinary()
				_ = yym3203
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3202) {
				} else if yym3203 {
					z.DecBinaryUnmarshal(yyv3202)
				} else if !yym3203 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3202)
				} else {
					z.DecFallback(yyv3202, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3204 := &x.LastTimestamp
				yym3205 := z.DecBinary()
				_ = yym3205
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3204) {
				} else if yym3205 {
					z.DecBinaryUnmarshal(yyv3204)
				} else if !yym3205 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3204)
				} else {
					z.DecFallback(yyv3204, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3194)
		} // end switch yys3194
	} // end for yyj3194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3208 int
	var yyb3208 bool
	var yyhl3208 bool = l >= 0
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3211 := &x.ObjectMeta
		yyv3211.CodecDecodeSelf(d)
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3212 := &x.InvolvedObject
		yyv3212.CodecDecodeSelf(d)
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3215 := &x.Source
		yyv3215.CodecDecodeSelf(d)
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3216 := &x.FirstTimestamp
		yym3217 := z.DecBinary()
		_ = yym3217
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3216) {
		} else if yym3217 {
			z.DecBinaryUnmarshal(yyv3216)
		} else if !yym3217 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3216)
		} else {
			z.DecFallback(yyv3216, false)
		}
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3218 := &x.LastTimestamp
		yym3219 := z.DecBinary()
		_ = yym3219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3218) {
		} else if yym3219 {
			z.DecBinaryUnmarshal(yyv3218)
		} else if !yym3219 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3218)
		} else {
			z.DecFallback(yyv3218, false)
		}
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3208++
		if yyhl3208 {
			yyb3208 = yyj3208 > l
		} else {
			yyb3208 = r.CheckBreak()
		}
		if yyb3208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3222 := z.EncBinary()
		_ = yym3222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3223 := !z.EncBinary()
			yy2arr3223 := z.EncBasicHandle().StructToArray
			var yyq3223 [4]bool
			_, _, _ = yysep3223, yyq3223, yy2arr3223
			const yyr3223 bool = false
			yyq3223[0] = x.Kind != ""
			yyq3223[1] = x.APIVersion != ""
			yyq3223[2] = true
			var yynn3223 int
			if yyr3223 || yy2arr3223 {
				r.EncodeArrayStart(4)
			} else {
				yynn3223 = 1
				for _, b := range yyq3223 {
					if b {
						yynn3223++
					}
				}
				r.EncodeMapStart(yynn3223)
				yynn3223 = 0
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[0] {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[1] {
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[2] {
					yy3231 := &x.ListMeta
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3231) {
					} else {
						z.EncFallback(yy3231)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3233 := &x.ListMeta
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3233) {
					} else {
						z.EncFallback(yy3233)
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3238 := z.DecBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3239 := r.ContainerType()
		if yyct3239 == codecSelferValueTypeMap1234 {
			yyl3239 := r.ReadMapStart()
			if yyl3239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3239, d)
			}
		} else if yyct3239 == codecSelferValueTypeArray1234 {
			yyl3239 := r.ReadArrayStart()
			if yyl3239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3240Slc
	var yyhl3240 bool = l >= 0
	for yyj3240 := 0; ; yyj3240++ {
		if yyhl3240 {
			if yyj3240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3240Slc = r.DecodeBytes(yys3240Slc, true, true)
		yys3240 := string(yys3240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3240 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3243 := &x.ListMeta
				yym3244 := z.DecBinary()
				_ = yym3244
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3243) {
				} else {
					z.DecFallback(yyv3243, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3245 := &x.Items
				yym3246 := z.DecBinary()
				_ = yym3246
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3240)
		} // end switch yys3240
	} // end for yyj3240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3247 int
	var yyb3247 bool
	var yyhl3247 bool = l >= 0
	yyj3247++
	if yyhl3247 {
		yyb3247 = yyj3247 > l
	} else {
		yyb3247 = r.CheckBreak()
	}
	if yyb3247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3247++
	if yyhl3247 {
		yyb3247 = yyj3247 > l
	} else {
		yyb3247 = r.CheckBreak()
	}
	if yyb3247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3247++
	if yyhl3247 {
		yyb3247 = yyj3247 > l
	} else {
		yyb3247 = r.CheckBreak()
	}
	if yyb3247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3250 := &x.ListMeta
		yym3251 := z.DecBinary()
		_ = yym3251
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3250) {
		} else {
			z.DecFallback(yyv3250, false)
		}
	}
	yyj3247++
	if yyhl3247 {
		yyb3247 = yyj3247 > l
	} else {
		yyb3247 = r.CheckBreak()
	}
	if yyb3247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3252 := &x.Items
		yym3253 := z.DecBinary()
		_ = yym3253
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3252), d)
		}
	}
	for {
		yyj3247++
		if yyhl3247 {
			yyb3247 = yyj3247 > l
		} else {
			yyb3247 = r.CheckBreak()
		}
		if yyb3247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3254 := z.EncBinary()
		_ = yym3254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3255 := !z.EncBinary()
			yy2arr3255 := z.EncBasicHandle().StructToArray
			var yyq3255 [4]bool
			_, _, _ = yysep3255, yyq3255, yy2arr3255
			const yyr3255 bool = false
			yyq3255[0] = x.Kind != ""
			yyq3255[1] = x.APIVersion != ""
			yyq3255[2] = true
			var yynn3255 int
			if yyr3255 || yy2arr3255 {
				r.EncodeArrayStart(4)
			} else {
				yynn3255 = 1
				for _, b := range yyq3255 {
					if b {
						yynn3255++
					}
				}
				r.EncodeMapStart(yynn3255)
				yynn3255 = 0
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[0] {
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[1] {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[2] {
					yy3263 := &x.ListMeta
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3263) {
					} else {
						z.EncFallback(yy3263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3265 := &x.ListMeta
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3265) {
					} else {
						z.EncFallback(yy3265)
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3270 := z.DecBinary()
	_ = yym3270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3271 := r.ContainerType()
		if yyct3271 == codecSelferValueTypeMap1234 {
			yyl3271 := r.ReadMapStart()
			if yyl3271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3271, d)
			}
		} else if yyct3271 == codecSelferValueTypeArray1234 {
			yyl3271 := r.ReadArrayStart()
			if yyl3271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3272Slc
	var yyhl3272 bool = l >= 0
	for yyj3272 := 0; ; yyj3272++ {
		if yyhl3272 {
			if yyj3272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3272Slc = r.DecodeBytes(yys3272Slc, true, true)
		yys3272 := string(yys3272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3272 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3275 := &x.ListMeta
				yym3276 := z.DecBinary()
				_ = yym3276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3275) {
				} else {
					z.DecFallback(yyv3275, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3277 := &x.Items
				yym3278 := z.DecBinary()
				_ = yym3278
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3277), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3272)
		} // end switch yys3272
	} // end for yyj3272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3279 int
	var yyb3279 bool
	var yyhl3279 bool = l >= 0
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3282 := &x.ListMeta
		yym3283 := z.DecBinary()
		_ = yym3283
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3282) {
		} else {
			z.DecFallback(yyv3282, false)
		}
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3284 := &x.Items
		yym3285 := z.DecBinary()
		_ = yym3285
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3284), d)
		}
	}
	for {
		yyj3279++
		if yyhl3279 {
			yyb3279 = yyj3279 > l
		} else {
			yyb3279 = r.CheckBreak()
		}
		if yyb3279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3286 := z.EncBinary()
	_ = yym3286
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3287 := z.DecBinary()
	_ = yym3287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3288 := z.EncBinary()
		_ = yym3288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3289 := !z.EncBinary()
			yy2arr3289 := z.EncBasicHandle().StructToArray
			var yyq3289 [6]bool
			_, _, _ = yysep3289, yyq3289, yy2arr3289
			const yyr3289 bool = false
			yyq3289[0] = x.Type != ""
			yyq3289[1] = len(x.Max) != 0
			yyq3289[2] = len(x.Min) != 0
			yyq3289[3] = len(x.Default) != 0
			yyq3289[4] = len(x.DefaultRequest) != 0
			yyq3289[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3289 int
			if yyr3289 || yy2arr3289 {
				r.EncodeArrayStart(6)
			} else {
				yynn3289 = 0
				for _, b := range yyq3289 {
					if b {
						yynn3289++
					}
				}
				r.EncodeMapStart(yynn3289)
				yynn3289 = 0
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3289[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3289[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3289[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3289[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3289[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3289[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3289[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3296 := z.DecBinary()
	_ = yym3296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3297 := r.ContainerType()
		if yyct3297 == codecSelferValueTypeMap1234 {
			yyl3297 := r.ReadMapStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3297, d)
			}
		} else if yyct3297 == codecSelferValueTypeArray1234 {
			yyl3297 := r.ReadArrayStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3298Slc
	var yyhl3298 bool = l >= 0
	for yyj3298 := 0; ; yyj3298++ {
		if yyhl3298 {
			if yyj3298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3298Slc = r.DecodeBytes(yys3298Slc, true, true)
		yys3298 := string(yys3298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3298 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3300 := &x.Max
				yyv3300.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3301 := &x.Min
				yyv3301.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3302 := &x.Default
				yyv3302.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3303 := &x.DefaultRequest
				yyv3303.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3304 := &x.MaxLimitRequestRatio
				yyv3304.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3298)
		} // end switch yys3298
	} // end for yyj3298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3305 int
	var yyb3305 bool
	var yyhl3305 bool = l >= 0
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3307 := &x.Max
		yyv3307.CodecDecodeSelf(d)
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3308 := &x.Min
		yyv3308.CodecDecodeSelf(d)
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3309 := &x.Default
		yyv3309.CodecDecodeSelf(d)
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3310 := &x.DefaultRequest
		yyv3310.CodecDecodeSelf(d)
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3311 := &x.MaxLimitRequestRatio
		yyv3311.CodecDecodeSelf(d)
	}
	for {
		yyj3305++
		if yyhl3305 {
			yyb3305 = yyj3305 > l
		} else {
			yyb3305 = r.CheckBreak()
		}
		if yyb3305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3312 := z.EncBinary()
		_ = yym3312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3313 := !z.EncBinary()
			yy2arr3313 := z.EncBasicHandle().StructToArray
			var yyq3313 [1]bool
			_, _, _ = yysep3313, yyq3313, yy2arr3313
			const yyr3313 bool = false
			var yynn3313 int
			if yyr3313 || yy2arr3313 {
				r.EncodeArrayStart(1)
			} else {
				yynn3313 = 1
				for _, b := range yyq3313 {
					if b {
						yynn3313++
					}
				}
				r.EncodeMapStart(yynn3313)
				yynn3313 = 0
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3317 := z.DecBinary()
	_ = yym3317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3318 := r.ContainerType()
		if yyct3318 == codecSelferValueTypeMap1234 {
			yyl3318 := r.ReadMapStart()
			if yyl3318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3318, d)
			}
		} else if yyct3318 == codecSelferValueTypeArray1234 {
			yyl3318 := r.ReadArrayStart()
			if yyl3318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3319Slc
	var yyhl3319 bool = l >= 0
	for yyj3319 := 0; ; yyj3319++ {
		if yyhl3319 {
			if yyj3319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3319Slc = r.DecodeBytes(yys3319Slc, true, true)
		yys3319 := string(yys3319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3319 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3320 := &x.Limits
				yym3321 := z.DecBinary()
				_ = yym3321
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3320), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3319)
		} // end switch yys3319
	} // end for yyj3319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3322 int
	var yyb3322 bool
	var yyhl3322 bool = l >= 0
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3323 := &x.Limits
		yym3324 := z.DecBinary()
		_ = yym3324
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3323), d)
		}
	}
	for {
		yyj3322++
		if yyhl3322 {
			yyb3322 = yyj3322 > l
		} else {
			yyb3322 = r.CheckBreak()
		}
		if yyb3322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3325 := z.EncBinary()
		_ = yym3325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3326 := !z.EncBinary()
			yy2arr3326 := z.EncBasicHandle().StructToArray
			var yyq3326 [4]bool
			_, _, _ = yysep3326, yyq3326, yy2arr3326
			const yyr3326 bool = false
			yyq3326[0] = x.Kind != ""
			yyq3326[1] = x.APIVersion != ""
			yyq3326[2] = true
			yyq3326[3] = true
			var yynn3326 int
			if yyr3326 || yy2arr3326 {
				r.EncodeArrayStart(4)
			} else {
				yynn3326 = 0
				for _, b := range yyq3326 {
					if b {
						yynn3326++
					}
				}
				r.EncodeMapStart(yynn3326)
				yynn3326 = 0
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3326[0] {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3326[1] {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3326[2] {
					yy3334 := &x.ObjectMeta
					yy3334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3335 := &x.ObjectMeta
					yy3335.CodecEncodeSelf(e)
				}
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3326[3] {
					yy3337 := &x.Spec
					yy3337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3338 := &x.Spec
					yy3338.CodecEncodeSelf(e)
				}
			}
			if yyr3326 || yy2arr3326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3339 := z.DecBinary()
	_ = yym3339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3340 := r.ContainerType()
		if yyct3340 == codecSelferValueTypeMap1234 {
			yyl3340 := r.ReadMapStart()
			if yyl3340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3340, d)
			}
		} else if yyct3340 == codecSelferValueTypeArray1234 {
			yyl3340 := r.ReadArrayStart()
			if yyl3340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3341Slc
	var yyhl3341 bool = l >= 0
	for yyj3341 := 0; ; yyj3341++ {
		if yyhl3341 {
			if yyj3341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3341Slc = r.DecodeBytes(yys3341Slc, true, true)
		yys3341 := string(yys3341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3344 := &x.ObjectMeta
				yyv3344.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3345 := &x.Spec
				yyv3345.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3341)
		} // end switch yys3341
	} // end for yyj3341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3346 int
	var yyb3346 bool
	var yyhl3346 bool = l >= 0
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3349 := &x.ObjectMeta
		yyv3349.CodecDecodeSelf(d)
	}
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3350 := &x.Spec
		yyv3350.CodecDecodeSelf(d)
	}
	for {
		yyj3346++
		if yyhl3346 {
			yyb3346 = yyj3346 > l
		} else {
			yyb3346 = r.CheckBreak()
		}
		if yyb3346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3351 := z.EncBinary()
		_ = yym3351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3352 := !z.EncBinary()
			yy2arr3352 := z.EncBasicHandle().StructToArray
			var yyq3352 [4]bool
			_, _, _ = yysep3352, yyq3352, yy2arr3352
			const yyr3352 bool = false
			yyq3352[0] = x.Kind != ""
			yyq3352[1] = x.APIVersion != ""
			yyq3352[2] = true
			var yynn3352 int
			if yyr3352 || yy2arr3352 {
				r.EncodeArrayStart(4)
			} else {
				yynn3352 = 1
				for _, b := range yyq3352 {
					if b {
						yynn3352++
					}
				}
				r.EncodeMapStart(yynn3352)
				yynn3352 = 0
			}
			if yyr3352 || yy2arr3352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3352[0] {
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3352[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3352[1] {
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3352[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3352[2] {
					yy3360 := &x.ListMeta
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3360) {
					} else {
						z.EncFallback(yy3360)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3352[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3362 := &x.ListMeta
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3362) {
					} else {
						z.EncFallback(yy3362)
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3367 := z.DecBinary()
	_ = yym3367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3368 := r.ContainerType()
		if yyct3368 == codecSelferValueTypeMap1234 {
			yyl3368 := r.ReadMapStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3368, d)
			}
		} else if yyct3368 == codecSelferValueTypeArray1234 {
			yyl3368 := r.ReadArrayStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3369Slc
	var yyhl3369 bool = l >= 0
	for yyj3369 := 0; ; yyj3369++ {
		if yyhl3369 {
			if yyj3369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3369Slc = r.DecodeBytes(yys3369Slc, true, true)
		yys3369 := string(yys3369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3372 := &x.ListMeta
				yym3373 := z.DecBinary()
				_ = yym3373
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3372) {
				} else {
					z.DecFallback(yyv3372, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3374 := &x.Items
				yym3375 := z.DecBinary()
				_ = yym3375
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3374), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3369)
		} // end switch yys3369
	} // end for yyj3369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3376 int
	var yyb3376 bool
	var yyhl3376 bool = l >= 0
	yyj3376++
	if yyhl3376 {
		yyb3376 = yyj3376 > l
	} else {
		yyb3376 = r.CheckBreak()
	}
	if yyb3376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3376++
	if yyhl3376 {
		yyb3376 = yyj3376 > l
	} else {
		yyb3376 = r.CheckBreak()
	}
	if yyb3376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3376++
	if yyhl3376 {
		yyb3376 = yyj3376 > l
	} else {
		yyb3376 = r.CheckBreak()
	}
	if yyb3376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3379 := &x.ListMeta
		yym3380 := z.DecBinary()
		_ = yym3380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3379) {
		} else {
			z.DecFallback(yyv3379, false)
		}
	}
	yyj3376++
	if yyhl3376 {
		yyb3376 = yyj3376 > l
	} else {
		yyb3376 = r.CheckBreak()
	}
	if yyb3376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3381 := &x.Items
		yym3382 := z.DecBinary()
		_ = yym3382
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3381), d)
		}
	}
	for {
		yyj3376++
		if yyhl3376 {
			yyb3376 = yyj3376 > l
		} else {
			yyb3376 = r.CheckBreak()
		}
		if yyb3376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3383 := z.EncBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3384 := !z.EncBinary()
			yy2arr3384 := z.EncBasicHandle().StructToArray
			var yyq3384 [1]bool
			_, _, _ = yysep3384, yyq3384, yy2arr3384
			const yyr3384 bool = false
			yyq3384[0] = len(x.Hard) != 0
			var yynn3384 int
			if yyr3384 || yy2arr3384 {
				r.EncodeArrayStart(1)
			} else {
				yynn3384 = 0
				for _, b := range yyq3384 {
					if b {
						yynn3384++
					}
				}
				r.EncodeMapStart(yynn3384)
				yynn3384 = 0
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3386 := z.DecBinary()
	_ = yym3386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3387 := r.ContainerType()
		if yyct3387 == codecSelferValueTypeMap1234 {
			yyl3387 := r.ReadMapStart()
			if yyl3387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3387, d)
			}
		} else if yyct3387 == codecSelferValueTypeArray1234 {
			yyl3387 := r.ReadArrayStart()
			if yyl3387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3388Slc
	var yyhl3388 bool = l >= 0
	for yyj3388 := 0; ; yyj3388++ {
		if yyhl3388 {
			if yyj3388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3388Slc = r.DecodeBytes(yys3388Slc, true, true)
		yys3388 := string(yys3388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3388 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3389 := &x.Hard
				yyv3389.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3388)
		} // end switch yys3388
	} // end for yyj3388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3390 int
	var yyb3390 bool
	var yyhl3390 bool = l >= 0
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3391 := &x.Hard
		yyv3391.CodecDecodeSelf(d)
	}
	for {
		yyj3390++
		if yyhl3390 {
			yyb3390 = yyj3390 > l
		} else {
			yyb3390 = r.CheckBreak()
		}
		if yyb3390 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3390-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3392 := z.EncBinary()
		_ = yym3392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3393 := !z.EncBinary()
			yy2arr3393 := z.EncBasicHandle().StructToArray
			var yyq3393 [2]bool
			_, _, _ = yysep3393, yyq3393, yy2arr3393
			const yyr3393 bool = false
			yyq3393[0] = len(x.Hard) != 0
			yyq3393[1] = len(x.Used) != 0
			var yynn3393 int
			if yyr3393 || yy2arr3393 {
				r.EncodeArrayStart(2)
			} else {
				yynn3393 = 0
				for _, b := range yyq3393 {
					if b {
						yynn3393++
					}
				}
				r.EncodeMapStart(yynn3393)
				yynn3393 = 0
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3393[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3393[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3396 := z.DecBinary()
	_ = yym3396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3397 := r.ContainerType()
		if yyct3397 == codecSelferValueTypeMap1234 {
			yyl3397 := r.ReadMapStart()
			if yyl3397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3397, d)
			}
		} else if yyct3397 == codecSelferValueTypeArray1234 {
			yyl3397 := r.ReadArrayStart()
			if yyl3397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3398Slc
	var yyhl3398 bool = l >= 0
	for yyj3398 := 0; ; yyj3398++ {
		if yyhl3398 {
			if yyj3398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3398Slc = r.DecodeBytes(yys3398Slc, true, true)
		yys3398 := string(yys3398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3398 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3399 := &x.Hard
				yyv3399.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3400 := &x.Used
				yyv3400.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3398)
		} // end switch yys3398
	} // end for yyj3398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3401 int
	var yyb3401 bool
	var yyhl3401 bool = l >= 0
	yyj3401++
	if yyhl3401 {
		yyb3401 = yyj3401 > l
	} else {
		yyb3401 = r.CheckBreak()
	}
	if yyb3401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3402 := &x.Hard
		yyv3402.CodecDecodeSelf(d)
	}
	yyj3401++
	if yyhl3401 {
		yyb3401 = yyj3401 > l
	} else {
		yyb3401 = r.CheckBreak()
	}
	if yyb3401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3403 := &x.Used
		yyv3403.CodecDecodeSelf(d)
	}
	for {
		yyj3401++
		if yyhl3401 {
			yyb3401 = yyj3401 > l
		} else {
			yyb3401 = r.CheckBreak()
		}
		if yyb3401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3404 := z.EncBinary()
		_ = yym3404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3405 := !z.EncBinary()
			yy2arr3405 := z.EncBasicHandle().StructToArray
			var yyq3405 [5]bool
			_, _, _ = yysep3405, yyq3405, yy2arr3405
			const yyr3405 bool = false
			yyq3405[0] = x.Kind != ""
			yyq3405[1] = x.APIVersion != ""
			yyq3405[2] = true
			yyq3405[3] = true
			yyq3405[4] = true
			var yynn3405 int
			if yyr3405 || yy2arr3405 {
				r.EncodeArrayStart(5)
			} else {
				yynn3405 = 0
				for _, b := range yyq3405 {
					if b {
						yynn3405++
					}
				}
				r.EncodeMapStart(yynn3405)
				yynn3405 = 0
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[0] {
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[1] {
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3405[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[2] {
					yy3413 := &x.ObjectMeta
					yy3413.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3405[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3414 := &x.ObjectMeta
					yy3414.CodecEncodeSelf(e)
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[3] {
					yy3416 := &x.Spec
					yy3416.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3405[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3417 := &x.Spec
					yy3417.CodecEncodeSelf(e)
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[4] {
					yy3419 := &x.Status
					yy3419.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3405[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3420 := &x.Status
					yy3420.CodecEncodeSelf(e)
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3421 := z.DecBinary()
	_ = yym3421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3422 := r.ContainerType()
		if yyct3422 == codecSelferValueTypeMap1234 {
			yyl3422 := r.ReadMapStart()
			if yyl3422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3422, d)
			}
		} else if yyct3422 == codecSelferValueTypeArray1234 {
			yyl3422 := r.ReadArrayStart()
			if yyl3422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3423Slc
	var yyhl3423 bool = l >= 0
	for yyj3423 := 0; ; yyj3423++ {
		if yyhl3423 {
			if yyj3423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3423Slc = r.DecodeBytes(yys3423Slc, true, true)
		yys3423 := string(yys3423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3426 := &x.ObjectMeta
				yyv3426.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3427 := &x.Spec
				yyv3427.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3428 := &x.Status
				yyv3428.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3423)
		} // end switch yys3423
	} // end for yyj3423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3429 int
	var yyb3429 bool
	var yyhl3429 bool = l >= 0
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3432 := &x.ObjectMeta
		yyv3432.CodecDecodeSelf(d)
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3433 := &x.Spec
		yyv3433.CodecDecodeSelf(d)
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3434 := &x.Status
		yyv3434.CodecDecodeSelf(d)
	}
	for {
		yyj3429++
		if yyhl3429 {
			yyb3429 = yyj3429 > l
		} else {
			yyb3429 = r.CheckBreak()
		}
		if yyb3429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3435 := z.EncBinary()
		_ = yym3435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3436 := !z.EncBinary()
			yy2arr3436 := z.EncBasicHandle().StructToArray
			var yyq3436 [4]bool
			_, _, _ = yysep3436, yyq3436, yy2arr3436
			const yyr3436 bool = false
			yyq3436[0] = x.Kind != ""
			yyq3436[1] = x.APIVersion != ""
			yyq3436[2] = true
			var yynn3436 int
			if yyr3436 || yy2arr3436 {
				r.EncodeArrayStart(4)
			} else {
				yynn3436 = 1
				for _, b := range yyq3436 {
					if b {
						yynn3436++
					}
				}
				r.EncodeMapStart(yynn3436)
				yynn3436 = 0
			}
			if yyr3436 || yy2arr3436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3436[0] {
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3439 := z.EncBinary()
					_ = yym3439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3436 || yy2arr3436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3436[1] {
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3436[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3436 || yy2arr3436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3436[2] {
					yy3444 := &x.ListMeta
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3444) {
					} else {
						z.EncFallback(yy3444)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3446 := &x.ListMeta
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3446) {
					} else {
						z.EncFallback(yy3446)
					}
				}
			}
			if yyr3436 || yy2arr3436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3436 || yy2arr3436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3451 := z.DecBinary()
	_ = yym3451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3452 := r.ContainerType()
		if yyct3452 == codecSelferValueTypeMap1234 {
			yyl3452 := r.ReadMapStart()
			if yyl3452 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3452, d)
			}
		} else if yyct3452 == codecSelferValueTypeArray1234 {
			yyl3452 := r.ReadArrayStart()
			if yyl3452 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3452, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3453Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3453Slc
	var yyhl3453 bool = l >= 0
	for yyj3453 := 0; ; yyj3453++ {
		if yyhl3453 {
			if yyj3453 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3453Slc = r.DecodeBytes(yys3453Slc, true, true)
		yys3453 := string(yys3453Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3453 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3456 := &x.ListMeta
				yym3457 := z.DecBinary()
				_ = yym3457
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3456) {
				} else {
					z.DecFallback(yyv3456, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3458 := &x.Items
				yym3459 := z.DecBinary()
				_ = yym3459
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3458), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3453)
		} // end switch yys3453
	} // end for yyj3453
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3460 int
	var yyb3460 bool
	var yyhl3460 bool = l >= 0
	yyj3460++
	if yyhl3460 {
		yyb3460 = yyj3460 > l
	} else {
		yyb3460 = r.CheckBreak()
	}
	if yyb3460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3460++
	if yyhl3460 {
		yyb3460 = yyj3460 > l
	} else {
		yyb3460 = r.CheckBreak()
	}
	if yyb3460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3460++
	if yyhl3460 {
		yyb3460 = yyj3460 > l
	} else {
		yyb3460 = r.CheckBreak()
	}
	if yyb3460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3463 := &x.ListMeta
		yym3464 := z.DecBinary()
		_ = yym3464
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3463) {
		} else {
			z.DecFallback(yyv3463, false)
		}
	}
	yyj3460++
	if yyhl3460 {
		yyb3460 = yyj3460 > l
	} else {
		yyb3460 = r.CheckBreak()
	}
	if yyb3460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3465 := &x.Items
		yym3466 := z.DecBinary()
		_ = yym3466
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3465), d)
		}
	}
	for {
		yyj3460++
		if yyhl3460 {
			yyb3460 = yyj3460 > l
		} else {
			yyb3460 = r.CheckBreak()
		}
		if yyb3460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3467 := z.EncBinary()
		_ = yym3467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3468 := !z.EncBinary()
			yy2arr3468 := z.EncBasicHandle().StructToArray
			var yyq3468 [5]bool
			_, _, _ = yysep3468, yyq3468, yy2arr3468
			const yyr3468 bool = false
			yyq3468[0] = x.Kind != ""
			yyq3468[1] = x.APIVersion != ""
			yyq3468[2] = true
			yyq3468[3] = len(x.Data) != 0
			yyq3468[4] = x.Type != ""
			var yynn3468 int
			if yyr3468 || yy2arr3468 {
				r.EncodeArrayStart(5)
			} else {
				yynn3468 = 0
				for _, b := range yyq3468 {
					if b {
						yynn3468++
					}
				}
				r.EncodeMapStart(yynn3468)
				yynn3468 = 0
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[0] {
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3468[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[1] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3468[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[2] {
					yy3476 := &x.ObjectMeta
					yy3476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3468[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3477 := &x.ObjectMeta
					yy3477.CodecEncodeSelf(e)
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3479 := z.EncBinary()
						_ = yym3479
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3468[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3480 := z.EncBinary()
						_ = yym3480
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3468[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3482 := z.DecBinary()
	_ = yym3482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3483 := r.ContainerType()
		if yyct3483 == codecSelferValueTypeMap1234 {
			yyl3483 := r.ReadMapStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3483, d)
			}
		} else if yyct3483 == codecSelferValueTypeArray1234 {
			yyl3483 := r.ReadArrayStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3484Slc
	var yyhl3484 bool = l >= 0
	for yyj3484 := 0; ; yyj3484++ {
		if yyhl3484 {
			if yyj3484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3484Slc = r.DecodeBytes(yys3484Slc, true, true)
		yys3484 := string(yys3484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3484 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3487 := &x.ObjectMeta
				yyv3487.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3488 := &x.Data
				yym3489 := z.DecBinary()
				_ = yym3489
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3488), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3484)
		} // end switch yys3484
	} // end for yyj3484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3491 int
	var yyb3491 bool
	var yyhl3491 bool = l >= 0
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3494 := &x.ObjectMeta
		yyv3494.CodecDecodeSelf(d)
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3495 := &x.Data
		yym3496 := z.DecBinary()
		_ = yym3496
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3495), d)
		}
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3491++
		if yyhl3491 {
			yyb3491 = yyj3491 > l
		} else {
			yyb3491 = r.CheckBreak()
		}
		if yyb3491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3498 := z.EncBinary()
	_ = yym3498
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3499 := z.DecBinary()
	_ = yym3499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3500 := z.EncBinary()
		_ = yym3500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3501 := !z.EncBinary()
			yy2arr3501 := z.EncBasicHandle().StructToArray
			var yyq3501 [4]bool
			_, _, _ = yysep3501, yyq3501, yy2arr3501
			const yyr3501 bool = false
			yyq3501[0] = x.Kind != ""
			yyq3501[1] = x.APIVersion != ""
			yyq3501[2] = true
			var yynn3501 int
			if yyr3501 || yy2arr3501 {
				r.EncodeArrayStart(4)
			} else {
				yynn3501 = 1
				for _, b := range yyq3501 {
					if b {
						yynn3501++
					}
				}
				r.EncodeMapStart(yynn3501)
				yynn3501 = 0
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[0] {
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3504 := z.EncBinary()
					_ = yym3504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[1] {
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[2] {
					yy3509 := &x.ListMeta
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3509) {
					} else {
						z.EncFallback(yy3509)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3511 := &x.ListMeta
					yym3512 := z.EncBinary()
					_ = yym3512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3511) {
					} else {
						z.EncFallback(yy3511)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3515 := z.EncBinary()
					_ = yym3515
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3516 := z.DecBinary()
	_ = yym3516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3517 := r.ContainerType()
		if yyct3517 == codecSelferValueTypeMap1234 {
			yyl3517 := r.ReadMapStart()
			if yyl3517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3517, d)
			}
		} else if yyct3517 == codecSelferValueTypeArray1234 {
			yyl3517 := r.ReadArrayStart()
			if yyl3517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3518Slc
	var yyhl3518 bool = l >= 0
	for yyj3518 := 0; ; yyj3518++ {
		if yyhl3518 {
			if yyj3518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3518Slc = r.DecodeBytes(yys3518Slc, true, true)
		yys3518 := string(yys3518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3518 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3521 := &x.ListMeta
				yym3522 := z.DecBinary()
				_ = yym3522
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3521) {
				} else {
					z.DecFallback(yyv3521, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3523 := &x.Items
				yym3524 := z.DecBinary()
				_ = yym3524
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3523), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3518)
		} // end switch yys3518
	} // end for yyj3518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3525 int
	var yyb3525 bool
	var yyhl3525 bool = l >= 0
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3528 := &x.ListMeta
		yym3529 := z.DecBinary()
		_ = yym3529
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3528) {
		} else {
			z.DecFallback(yyv3528, false)
		}
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3530 := &x.Items
		yym3531 := z.DecBinary()
		_ = yym3531
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3530), d)
		}
	}
	for {
		yyj3525++
		if yyhl3525 {
			yyb3525 = yyj3525 > l
		} else {
			yyb3525 = r.CheckBreak()
		}
		if yyb3525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3532 := z.EncBinary()
	_ = yym3532
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3533 := z.DecBinary()
	_ = yym3533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3534 := z.EncBinary()
	_ = yym3534
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3535 := z.DecBinary()
	_ = yym3535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3536 := z.EncBinary()
		_ = yym3536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3537 := !z.EncBinary()
			yy2arr3537 := z.EncBasicHandle().StructToArray
			var yyq3537 [4]bool
			_, _, _ = yysep3537, yyq3537, yy2arr3537
			const yyr3537 bool = false
			yyq3537[2] = x.Message != ""
			yyq3537[3] = x.Error != ""
			var yynn3537 int
			if yyr3537 || yy2arr3537 {
				r.EncodeArrayStart(4)
			} else {
				yynn3537 = 2
				for _, b := range yyq3537 {
					if b {
						yynn3537++
					}
				}
				r.EncodeMapStart(yynn3537)
				yynn3537 = 0
			}
			if yyr3537 || yy2arr3537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3537 || yy2arr3537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3537 || yy2arr3537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3537[2] {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3537 || yy2arr3537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3537[3] {
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3537[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3545 := z.EncBinary()
					_ = yym3545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3537 || yy2arr3537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3546 := z.DecBinary()
	_ = yym3546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3547 := r.ContainerType()
		if yyct3547 == codecSelferValueTypeMap1234 {
			yyl3547 := r.ReadMapStart()
			if yyl3547 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3547, d)
			}
		} else if yyct3547 == codecSelferValueTypeArray1234 {
			yyl3547 := r.ReadArrayStart()
			if yyl3547 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3547, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3548Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3548Slc
	var yyhl3548 bool = l >= 0
	for yyj3548 := 0; ; yyj3548++ {
		if yyhl3548 {
			if yyj3548 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3548Slc = r.DecodeBytes(yys3548Slc, true, true)
		yys3548 := string(yys3548Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3548 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3548)
		} // end switch yys3548
	} // end for yyj3548
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3553 int
	var yyb3553 bool
	var yyhl3553 bool = l >= 0
	yyj3553++
	if yyhl3553 {
		yyb3553 = yyj3553 > l
	} else {
		yyb3553 = r.CheckBreak()
	}
	if yyb3553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3553++
	if yyhl3553 {
		yyb3553 = yyj3553 > l
	} else {
		yyb3553 = r.CheckBreak()
	}
	if yyb3553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3553++
	if yyhl3553 {
		yyb3553 = yyj3553 > l
	} else {
		yyb3553 = r.CheckBreak()
	}
	if yyb3553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3553++
	if yyhl3553 {
		yyb3553 = yyj3553 > l
	} else {
		yyb3553 = r.CheckBreak()
	}
	if yyb3553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3553++
		if yyhl3553 {
			yyb3553 = yyj3553 > l
		} else {
			yyb3553 = r.CheckBreak()
		}
		if yyb3553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3558 := z.EncBinary()
		_ = yym3558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3559 := !z.EncBinary()
			yy2arr3559 := z.EncBasicHandle().StructToArray
			var yyq3559 [4]bool
			_, _, _ = yysep3559, yyq3559, yy2arr3559
			const yyr3559 bool = false
			yyq3559[0] = x.Kind != ""
			yyq3559[1] = x.APIVersion != ""
			yyq3559[2] = true
			yyq3559[3] = len(x.Conditions) != 0
			var yynn3559 int
			if yyr3559 || yy2arr3559 {
				r.EncodeArrayStart(4)
			} else {
				yynn3559 = 0
				for _, b := range yyq3559 {
					if b {
						yynn3559++
					}
				}
				r.EncodeMapStart(yynn3559)
				yynn3559 = 0
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[0] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3559[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[1] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3559[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[2] {
					yy3567 := &x.ObjectMeta
					yy3567.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3559[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3568 := &x.ObjectMeta
					yy3568.CodecEncodeSelf(e)
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3570 := z.EncBinary()
						_ = yym3570
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3559[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3571 := z.EncBinary()
						_ = yym3571
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3572 := z.DecBinary()
	_ = yym3572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3573 := r.ContainerType()
		if yyct3573 == codecSelferValueTypeMap1234 {
			yyl3573 := r.ReadMapStart()
			if yyl3573 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3573, d)
			}
		} else if yyct3573 == codecSelferValueTypeArray1234 {
			yyl3573 := r.ReadArrayStart()
			if yyl3573 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3574Slc
	var yyhl3574 bool = l >= 0
	for yyj3574 := 0; ; yyj3574++ {
		if yyhl3574 {
			if yyj3574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3574Slc = r.DecodeBytes(yys3574Slc, true, true)
		yys3574 := string(yys3574Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3574 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3577 := &x.ObjectMeta
				yyv3577.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3578 := &x.Conditions
				yym3579 := z.DecBinary()
				_ = yym3579
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3578), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3574)
		} // end switch yys3574
	} // end for yyj3574
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3580 int
	var yyb3580 bool
	var yyhl3580 bool = l >= 0
	yyj3580++
	if yyhl3580 {
		yyb3580 = yyj3580 > l
	} else {
		yyb3580 = r.CheckBreak()
	}
	if yyb3580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3580++
	if yyhl3580 {
		yyb3580 = yyj3580 > l
	} else {
		yyb3580 = r.CheckBreak()
	}
	if yyb3580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3580++
	if yyhl3580 {
		yyb3580 = yyj3580 > l
	} else {
		yyb3580 = r.CheckBreak()
	}
	if yyb3580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3583 := &x.ObjectMeta
		yyv3583.CodecDecodeSelf(d)
	}
	yyj3580++
	if yyhl3580 {
		yyb3580 = yyj3580 > l
	} else {
		yyb3580 = r.CheckBreak()
	}
	if yyb3580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3584 := &x.Conditions
		yym3585 := z.DecBinary()
		_ = yym3585
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3584), d)
		}
	}
	for {
		yyj3580++
		if yyhl3580 {
			yyb3580 = yyj3580 > l
		} else {
			yyb3580 = r.CheckBreak()
		}
		if yyb3580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3586 := z.EncBinary()
		_ = yym3586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3587 := !z.EncBinary()
			yy2arr3587 := z.EncBasicHandle().StructToArray
			var yyq3587 [4]bool
			_, _, _ = yysep3587, yyq3587, yy2arr3587
			const yyr3587 bool = false
			yyq3587[0] = x.Kind != ""
			yyq3587[1] = x.APIVersion != ""
			yyq3587[2] = true
			var yynn3587 int
			if yyr3587 || yy2arr3587 {
				r.EncodeArrayStart(4)
			} else {
				yynn3587 = 1
				for _, b := range yyq3587 {
					if b {
						yynn3587++
					}
				}
				r.EncodeMapStart(yynn3587)
				yynn3587 = 0
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[0] {
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3587[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[1] {
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3587[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[2] {
					yy3595 := &x.ListMeta
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3595) {
					} else {
						z.EncFallback(yy3595)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3587[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3597 := &x.ListMeta
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3597) {
					} else {
						z.EncFallback(yy3597)
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3602 := z.DecBinary()
	_ = yym3602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3603 := r.ContainerType()
		if yyct3603 == codecSelferValueTypeMap1234 {
			yyl3603 := r.ReadMapStart()
			if yyl3603 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3603, d)
			}
		} else if yyct3603 == codecSelferValueTypeArray1234 {
			yyl3603 := r.ReadArrayStart()
			if yyl3603 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3603, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3604Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3604Slc
	var yyhl3604 bool = l >= 0
	for yyj3604 := 0; ; yyj3604++ {
		if yyhl3604 {
			if yyj3604 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3604Slc = r.DecodeBytes(yys3604Slc, true, true)
		yys3604 := string(yys3604Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3604 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3607 := &x.ListMeta
				yym3608 := z.DecBinary()
				_ = yym3608
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3607) {
				} else {
					z.DecFallback(yyv3607, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3609 := &x.Items
				yym3610 := z.DecBinary()
				_ = yym3610
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3609), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3604)
		} // end switch yys3604
	} // end for yyj3604
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3611 int
	var yyb3611 bool
	var yyhl3611 bool = l >= 0
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3614 := &x.ListMeta
		yym3615 := z.DecBinary()
		_ = yym3615
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3614) {
		} else {
			z.DecFallback(yyv3614, false)
		}
	}
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3616 := &x.Items
		yym3617 := z.DecBinary()
		_ = yym3617
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3616), d)
		}
	}
	for {
		yyj3611++
		if yyhl3611 {
			yyb3611 = yyj3611 > l
		} else {
			yyb3611 = r.CheckBreak()
		}
		if yyb3611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3618 := z.EncBinary()
		_ = yym3618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3619 := !z.EncBinary()
			yy2arr3619 := z.EncBasicHandle().StructToArray
			var yyq3619 [5]bool
			_, _, _ = yysep3619, yyq3619, yy2arr3619
			const yyr3619 bool = false
			yyq3619[0] = x.Capabilities != nil
			yyq3619[1] = x.Privileged != nil
			yyq3619[2] = x.SELinuxOptions != nil
			yyq3619[3] = x.RunAsUser != nil
			yyq3619[4] = x.RunAsNonRoot != nil
			var yynn3619 int
			if yyr3619 || yy2arr3619 {
				r.EncodeArrayStart(5)
			} else {
				yynn3619 = 0
				for _, b := range yyq3619 {
					if b {
						yynn3619++
					}
				}
				r.EncodeMapStart(yynn3619)
				yynn3619 = 0
			}
			if yyr3619 || yy2arr3619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3619[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3619[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3619 || yy2arr3619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3619[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3622 := *x.Privileged
						yym3623 := z.EncBinary()
						_ = yym3623
						if false {
						} else {
							r.EncodeBool(bool(yy3622))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3619[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3624 := *x.Privileged
						yym3625 := z.EncBinary()
						_ = yym3625
						if false {
						} else {
							r.EncodeBool(bool(yy3624))
						}
					}
				}
			}
			if yyr3619 || yy2arr3619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3619[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3619[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3619 || yy2arr3619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3619[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3628 := *x.RunAsUser
						yym3629 := z.EncBinary()
						_ = yym3629
						if false {
						} else {
							r.EncodeInt(int64(yy3628))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3619[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3630 := *x.RunAsUser
						yym3631 := z.EncBinary()
						_ = yym3631
						if false {
						} else {
							r.EncodeInt(int64(yy3630))
						}
					}
				}
			}
			if yyr3619 || yy2arr3619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3619[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3633 := *x.RunAsNonRoot
						yym3634 := z.EncBinary()
						_ = yym3634
						if false {
						} else {
							r.EncodeBool(bool(yy3633))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3619[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3635 := *x.RunAsNonRoot
						yym3636 := z.EncBinary()
						_ = yym3636
						if false {
						} else {
							r.EncodeBool(bool(yy3635))
						}
					}
				}
			}
			if yyr3619 || yy2arr3619 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3637 := z.DecBinary()
	_ = yym3637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3638 := r.ContainerType()
		if yyct3638 == codecSelferValueTypeMap1234 {
			yyl3638 := r.ReadMapStart()
			if yyl3638 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3638, d)
			}
		} else if yyct3638 == codecSelferValueTypeArray1234 {
			yyl3638 := r.ReadArrayStart()
			if yyl3638 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3638, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3639Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3639Slc
	var yyhl3639 bool = l >= 0
	for yyj3639 := 0; ; yyj3639++ {
		if yyhl3639 {
			if yyj3639 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3639Slc = r.DecodeBytes(yys3639Slc, true, true)
		yys3639 := string(yys3639Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3639 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3642 := z.DecBinary()
				_ = yym3642
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3645 := z.DecBinary()
				_ = yym3645
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3647 := z.DecBinary()
				_ = yym3647
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3639)
		} // end switch yys3639
	} // end for yyj3639
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3648 int
	var yyb3648 bool
	var yyhl3648 bool = l >= 0
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3651 := z.DecBinary()
		_ = yym3651
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3654 := z.DecBinary()
		_ = yym3654
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3656 := z.DecBinary()
		_ = yym3656
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3648++
		if yyhl3648 {
			yyb3648 = yyj3648 > l
		} else {
			yyb3648 = r.CheckBreak()
		}
		if yyb3648 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3648-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3657 := z.EncBinary()
		_ = yym3657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3658 := !z.EncBinary()
			yy2arr3658 := z.EncBasicHandle().StructToArray
			var yyq3658 [4]bool
			_, _, _ = yysep3658, yyq3658, yy2arr3658
			const yyr3658 bool = false
			yyq3658[0] = x.User != ""
			yyq3658[1] = x.Role != ""
			yyq3658[2] = x.Type != ""
			yyq3658[3] = x.Level != ""
			var yynn3658 int
			if yyr3658 || yy2arr3658 {
				r.EncodeArrayStart(4)
			} else {
				yynn3658 = 0
				for _, b := range yyq3658 {
					if b {
						yynn3658++
					}
				}
				r.EncodeMapStart(yynn3658)
				yynn3658 = 0
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[0] {
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[1] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[2] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[3] {
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3671 := z.DecBinary()
	_ = yym3671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3672 := r.ContainerType()
		if yyct3672 == codecSelferValueTypeMap1234 {
			yyl3672 := r.ReadMapStart()
			if yyl3672 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3672, d)
			}
		} else if yyct3672 == codecSelferValueTypeArray1234 {
			yyl3672 := r.ReadArrayStart()
			if yyl3672 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3673Slc
	var yyhl3673 bool = l >= 0
	for yyj3673 := 0; ; yyj3673++ {
		if yyhl3673 {
			if yyj3673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3673Slc = r.DecodeBytes(yys3673Slc, true, true)
		yys3673 := string(yys3673Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3673 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3673)
		} // end switch yys3673
	} // end for yyj3673
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3678 int
	var yyb3678 bool
	var yyhl3678 bool = l >= 0
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3678++
		if yyhl3678 {
			yyb3678 = yyj3678 > l
		} else {
			yyb3678 = r.CheckBreak()
		}
		if yyb3678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3683 := z.EncBinary()
		_ = yym3683
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3684 := !z.EncBinary()
			yy2arr3684 := z.EncBasicHandle().StructToArray
			var yyq3684 [5]bool
			_, _, _ = yysep3684, yyq3684, yy2arr3684
			const yyr3684 bool = false
			yyq3684[0] = x.Kind != ""
			yyq3684[1] = x.APIVersion != ""
			yyq3684[2] = true
			var yynn3684 int
			if yyr3684 || yy2arr3684 {
				r.EncodeArrayStart(5)
			} else {
				yynn3684 = 2
				for _, b := range yyq3684 {
					if b {
						yynn3684++
					}
				}
				r.EncodeMapStart(yynn3684)
				yynn3684 = 0
			}
			if yyr3684 || yy2arr3684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3684[0] {
					yym3686 := z.EncBinary()
					_ = yym3686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3684[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3684 || yy2arr3684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3684[1] {
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3684[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3684 || yy2arr3684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3684[2] {
					yy3692 := &x.ObjectMeta
					yy3692.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3684[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3693 := &x.ObjectMeta
					yy3693.CodecEncodeSelf(e)
				}
			}
			if yyr3684 || yy2arr3684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3695 := z.EncBinary()
				_ = yym3695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3696 := z.EncBinary()
				_ = yym3696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3684 || yy2arr3684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3699 := z.EncBinary()
					_ = yym3699
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3684 || yy2arr3684 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3700 := z.DecBinary()
	_ = yym3700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3701 := r.ContainerType()
		if yyct3701 == codecSelferValueTypeMap1234 {
			yyl3701 := r.ReadMapStart()
			if yyl3701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3701, d)
			}
		} else if yyct3701 == codecSelferValueTypeArray1234 {
			yyl3701 := r.ReadArrayStart()
			if yyl3701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3702Slc
	var yyhl3702 bool = l >= 0
	for yyj3702 := 0; ; yyj3702++ {
		if yyhl3702 {
			if yyj3702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3702Slc = r.DecodeBytes(yys3702Slc, true, true)
		yys3702 := string(yys3702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3702 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3705 := &x.ObjectMeta
				yyv3705.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3707 := &x.Data
				yym3708 := z.DecBinary()
				_ = yym3708
				if false {
				} else {
					*yyv3707 = r.DecodeBytes(*(*[]byte)(yyv3707), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3702)
		} // end switch yys3702
	} // end for yyj3702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3709 int
	var yyb3709 bool
	var yyhl3709 bool = l >= 0
	yyj3709++
	if yyhl3709 {
		yyb3709 = yyj3709 > l
	} else {
		yyb3709 = r.CheckBreak()
	}
	if yyb3709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3709++
	if yyhl3709 {
		yyb3709 = yyj3709 > l
	} else {
		yyb3709 = r.CheckBreak()
	}
	if yyb3709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3709++
	if yyhl3709 {
		yyb3709 = yyj3709 > l
	} else {
		yyb3709 = r.CheckBreak()
	}
	if yyb3709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3712 := &x.ObjectMeta
		yyv3712.CodecDecodeSelf(d)
	}
	yyj3709++
	if yyhl3709 {
		yyb3709 = yyj3709 > l
	} else {
		yyb3709 = r.CheckBreak()
	}
	if yyb3709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3709++
	if yyhl3709 {
		yyb3709 = yyj3709 > l
	} else {
		yyb3709 = r.CheckBreak()
	}
	if yyb3709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3714 := &x.Data
		yym3715 := z.DecBinary()
		_ = yym3715
		if false {
		} else {
			*yyv3714 = r.DecodeBytes(*(*[]byte)(yyv3714), false, false)
		}
	}
	for {
		yyj3709++
		if yyhl3709 {
			yyb3709 = yyj3709 > l
		} else {
			yyb3709 = r.CheckBreak()
		}
		if yyb3709 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3709-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3716 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3717 := *v
	yyh3717, yyl3717 := z.DecSliceHelperStart()
	var yyc3717 bool
	if yyl3717 == 0 {
		if yyv3717 == nil {
			yyv3717 = []PersistentVolumeAccessMode{}
			yyc3717 = true
		} else if len(yyv3717) != 0 {
			yyv3717 = yyv3717[:0]
			yyc3717 = true
		}
	} else if yyl3717 > 0 {
		var yyrr3717, yyrl3717 int
		var yyrt3717 bool
		if yyl3717 > cap(yyv3717) {

			yyrl3717, yyrt3717 = z.DecInferLen(yyl3717, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3717 {
				if yyrl3717 <= cap(yyv3717) {
					yyv3717 = yyv3717[:yyrl3717]
				} else {
					yyv3717 = make([]PersistentVolumeAccessMode, yyrl3717)
				}
			} else {
				yyv3717 = make([]PersistentVolumeAccessMode, yyrl3717)
			}
			yyc3717 = true
			yyrr3717 = len(yyv3717)
		} else if yyl3717 != len(yyv3717) {
			yyv3717 = yyv3717[:yyl3717]
			yyc3717 = true
		}
		yyj3717 := 0
		for ; yyj3717 < yyrr3717; yyj3717++ {
			yyh3717.ElemContainerState(yyj3717)
			if r.TryDecodeAsNil() {
				yyv3717[yyj3717] = ""
			} else {
				yyv3717[yyj3717] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3717 {
			for ; yyj3717 < yyl3717; yyj3717++ {
				yyv3717 = append(yyv3717, "")
				yyh3717.ElemContainerState(yyj3717)
				if r.TryDecodeAsNil() {
					yyv3717[yyj3717] = ""
				} else {
					yyv3717[yyj3717] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3717 := 0
		for ; !r.CheckBreak(); yyj3717++ {

			if yyj3717 >= len(yyv3717) {
				yyv3717 = append(yyv3717, "") // var yyz3717 PersistentVolumeAccessMode
				yyc3717 = true
			}
			yyh3717.ElemContainerState(yyj3717)
			if yyj3717 < len(yyv3717) {
				if r.TryDecodeAsNil() {
					yyv3717[yyj3717] = ""
				} else {
					yyv3717[yyj3717] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3717 < len(yyv3717) {
			yyv3717 = yyv3717[:yyj3717]
			yyc3717 = true
		} else if yyj3717 == 0 && yyv3717 == nil {
			yyv3717 = []PersistentVolumeAccessMode{}
			yyc3717 = true
		}
	}
	yyh3717.End()
	if yyc3717 {
		*v = yyv3717
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3722 := &yyv3721
		yy3722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3723 := *v
	yyh3723, yyl3723 := z.DecSliceHelperStart()
	var yyc3723 bool
	if yyl3723 == 0 {
		if yyv3723 == nil {
			yyv3723 = []PersistentVolume{}
			yyc3723 = true
		} else if len(yyv3723) != 0 {
			yyv3723 = yyv3723[:0]
			yyc3723 = true
		}
	} else if yyl3723 > 0 {
		var yyrr3723, yyrl3723 int
		var yyrt3723 bool
		if yyl3723 > cap(yyv3723) {

			yyrg3723 := len(yyv3723) > 0
			yyv23723 := yyv3723
			yyrl3723, yyrt3723 = z.DecInferLen(yyl3723, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt3723 {
				if yyrl3723 <= cap(yyv3723) {
					yyv3723 = yyv3723[:yyrl3723]
				} else {
					yyv3723 = make([]PersistentVolume, yyrl3723)
				}
			} else {
				yyv3723 = make([]PersistentVolume, yyrl3723)
			}
			yyc3723 = true
			yyrr3723 = len(yyv3723)
			if yyrg3723 {
				copy(yyv3723, yyv23723)
			}
		} else if yyl3723 != len(yyv3723) {
			yyv3723 = yyv3723[:yyl3723]
			yyc3723 = true
		}
		yyj3723 := 0
		for ; yyj3723 < yyrr3723; yyj3723++ {
			yyh3723.ElemContainerState(yyj3723)
			if r.TryDecodeAsNil() {
				yyv3723[yyj3723] = PersistentVolume{}
			} else {
				yyv3724 := &yyv3723[yyj3723]
				yyv3724.CodecDecodeSelf(d)
			}

		}
		if yyrt3723 {
			for ; yyj3723 < yyl3723; yyj3723++ {
				yyv3723 = append(yyv3723, PersistentVolume{})
				yyh3723.ElemContainerState(yyj3723)
				if r.TryDecodeAsNil() {
					yyv3723[yyj3723] = PersistentVolume{}
				} else {
					yyv3725 := &yyv3723[yyj3723]
					yyv3725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3723 := 0
		for ; !r.CheckBreak(); yyj3723++ {

			if yyj3723 >= len(yyv3723) {
				yyv3723 = append(yyv3723, PersistentVolume{}) // var yyz3723 PersistentVolume
				yyc3723 = true
			}
			yyh3723.ElemContainerState(yyj3723)
			if yyj3723 < len(yyv3723) {
				if r.TryDecodeAsNil() {
					yyv3723[yyj3723] = PersistentVolume{}
				} else {
					yyv3726 := &yyv3723[yyj3723]
					yyv3726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3723 < len(yyv3723) {
			yyv3723 = yyv3723[:yyj3723]
			yyc3723 = true
		} else if yyj3723 == 0 && yyv3723 == nil {
			yyv3723 = []PersistentVolume{}
			yyc3723 = true
		}
	}
	yyh3723.End()
	if yyc3723 {
		*v = yyv3723
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3727 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3728 := &yyv3727
		yy3728.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3729 := *v
	yyh3729, yyl3729 := z.DecSliceHelperStart()
	var yyc3729 bool
	if yyl3729 == 0 {
		if yyv3729 == nil {
			yyv3729 = []PersistentVolumeClaim{}
			yyc3729 = true
		} else if len(yyv3729) != 0 {
			yyv3729 = yyv3729[:0]
			yyc3729 = true
		}
	} else if yyl3729 > 0 {
		var yyrr3729, yyrl3729 int
		var yyrt3729 bool
		if yyl3729 > cap(yyv3729) {

			yyrg3729 := len(yyv3729) > 0
			yyv23729 := yyv3729
			yyrl3729, yyrt3729 = z.DecInferLen(yyl3729, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3729 {
				if yyrl3729 <= cap(yyv3729) {
					yyv3729 = yyv3729[:yyrl3729]
				} else {
					yyv3729 = make([]PersistentVolumeClaim, yyrl3729)
				}
			} else {
				yyv3729 = make([]PersistentVolumeClaim, yyrl3729)
			}
			yyc3729 = true
			yyrr3729 = len(yyv3729)
			if yyrg3729 {
				copy(yyv3729, yyv23729)
			}
		} else if yyl3729 != len(yyv3729) {
			yyv3729 = yyv3729[:yyl3729]
			yyc3729 = true
		}
		yyj3729 := 0
		for ; yyj3729 < yyrr3729; yyj3729++ {
			yyh3729.ElemContainerState(yyj3729)
			if r.TryDecodeAsNil() {
				yyv3729[yyj3729] = PersistentVolumeClaim{}
			} else {
				yyv3730 := &yyv3729[yyj3729]
				yyv3730.CodecDecodeSelf(d)
			}

		}
		if yyrt3729 {
			for ; yyj3729 < yyl3729; yyj3729++ {
				yyv3729 = append(yyv3729, PersistentVolumeClaim{})
				yyh3729.ElemContainerState(yyj3729)
				if r.TryDecodeAsNil() {
					yyv3729[yyj3729] = PersistentVolumeClaim{}
				} else {
					yyv3731 := &yyv3729[yyj3729]
					yyv3731.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3729 := 0
		for ; !r.CheckBreak(); yyj3729++ {

			if yyj3729 >= len(yyv3729) {
				yyv3729 = append(yyv3729, PersistentVolumeClaim{}) // var yyz3729 PersistentVolumeClaim
				yyc3729 = true
			}
			yyh3729.ElemContainerState(yyj3729)
			if yyj3729 < len(yyv3729) {
				if r.TryDecodeAsNil() {
					yyv3729[yyj3729] = PersistentVolumeClaim{}
				} else {
					yyv3732 := &yyv3729[yyj3729]
					yyv3732.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3729 < len(yyv3729) {
			yyv3729 = yyv3729[:yyj3729]
			yyc3729 = true
		} else if yyj3729 == 0 && yyv3729 == nil {
			yyv3729 = []PersistentVolumeClaim{}
			yyc3729 = true
		}
	}
	yyh3729.End()
	if yyc3729 {
		*v = yyv3729
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3733 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3734 := &yyv3733
		yy3734.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3735 := *v
	yyh3735, yyl3735 := z.DecSliceHelperStart()
	var yyc3735 bool
	if yyl3735 == 0 {
		if yyv3735 == nil {
			yyv3735 = []DownwardAPIVolumeFile{}
			yyc3735 = true
		} else if len(yyv3735) != 0 {
			yyv3735 = yyv3735[:0]
			yyc3735 = true
		}
	} else if yyl3735 > 0 {
		var yyrr3735, yyrl3735 int
		var yyrt3735 bool
		if yyl3735 > cap(yyv3735) {

			yyrg3735 := len(yyv3735) > 0
			yyv23735 := yyv3735
			yyrl3735, yyrt3735 = z.DecInferLen(yyl3735, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3735 {
				if yyrl3735 <= cap(yyv3735) {
					yyv3735 = yyv3735[:yyrl3735]
				} else {
					yyv3735 = make([]DownwardAPIVolumeFile, yyrl3735)
				}
			} else {
				yyv3735 = make([]DownwardAPIVolumeFile, yyrl3735)
			}
			yyc3735 = true
			yyrr3735 = len(yyv3735)
			if yyrg3735 {
				copy(yyv3735, yyv23735)
			}
		} else if yyl3735 != len(yyv3735) {
			yyv3735 = yyv3735[:yyl3735]
			yyc3735 = true
		}
		yyj3735 := 0
		for ; yyj3735 < yyrr3735; yyj3735++ {
			yyh3735.ElemContainerState(yyj3735)
			if r.TryDecodeAsNil() {
				yyv3735[yyj3735] = DownwardAPIVolumeFile{}
			} else {
				yyv3736 := &yyv3735[yyj3735]
				yyv3736.CodecDecodeSelf(d)
			}

		}
		if yyrt3735 {
			for ; yyj3735 < yyl3735; yyj3735++ {
				yyv3735 = append(yyv3735, DownwardAPIVolumeFile{})
				yyh3735.ElemContainerState(yyj3735)
				if r.TryDecodeAsNil() {
					yyv3735[yyj3735] = DownwardAPIVolumeFile{}
				} else {
					yyv3737 := &yyv3735[yyj3735]
					yyv3737.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3735 := 0
		for ; !r.CheckBreak(); yyj3735++ {

			if yyj3735 >= len(yyv3735) {
				yyv3735 = append(yyv3735, DownwardAPIVolumeFile{}) // var yyz3735 DownwardAPIVolumeFile
				yyc3735 = true
			}
			yyh3735.ElemContainerState(yyj3735)
			if yyj3735 < len(yyv3735) {
				if r.TryDecodeAsNil() {
					yyv3735[yyj3735] = DownwardAPIVolumeFile{}
				} else {
					yyv3738 := &yyv3735[yyj3735]
					yyv3738.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3735 < len(yyv3735) {
			yyv3735 = yyv3735[:yyj3735]
			yyc3735 = true
		} else if yyj3735 == 0 && yyv3735 == nil {
			yyv3735 = []DownwardAPIVolumeFile{}
			yyc3735 = true
		}
	}
	yyh3735.End()
	if yyc3735 {
		*v = yyv3735
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3739 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3740 := *v
	yyh3740, yyl3740 := z.DecSliceHelperStart()
	var yyc3740 bool
	if yyl3740 == 0 {
		if yyv3740 == nil {
			yyv3740 = []Capability{}
			yyc3740 = true
		} else if len(yyv3740) != 0 {
			yyv3740 = yyv3740[:0]
			yyc3740 = true
		}
	} else if yyl3740 > 0 {
		var yyrr3740, yyrl3740 int
		var yyrt3740 bool
		if yyl3740 > cap(yyv3740) {

			yyrl3740, yyrt3740 = z.DecInferLen(yyl3740, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3740 {
				if yyrl3740 <= cap(yyv3740) {
					yyv3740 = yyv3740[:yyrl3740]
				} else {
					yyv3740 = make([]Capability, yyrl3740)
				}
			} else {
				yyv3740 = make([]Capability, yyrl3740)
			}
			yyc3740 = true
			yyrr3740 = len(yyv3740)
		} else if yyl3740 != len(yyv3740) {
			yyv3740 = yyv3740[:yyl3740]
			yyc3740 = true
		}
		yyj3740 := 0
		for ; yyj3740 < yyrr3740; yyj3740++ {
			yyh3740.ElemContainerState(yyj3740)
			if r.TryDecodeAsNil() {
				yyv3740[yyj3740] = ""
			} else {
				yyv3740[yyj3740] = Capability(r.DecodeString())
			}

		}
		if yyrt3740 {
			for ; yyj3740 < yyl3740; yyj3740++ {
				yyv3740 = append(yyv3740, "")
				yyh3740.ElemContainerState(yyj3740)
				if r.TryDecodeAsNil() {
					yyv3740[yyj3740] = ""
				} else {
					yyv3740[yyj3740] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3740 := 0
		for ; !r.CheckBreak(); yyj3740++ {

			if yyj3740 >= len(yyv3740) {
				yyv3740 = append(yyv3740, "") // var yyz3740 Capability
				yyc3740 = true
			}
			yyh3740.ElemContainerState(yyj3740)
			if yyj3740 < len(yyv3740) {
				if r.TryDecodeAsNil() {
					yyv3740[yyj3740] = ""
				} else {
					yyv3740[yyj3740] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3740 < len(yyv3740) {
			yyv3740 = yyv3740[:yyj3740]
			yyc3740 = true
		} else if yyj3740 == 0 && yyv3740 == nil {
			yyv3740 = []Capability{}
			yyc3740 = true
		}
	}
	yyh3740.End()
	if yyc3740 {
		*v = yyv3740
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3745 := &yyv3744
		yy3745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3746 := *v
	yyh3746, yyl3746 := z.DecSliceHelperStart()
	var yyc3746 bool
	if yyl3746 == 0 {
		if yyv3746 == nil {
			yyv3746 = []ContainerPort{}
			yyc3746 = true
		} else if len(yyv3746) != 0 {
			yyv3746 = yyv3746[:0]
			yyc3746 = true
		}
	} else if yyl3746 > 0 {
		var yyrr3746, yyrl3746 int
		var yyrt3746 bool
		if yyl3746 > cap(yyv3746) {

			yyrg3746 := len(yyv3746) > 0
			yyv23746 := yyv3746
			yyrl3746, yyrt3746 = z.DecInferLen(yyl3746, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3746 {
				if yyrl3746 <= cap(yyv3746) {
					yyv3746 = yyv3746[:yyrl3746]
				} else {
					yyv3746 = make([]ContainerPort, yyrl3746)
				}
			} else {
				yyv3746 = make([]ContainerPort, yyrl3746)
			}
			yyc3746 = true
			yyrr3746 = len(yyv3746)
			if yyrg3746 {
				copy(yyv3746, yyv23746)
			}
		} else if yyl3746 != len(yyv3746) {
			yyv3746 = yyv3746[:yyl3746]
			yyc3746 = true
		}
		yyj3746 := 0
		for ; yyj3746 < yyrr3746; yyj3746++ {
			yyh3746.ElemContainerState(yyj3746)
			if r.TryDecodeAsNil() {
				yyv3746[yyj3746] = ContainerPort{}
			} else {
				yyv3747 := &yyv3746[yyj3746]
				yyv3747.CodecDecodeSelf(d)
			}

		}
		if yyrt3746 {
			for ; yyj3746 < yyl3746; yyj3746++ {
				yyv3746 = append(yyv3746, ContainerPort{})
				yyh3746.ElemContainerState(yyj3746)
				if r.TryDecodeAsNil() {
					yyv3746[yyj3746] = ContainerPort{}
				} else {
					yyv3748 := &yyv3746[yyj3746]
					yyv3748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3746 := 0
		for ; !r.CheckBreak(); yyj3746++ {

			if yyj3746 >= len(yyv3746) {
				yyv3746 = append(yyv3746, ContainerPort{}) // var yyz3746 ContainerPort
				yyc3746 = true
			}
			yyh3746.ElemContainerState(yyj3746)
			if yyj3746 < len(yyv3746) {
				if r.TryDecodeAsNil() {
					yyv3746[yyj3746] = ContainerPort{}
				} else {
					yyv3749 := &yyv3746[yyj3746]
					yyv3749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3746 < len(yyv3746) {
			yyv3746 = yyv3746[:yyj3746]
			yyc3746 = true
		} else if yyj3746 == 0 && yyv3746 == nil {
			yyv3746 = []ContainerPort{}
			yyc3746 = true
		}
	}
	yyh3746.End()
	if yyc3746 {
		*v = yyv3746
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3750 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3751 := &yyv3750
		yy3751.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3752 := *v
	yyh3752, yyl3752 := z.DecSliceHelperStart()
	var yyc3752 bool
	if yyl3752 == 0 {
		if yyv3752 == nil {
			yyv3752 = []EnvVar{}
			yyc3752 = true
		} else if len(yyv3752) != 0 {
			yyv3752 = yyv3752[:0]
			yyc3752 = true
		}
	} else if yyl3752 > 0 {
		var yyrr3752, yyrl3752 int
		var yyrt3752 bool
		if yyl3752 > cap(yyv3752) {

			yyrg3752 := len(yyv3752) > 0
			yyv23752 := yyv3752
			yyrl3752, yyrt3752 = z.DecInferLen(yyl3752, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3752 {
				if yyrl3752 <= cap(yyv3752) {
					yyv3752 = yyv3752[:yyrl3752]
				} else {
					yyv3752 = make([]EnvVar, yyrl3752)
				}
			} else {
				yyv3752 = make([]EnvVar, yyrl3752)
			}
			yyc3752 = true
			yyrr3752 = len(yyv3752)
			if yyrg3752 {
				copy(yyv3752, yyv23752)
			}
		} else if yyl3752 != len(yyv3752) {
			yyv3752 = yyv3752[:yyl3752]
			yyc3752 = true
		}
		yyj3752 := 0
		for ; yyj3752 < yyrr3752; yyj3752++ {
			yyh3752.ElemContainerState(yyj3752)
			if r.TryDecodeAsNil() {
				yyv3752[yyj3752] = EnvVar{}
			} else {
				yyv3753 := &yyv3752[yyj3752]
				yyv3753.CodecDecodeSelf(d)
			}

		}
		if yyrt3752 {
			for ; yyj3752 < yyl3752; yyj3752++ {
				yyv3752 = append(yyv3752, EnvVar{})
				yyh3752.ElemContainerState(yyj3752)
				if r.TryDecodeAsNil() {
					yyv3752[yyj3752] = EnvVar{}
				} else {
					yyv3754 := &yyv3752[yyj3752]
					yyv3754.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3752 := 0
		for ; !r.CheckBreak(); yyj3752++ {

			if yyj3752 >= len(yyv3752) {
				yyv3752 = append(yyv3752, EnvVar{}) // var yyz3752 EnvVar
				yyc3752 = true
			}
			yyh3752.ElemContainerState(yyj3752)
			if yyj3752 < len(yyv3752) {
				if r.TryDecodeAsNil() {
					yyv3752[yyj3752] = EnvVar{}
				} else {
					yyv3755 := &yyv3752[yyj3752]
					yyv3755.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3752 < len(yyv3752) {
			yyv3752 = yyv3752[:yyj3752]
			yyc3752 = true
		} else if yyj3752 == 0 && yyv3752 == nil {
			yyv3752 = []EnvVar{}
			yyc3752 = true
		}
	}
	yyh3752.End()
	if yyc3752 {
		*v = yyv3752
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3756 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3757 := &yyv3756
		yy3757.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3758 := *v
	yyh3758, yyl3758 := z.DecSliceHelperStart()
	var yyc3758 bool
	if yyl3758 == 0 {
		if yyv3758 == nil {
			yyv3758 = []VolumeMount{}
			yyc3758 = true
		} else if len(yyv3758) != 0 {
			yyv3758 = yyv3758[:0]
			yyc3758 = true
		}
	} else if yyl3758 > 0 {
		var yyrr3758, yyrl3758 int
		var yyrt3758 bool
		if yyl3758 > cap(yyv3758) {

			yyrg3758 := len(yyv3758) > 0
			yyv23758 := yyv3758
			yyrl3758, yyrt3758 = z.DecInferLen(yyl3758, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3758 {
				if yyrl3758 <= cap(yyv3758) {
					yyv3758 = yyv3758[:yyrl3758]
				} else {
					yyv3758 = make([]VolumeMount, yyrl3758)
				}
			} else {
				yyv3758 = make([]VolumeMount, yyrl3758)
			}
			yyc3758 = true
			yyrr3758 = len(yyv3758)
			if yyrg3758 {
				copy(yyv3758, yyv23758)
			}
		} else if yyl3758 != len(yyv3758) {
			yyv3758 = yyv3758[:yyl3758]
			yyc3758 = true
		}
		yyj3758 := 0
		for ; yyj3758 < yyrr3758; yyj3758++ {
			yyh3758.ElemContainerState(yyj3758)
			if r.TryDecodeAsNil() {
				yyv3758[yyj3758] = VolumeMount{}
			} else {
				yyv3759 := &yyv3758[yyj3758]
				yyv3759.CodecDecodeSelf(d)
			}

		}
		if yyrt3758 {
			for ; yyj3758 < yyl3758; yyj3758++ {
				yyv3758 = append(yyv3758, VolumeMount{})
				yyh3758.ElemContainerState(yyj3758)
				if r.TryDecodeAsNil() {
					yyv3758[yyj3758] = VolumeMount{}
				} else {
					yyv3760 := &yyv3758[yyj3758]
					yyv3760.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3758 := 0
		for ; !r.CheckBreak(); yyj3758++ {

			if yyj3758 >= len(yyv3758) {
				yyv3758 = append(yyv3758, VolumeMount{}) // var yyz3758 VolumeMount
				yyc3758 = true
			}
			yyh3758.ElemContainerState(yyj3758)
			if yyj3758 < len(yyv3758) {
				if r.TryDecodeAsNil() {
					yyv3758[yyj3758] = VolumeMount{}
				} else {
					yyv3761 := &yyv3758[yyj3758]
					yyv3761.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3758 < len(yyv3758) {
			yyv3758 = yyv3758[:yyj3758]
			yyc3758 = true
		} else if yyj3758 == 0 && yyv3758 == nil {
			yyv3758 = []VolumeMount{}
			yyc3758 = true
		}
	}
	yyh3758.End()
	if yyc3758 {
		*v = yyv3758
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3762 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3763 := &yyv3762
		yy3763.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3764 := *v
	yyh3764, yyl3764 := z.DecSliceHelperStart()
	var yyc3764 bool
	if yyl3764 == 0 {
		if yyv3764 == nil {
			yyv3764 = []Pod{}
			yyc3764 = true
		} else if len(yyv3764) != 0 {
			yyv3764 = yyv3764[:0]
			yyc3764 = true
		}
	} else if yyl3764 > 0 {
		var yyrr3764, yyrl3764 int
		var yyrt3764 bool
		if yyl3764 > cap(yyv3764) {

			yyrg3764 := len(yyv3764) > 0
			yyv23764 := yyv3764
			yyrl3764, yyrt3764 = z.DecInferLen(yyl3764, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3764 {
				if yyrl3764 <= cap(yyv3764) {
					yyv3764 = yyv3764[:yyrl3764]
				} else {
					yyv3764 = make([]Pod, yyrl3764)
				}
			} else {
				yyv3764 = make([]Pod, yyrl3764)
			}
			yyc3764 = true
			yyrr3764 = len(yyv3764)
			if yyrg3764 {
				copy(yyv3764, yyv23764)
			}
		} else if yyl3764 != len(yyv3764) {
			yyv3764 = yyv3764[:yyl3764]
			yyc3764 = true
		}
		yyj3764 := 0
		for ; yyj3764 < yyrr3764; yyj3764++ {
			yyh3764.ElemContainerState(yyj3764)
			if r.TryDecodeAsNil() {
				yyv3764[yyj3764] = Pod{}
			} else {
				yyv3765 := &yyv3764[yyj3764]
				yyv3765.CodecDecodeSelf(d)
			}

		}
		if yyrt3764 {
			for ; yyj3764 < yyl3764; yyj3764++ {
				yyv3764 = append(yyv3764, Pod{})
				yyh3764.ElemContainerState(yyj3764)
				if r.TryDecodeAsNil() {
					yyv3764[yyj3764] = Pod{}
				} else {
					yyv3766 := &yyv3764[yyj3764]
					yyv3766.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3764 := 0
		for ; !r.CheckBreak(); yyj3764++ {

			if yyj3764 >= len(yyv3764) {
				yyv3764 = append(yyv3764, Pod{}) // var yyz3764 Pod
				yyc3764 = true
			}
			yyh3764.ElemContainerState(yyj3764)
			if yyj3764 < len(yyv3764) {
				if r.TryDecodeAsNil() {
					yyv3764[yyj3764] = Pod{}
				} else {
					yyv3767 := &yyv3764[yyj3764]
					yyv3767.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3764 < len(yyv3764) {
			yyv3764 = yyv3764[:yyj3764]
			yyc3764 = true
		} else if yyj3764 == 0 && yyv3764 == nil {
			yyv3764 = []Pod{}
			yyc3764 = true
		}
	}
	yyh3764.End()
	if yyc3764 {
		*v = yyv3764
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3768 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3769 := &yyv3768
		yy3769.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3770 := *v
	yyh3770, yyl3770 := z.DecSliceHelperStart()
	var yyc3770 bool
	if yyl3770 == 0 {
		if yyv3770 == nil {
			yyv3770 = []Volume{}
			yyc3770 = true
		} else if len(yyv3770) != 0 {
			yyv3770 = yyv3770[:0]
			yyc3770 = true
		}
	} else if yyl3770 > 0 {
		var yyrr3770, yyrl3770 int
		var yyrt3770 bool
		if yyl3770 > cap(yyv3770) {

			yyrg3770 := len(yyv3770) > 0
			yyv23770 := yyv3770
			yyrl3770, yyrt3770 = z.DecInferLen(yyl3770, z.DecBasicHandle().MaxInitLen, 152)
			if yyrt3770 {
				if yyrl3770 <= cap(yyv3770) {
					yyv3770 = yyv3770[:yyrl3770]
				} else {
					yyv3770 = make([]Volume, yyrl3770)
				}
			} else {
				yyv3770 = make([]Volume, yyrl3770)
			}
			yyc3770 = true
			yyrr3770 = len(yyv3770)
			if yyrg3770 {
				copy(yyv3770, yyv23770)
			}
		} else if yyl3770 != len(yyv3770) {
			yyv3770 = yyv3770[:yyl3770]
			yyc3770 = true
		}
		yyj3770 := 0
		for ; yyj3770 < yyrr3770; yyj3770++ {
			yyh3770.ElemContainerState(yyj3770)
			if r.TryDecodeAsNil() {
				yyv3770[yyj3770] = Volume{}
			} else {
				yyv3771 := &yyv3770[yyj3770]
				yyv3771.CodecDecodeSelf(d)
			}

		}
		if yyrt3770 {
			for ; yyj3770 < yyl3770; yyj3770++ {
				yyv3770 = append(yyv3770, Volume{})
				yyh3770.ElemContainerState(yyj3770)
				if r.TryDecodeAsNil() {
					yyv3770[yyj3770] = Volume{}
				} else {
					yyv3772 := &yyv3770[yyj3770]
					yyv3772.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3770 := 0
		for ; !r.CheckBreak(); yyj3770++ {

			if yyj3770 >= len(yyv3770) {
				yyv3770 = append(yyv3770, Volume{}) // var yyz3770 Volume
				yyc3770 = true
			}
			yyh3770.ElemContainerState(yyj3770)
			if yyj3770 < len(yyv3770) {
				if r.TryDecodeAsNil() {
					yyv3770[yyj3770] = Volume{}
				} else {
					yyv3773 := &yyv3770[yyj3770]
					yyv3773.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3770 < len(yyv3770) {
			yyv3770 = yyv3770[:yyj3770]
			yyc3770 = true
		} else if yyj3770 == 0 && yyv3770 == nil {
			yyv3770 = []Volume{}
			yyc3770 = true
		}
	}
	yyh3770.End()
	if yyc3770 {
		*v = yyv3770
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3775 := &yyv3774
		yy3775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3776 := *v
	yyh3776, yyl3776 := z.DecSliceHelperStart()
	var yyc3776 bool
	if yyl3776 == 0 {
		if yyv3776 == nil {
			yyv3776 = []Container{}
			yyc3776 = true
		} else if len(yyv3776) != 0 {
			yyv3776 = yyv3776[:0]
			yyc3776 = true
		}
	} else if yyl3776 > 0 {
		var yyrr3776, yyrl3776 int
		var yyrt3776 bool
		if yyl3776 > cap(yyv3776) {

			yyrg3776 := len(yyv3776) > 0
			yyv23776 := yyv3776
			yyrl3776, yyrt3776 = z.DecInferLen(yyl3776, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3776 {
				if yyrl3776 <= cap(yyv3776) {
					yyv3776 = yyv3776[:yyrl3776]
				} else {
					yyv3776 = make([]Container, yyrl3776)
				}
			} else {
				yyv3776 = make([]Container, yyrl3776)
			}
			yyc3776 = true
			yyrr3776 = len(yyv3776)
			if yyrg3776 {
				copy(yyv3776, yyv23776)
			}
		} else if yyl3776 != len(yyv3776) {
			yyv3776 = yyv3776[:yyl3776]
			yyc3776 = true
		}
		yyj3776 := 0
		for ; yyj3776 < yyrr3776; yyj3776++ {
			yyh3776.ElemContainerState(yyj3776)
			if r.TryDecodeAsNil() {
				yyv3776[yyj3776] = Container{}
			} else {
				yyv3777 := &yyv3776[yyj3776]
				yyv3777.CodecDecodeSelf(d)
			}

		}
		if yyrt3776 {
			for ; yyj3776 < yyl3776; yyj3776++ {
				yyv3776 = append(yyv3776, Container{})
				yyh3776.ElemContainerState(yyj3776)
				if r.TryDecodeAsNil() {
					yyv3776[yyj3776] = Container{}
				} else {
					yyv3778 := &yyv3776[yyj3776]
					yyv3778.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3776 := 0
		for ; !r.CheckBreak(); yyj3776++ {

			if yyj3776 >= len(yyv3776) {
				yyv3776 = append(yyv3776, Container{}) // var yyz3776 Container
				yyc3776 = true
			}
			yyh3776.ElemContainerState(yyj3776)
			if yyj3776 < len(yyv3776) {
				if r.TryDecodeAsNil() {
					yyv3776[yyj3776] = Container{}
				} else {
					yyv3779 := &yyv3776[yyj3776]
					yyv3779.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3776 < len(yyv3776) {
			yyv3776 = yyv3776[:yyj3776]
			yyc3776 = true
		} else if yyj3776 == 0 && yyv3776 == nil {
			yyv3776 = []Container{}
			yyc3776 = true
		}
	}
	yyh3776.End()
	if yyc3776 {
		*v = yyv3776
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3780 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3781 := &yyv3780
		yy3781.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3782 := *v
	yyh3782, yyl3782 := z.DecSliceHelperStart()
	var yyc3782 bool
	if yyl3782 == 0 {
		if yyv3782 == nil {
			yyv3782 = []LocalObjectReference{}
			yyc3782 = true
		} else if len(yyv3782) != 0 {
			yyv3782 = yyv3782[:0]
			yyc3782 = true
		}
	} else if yyl3782 > 0 {
		var yyrr3782, yyrl3782 int
		var yyrt3782 bool
		if yyl3782 > cap(yyv3782) {

			yyrg3782 := len(yyv3782) > 0
			yyv23782 := yyv3782
			yyrl3782, yyrt3782 = z.DecInferLen(yyl3782, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3782 {
				if yyrl3782 <= cap(yyv3782) {
					yyv3782 = yyv3782[:yyrl3782]
				} else {
					yyv3782 = make([]LocalObjectReference, yyrl3782)
				}
			} else {
				yyv3782 = make([]LocalObjectReference, yyrl3782)
			}
			yyc3782 = true
			yyrr3782 = len(yyv3782)
			if yyrg3782 {
				copy(yyv3782, yyv23782)
			}
		} else if yyl3782 != len(yyv3782) {
			yyv3782 = yyv3782[:yyl3782]
			yyc3782 = true
		}
		yyj3782 := 0
		for ; yyj3782 < yyrr3782; yyj3782++ {
			yyh3782.ElemContainerState(yyj3782)
			if r.TryDecodeAsNil() {
				yyv3782[yyj3782] = LocalObjectReference{}
			} else {
				yyv3783 := &yyv3782[yyj3782]
				yyv3783.CodecDecodeSelf(d)
			}

		}
		if yyrt3782 {
			for ; yyj3782 < yyl3782; yyj3782++ {
				yyv3782 = append(yyv3782, LocalObjectReference{})
				yyh3782.ElemContainerState(yyj3782)
				if r.TryDecodeAsNil() {
					yyv3782[yyj3782] = LocalObjectReference{}
				} else {
					yyv3784 := &yyv3782[yyj3782]
					yyv3784.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3782 := 0
		for ; !r.CheckBreak(); yyj3782++ {

			if yyj3782 >= len(yyv3782) {
				yyv3782 = append(yyv3782, LocalObjectReference{}) // var yyz3782 LocalObjectReference
				yyc3782 = true
			}
			yyh3782.ElemContainerState(yyj3782)
			if yyj3782 < len(yyv3782) {
				if r.TryDecodeAsNil() {
					yyv3782[yyj3782] = LocalObjectReference{}
				} else {
					yyv3785 := &yyv3782[yyj3782]
					yyv3785.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3782 < len(yyv3782) {
			yyv3782 = yyv3782[:yyj3782]
			yyc3782 = true
		} else if yyj3782 == 0 && yyv3782 == nil {
			yyv3782 = []LocalObjectReference{}
			yyc3782 = true
		}
	}
	yyh3782.End()
	if yyc3782 {
		*v = yyv3782
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3786 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3787 := &yyv3786
		yy3787.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3788 := *v
	yyh3788, yyl3788 := z.DecSliceHelperStart()
	var yyc3788 bool
	if yyl3788 == 0 {
		if yyv3788 == nil {
			yyv3788 = []PodCondition{}
			yyc3788 = true
		} else if len(yyv3788) != 0 {
			yyv3788 = yyv3788[:0]
			yyc3788 = true
		}
	} else if yyl3788 > 0 {
		var yyrr3788, yyrl3788 int
		var yyrt3788 bool
		if yyl3788 > cap(yyv3788) {

			yyrg3788 := len(yyv3788) > 0
			yyv23788 := yyv3788
			yyrl3788, yyrt3788 = z.DecInferLen(yyl3788, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3788 {
				if yyrl3788 <= cap(yyv3788) {
					yyv3788 = yyv3788[:yyrl3788]
				} else {
					yyv3788 = make([]PodCondition, yyrl3788)
				}
			} else {
				yyv3788 = make([]PodCondition, yyrl3788)
			}
			yyc3788 = true
			yyrr3788 = len(yyv3788)
			if yyrg3788 {
				copy(yyv3788, yyv23788)
			}
		} else if yyl3788 != len(yyv3788) {
			yyv3788 = yyv3788[:yyl3788]
			yyc3788 = true
		}
		yyj3788 := 0
		for ; yyj3788 < yyrr3788; yyj3788++ {
			yyh3788.ElemContainerState(yyj3788)
			if r.TryDecodeAsNil() {
				yyv3788[yyj3788] = PodCondition{}
			} else {
				yyv3789 := &yyv3788[yyj3788]
				yyv3789.CodecDecodeSelf(d)
			}

		}
		if yyrt3788 {
			for ; yyj3788 < yyl3788; yyj3788++ {
				yyv3788 = append(yyv3788, PodCondition{})
				yyh3788.ElemContainerState(yyj3788)
				if r.TryDecodeAsNil() {
					yyv3788[yyj3788] = PodCondition{}
				} else {
					yyv3790 := &yyv3788[yyj3788]
					yyv3790.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3788 := 0
		for ; !r.CheckBreak(); yyj3788++ {

			if yyj3788 >= len(yyv3788) {
				yyv3788 = append(yyv3788, PodCondition{}) // var yyz3788 PodCondition
				yyc3788 = true
			}
			yyh3788.ElemContainerState(yyj3788)
			if yyj3788 < len(yyv3788) {
				if r.TryDecodeAsNil() {
					yyv3788[yyj3788] = PodCondition{}
				} else {
					yyv3791 := &yyv3788[yyj3788]
					yyv3791.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3788 < len(yyv3788) {
			yyv3788 = yyv3788[:yyj3788]
			yyc3788 = true
		} else if yyj3788 == 0 && yyv3788 == nil {
			yyv3788 = []PodCondition{}
			yyc3788 = true
		}
	}
	yyh3788.End()
	if yyc3788 {
		*v = yyv3788
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3792 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3793 := &yyv3792
		yy3793.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3794 := *v
	yyh3794, yyl3794 := z.DecSliceHelperStart()
	var yyc3794 bool
	if yyl3794 == 0 {
		if yyv3794 == nil {
			yyv3794 = []ContainerStatus{}
			yyc3794 = true
		} else if len(yyv3794) != 0 {
			yyv3794 = yyv3794[:0]
			yyc3794 = true
		}
	} else if yyl3794 > 0 {
		var yyrr3794, yyrl3794 int
		var yyrt3794 bool
		if yyl3794 > cap(yyv3794) {

			yyrg3794 := len(yyv3794) > 0
			yyv23794 := yyv3794
			yyrl3794, yyrt3794 = z.DecInferLen(yyl3794, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3794 {
				if yyrl3794 <= cap(yyv3794) {
					yyv3794 = yyv3794[:yyrl3794]
				} else {
					yyv3794 = make([]ContainerStatus, yyrl3794)
				}
			} else {
				yyv3794 = make([]ContainerStatus, yyrl3794)
			}
			yyc3794 = true
			yyrr3794 = len(yyv3794)
			if yyrg3794 {
				copy(yyv3794, yyv23794)
			}
		} else if yyl3794 != len(yyv3794) {
			yyv3794 = yyv3794[:yyl3794]
			yyc3794 = true
		}
		yyj3794 := 0
		for ; yyj3794 < yyrr3794; yyj3794++ {
			yyh3794.ElemContainerState(yyj3794)
			if r.TryDecodeAsNil() {
				yyv3794[yyj3794] = ContainerStatus{}
			} else {
				yyv3795 := &yyv3794[yyj3794]
				yyv3795.CodecDecodeSelf(d)
			}

		}
		if yyrt3794 {
			for ; yyj3794 < yyl3794; yyj3794++ {
				yyv3794 = append(yyv3794, ContainerStatus{})
				yyh3794.ElemContainerState(yyj3794)
				if r.TryDecodeAsNil() {
					yyv3794[yyj3794] = ContainerStatus{}
				} else {
					yyv3796 := &yyv3794[yyj3794]
					yyv3796.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3794 := 0
		for ; !r.CheckBreak(); yyj3794++ {

			if yyj3794 >= len(yyv3794) {
				yyv3794 = append(yyv3794, ContainerStatus{}) // var yyz3794 ContainerStatus
				yyc3794 = true
			}
			yyh3794.ElemContainerState(yyj3794)
			if yyj3794 < len(yyv3794) {
				if r.TryDecodeAsNil() {
					yyv3794[yyj3794] = ContainerStatus{}
				} else {
					yyv3797 := &yyv3794[yyj3794]
					yyv3797.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3794 < len(yyv3794) {
			yyv3794 = yyv3794[:yyj3794]
			yyc3794 = true
		} else if yyj3794 == 0 && yyv3794 == nil {
			yyv3794 = []ContainerStatus{}
			yyc3794 = true
		}
	}
	yyh3794.End()
	if yyc3794 {
		*v = yyv3794
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3798 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3799 := &yyv3798
		yy3799.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3800 := *v
	yyh3800, yyl3800 := z.DecSliceHelperStart()
	var yyc3800 bool
	if yyl3800 == 0 {
		if yyv3800 == nil {
			yyv3800 = []PodTemplate{}
			yyc3800 = true
		} else if len(yyv3800) != 0 {
			yyv3800 = yyv3800[:0]
			yyc3800 = true
		}
	} else if yyl3800 > 0 {
		var yyrr3800, yyrl3800 int
		var yyrt3800 bool
		if yyl3800 > cap(yyv3800) {

			yyrg3800 := len(yyv3800) > 0
			yyv23800 := yyv3800
			yyrl3800, yyrt3800 = z.DecInferLen(yyl3800, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3800 {
				if yyrl3800 <= cap(yyv3800) {
					yyv3800 = yyv3800[:yyrl3800]
				} else {
					yyv3800 = make([]PodTemplate, yyrl3800)
				}
			} else {
				yyv3800 = make([]PodTemplate, yyrl3800)
			}
			yyc3800 = true
			yyrr3800 = len(yyv3800)
			if yyrg3800 {
				copy(yyv3800, yyv23800)
			}
		} else if yyl3800 != len(yyv3800) {
			yyv3800 = yyv3800[:yyl3800]
			yyc3800 = true
		}
		yyj3800 := 0
		for ; yyj3800 < yyrr3800; yyj3800++ {
			yyh3800.ElemContainerState(yyj3800)
			if r.TryDecodeAsNil() {
				yyv3800[yyj3800] = PodTemplate{}
			} else {
				yyv3801 := &yyv3800[yyj3800]
				yyv3801.CodecDecodeSelf(d)
			}

		}
		if yyrt3800 {
			for ; yyj3800 < yyl3800; yyj3800++ {
				yyv3800 = append(yyv3800, PodTemplate{})
				yyh3800.ElemContainerState(yyj3800)
				if r.TryDecodeAsNil() {
					yyv3800[yyj3800] = PodTemplate{}
				} else {
					yyv3802 := &yyv3800[yyj3800]
					yyv3802.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3800 := 0
		for ; !r.CheckBreak(); yyj3800++ {

			if yyj3800 >= len(yyv3800) {
				yyv3800 = append(yyv3800, PodTemplate{}) // var yyz3800 PodTemplate
				yyc3800 = true
			}
			yyh3800.ElemContainerState(yyj3800)
			if yyj3800 < len(yyv3800) {
				if r.TryDecodeAsNil() {
					yyv3800[yyj3800] = PodTemplate{}
				} else {
					yyv3803 := &yyv3800[yyj3800]
					yyv3803.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3800 < len(yyv3800) {
			yyv3800 = yyv3800[:yyj3800]
			yyc3800 = true
		} else if yyj3800 == 0 && yyv3800 == nil {
			yyv3800 = []PodTemplate{}
			yyc3800 = true
		}
	}
	yyh3800.End()
	if yyc3800 {
		*v = yyv3800
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3804 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3805 := &yyv3804
		yy3805.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3806 := *v
	yyh3806, yyl3806 := z.DecSliceHelperStart()
	var yyc3806 bool
	if yyl3806 == 0 {
		if yyv3806 == nil {
			yyv3806 = []ReplicationController{}
			yyc3806 = true
		} else if len(yyv3806) != 0 {
			yyv3806 = yyv3806[:0]
			yyc3806 = true
		}
	} else if yyl3806 > 0 {
		var yyrr3806, yyrl3806 int
		var yyrt3806 bool
		if yyl3806 > cap(yyv3806) {

			yyrg3806 := len(yyv3806) > 0
			yyv23806 := yyv3806
			yyrl3806, yyrt3806 = z.DecInferLen(yyl3806, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3806 {
				if yyrl3806 <= cap(yyv3806) {
					yyv3806 = yyv3806[:yyrl3806]
				} else {
					yyv3806 = make([]ReplicationController, yyrl3806)
				}
			} else {
				yyv3806 = make([]ReplicationController, yyrl3806)
			}
			yyc3806 = true
			yyrr3806 = len(yyv3806)
			if yyrg3806 {
				copy(yyv3806, yyv23806)
			}
		} else if yyl3806 != len(yyv3806) {
			yyv3806 = yyv3806[:yyl3806]
			yyc3806 = true
		}
		yyj3806 := 0
		for ; yyj3806 < yyrr3806; yyj3806++ {
			yyh3806.ElemContainerState(yyj3806)
			if r.TryDecodeAsNil() {
				yyv3806[yyj3806] = ReplicationController{}
			} else {
				yyv3807 := &yyv3806[yyj3806]
				yyv3807.CodecDecodeSelf(d)
			}

		}
		if yyrt3806 {
			for ; yyj3806 < yyl3806; yyj3806++ {
				yyv3806 = append(yyv3806, ReplicationController{})
				yyh3806.ElemContainerState(yyj3806)
				if r.TryDecodeAsNil() {
					yyv3806[yyj3806] = ReplicationController{}
				} else {
					yyv3808 := &yyv3806[yyj3806]
					yyv3808.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3806 := 0
		for ; !r.CheckBreak(); yyj3806++ {

			if yyj3806 >= len(yyv3806) {
				yyv3806 = append(yyv3806, ReplicationController{}) // var yyz3806 ReplicationController
				yyc3806 = true
			}
			yyh3806.ElemContainerState(yyj3806)
			if yyj3806 < len(yyv3806) {
				if r.TryDecodeAsNil() {
					yyv3806[yyj3806] = ReplicationController{}
				} else {
					yyv3809 := &yyv3806[yyj3806]
					yyv3809.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3806 < len(yyv3806) {
			yyv3806 = yyv3806[:yyj3806]
			yyc3806 = true
		} else if yyj3806 == 0 && yyv3806 == nil {
			yyv3806 = []ReplicationController{}
			yyc3806 = true
		}
	}
	yyh3806.End()
	if yyc3806 {
		*v = yyv3806
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3810 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3811 := &yyv3810
		yy3811.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3812 := *v
	yyh3812, yyl3812 := z.DecSliceHelperStart()
	var yyc3812 bool
	if yyl3812 == 0 {
		if yyv3812 == nil {
			yyv3812 = []Service{}
			yyc3812 = true
		} else if len(yyv3812) != 0 {
			yyv3812 = yyv3812[:0]
			yyc3812 = true
		}
	} else if yyl3812 > 0 {
		var yyrr3812, yyrl3812 int
		var yyrt3812 bool
		if yyl3812 > cap(yyv3812) {

			yyrg3812 := len(yyv3812) > 0
			yyv23812 := yyv3812
			yyrl3812, yyrt3812 = z.DecInferLen(yyl3812, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3812 {
				if yyrl3812 <= cap(yyv3812) {
					yyv3812 = yyv3812[:yyrl3812]
				} else {
					yyv3812 = make([]Service, yyrl3812)
				}
			} else {
				yyv3812 = make([]Service, yyrl3812)
			}
			yyc3812 = true
			yyrr3812 = len(yyv3812)
			if yyrg3812 {
				copy(yyv3812, yyv23812)
			}
		} else if yyl3812 != len(yyv3812) {
			yyv3812 = yyv3812[:yyl3812]
			yyc3812 = true
		}
		yyj3812 := 0
		for ; yyj3812 < yyrr3812; yyj3812++ {
			yyh3812.ElemContainerState(yyj3812)
			if r.TryDecodeAsNil() {
				yyv3812[yyj3812] = Service{}
			} else {
				yyv3813 := &yyv3812[yyj3812]
				yyv3813.CodecDecodeSelf(d)
			}

		}
		if yyrt3812 {
			for ; yyj3812 < yyl3812; yyj3812++ {
				yyv3812 = append(yyv3812, Service{})
				yyh3812.ElemContainerState(yyj3812)
				if r.TryDecodeAsNil() {
					yyv3812[yyj3812] = Service{}
				} else {
					yyv3814 := &yyv3812[yyj3812]
					yyv3814.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3812 := 0
		for ; !r.CheckBreak(); yyj3812++ {

			if yyj3812 >= len(yyv3812) {
				yyv3812 = append(yyv3812, Service{}) // var yyz3812 Service
				yyc3812 = true
			}
			yyh3812.ElemContainerState(yyj3812)
			if yyj3812 < len(yyv3812) {
				if r.TryDecodeAsNil() {
					yyv3812[yyj3812] = Service{}
				} else {
					yyv3815 := &yyv3812[yyj3812]
					yyv3815.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3812 < len(yyv3812) {
			yyv3812 = yyv3812[:yyj3812]
			yyc3812 = true
		} else if yyj3812 == 0 && yyv3812 == nil {
			yyv3812 = []Service{}
			yyc3812 = true
		}
	}
	yyh3812.End()
	if yyc3812 {
		*v = yyv3812
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3816 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3817 := &yyv3816
		yy3817.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3818 := *v
	yyh3818, yyl3818 := z.DecSliceHelperStart()
	var yyc3818 bool
	if yyl3818 == 0 {
		if yyv3818 == nil {
			yyv3818 = []LoadBalancerIngress{}
			yyc3818 = true
		} else if len(yyv3818) != 0 {
			yyv3818 = yyv3818[:0]
			yyc3818 = true
		}
	} else if yyl3818 > 0 {
		var yyrr3818, yyrl3818 int
		var yyrt3818 bool
		if yyl3818 > cap(yyv3818) {

			yyrg3818 := len(yyv3818) > 0
			yyv23818 := yyv3818
			yyrl3818, yyrt3818 = z.DecInferLen(yyl3818, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3818 {
				if yyrl3818 <= cap(yyv3818) {
					yyv3818 = yyv3818[:yyrl3818]
				} else {
					yyv3818 = make([]LoadBalancerIngress, yyrl3818)
				}
			} else {
				yyv3818 = make([]LoadBalancerIngress, yyrl3818)
			}
			yyc3818 = true
			yyrr3818 = len(yyv3818)
			if yyrg3818 {
				copy(yyv3818, yyv23818)
			}
		} else if yyl3818 != len(yyv3818) {
			yyv3818 = yyv3818[:yyl3818]
			yyc3818 = true
		}
		yyj3818 := 0
		for ; yyj3818 < yyrr3818; yyj3818++ {
			yyh3818.ElemContainerState(yyj3818)
			if r.TryDecodeAsNil() {
				yyv3818[yyj3818] = LoadBalancerIngress{}
			} else {
				yyv3819 := &yyv3818[yyj3818]
				yyv3819.CodecDecodeSelf(d)
			}

		}
		if yyrt3818 {
			for ; yyj3818 < yyl3818; yyj3818++ {
				yyv3818 = append(yyv3818, LoadBalancerIngress{})
				yyh3818.ElemContainerState(yyj3818)
				if r.TryDecodeAsNil() {
					yyv3818[yyj3818] = LoadBalancerIngress{}
				} else {
					yyv3820 := &yyv3818[yyj3818]
					yyv3820.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3818 := 0
		for ; !r.CheckBreak(); yyj3818++ {

			if yyj3818 >= len(yyv3818) {
				yyv3818 = append(yyv3818, LoadBalancerIngress{}) // var yyz3818 LoadBalancerIngress
				yyc3818 = true
			}
			yyh3818.ElemContainerState(yyj3818)
			if yyj3818 < len(yyv3818) {
				if r.TryDecodeAsNil() {
					yyv3818[yyj3818] = LoadBalancerIngress{}
				} else {
					yyv3821 := &yyv3818[yyj3818]
					yyv3821.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3818 < len(yyv3818) {
			yyv3818 = yyv3818[:yyj3818]
			yyc3818 = true
		} else if yyj3818 == 0 && yyv3818 == nil {
			yyv3818 = []LoadBalancerIngress{}
			yyc3818 = true
		}
	}
	yyh3818.End()
	if yyc3818 {
		*v = yyv3818
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3822 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3823 := &yyv3822
		yy3823.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3824 := *v
	yyh3824, yyl3824 := z.DecSliceHelperStart()
	var yyc3824 bool
	if yyl3824 == 0 {
		if yyv3824 == nil {
			yyv3824 = []ServicePort{}
			yyc3824 = true
		} else if len(yyv3824) != 0 {
			yyv3824 = yyv3824[:0]
			yyc3824 = true
		}
	} else if yyl3824 > 0 {
		var yyrr3824, yyrl3824 int
		var yyrt3824 bool
		if yyl3824 > cap(yyv3824) {

			yyrg3824 := len(yyv3824) > 0
			yyv23824 := yyv3824
			yyrl3824, yyrt3824 = z.DecInferLen(yyl3824, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3824 {
				if yyrl3824 <= cap(yyv3824) {
					yyv3824 = yyv3824[:yyrl3824]
				} else {
					yyv3824 = make([]ServicePort, yyrl3824)
				}
			} else {
				yyv3824 = make([]ServicePort, yyrl3824)
			}
			yyc3824 = true
			yyrr3824 = len(yyv3824)
			if yyrg3824 {
				copy(yyv3824, yyv23824)
			}
		} else if yyl3824 != len(yyv3824) {
			yyv3824 = yyv3824[:yyl3824]
			yyc3824 = true
		}
		yyj3824 := 0
		for ; yyj3824 < yyrr3824; yyj3824++ {
			yyh3824.ElemContainerState(yyj3824)
			if r.TryDecodeAsNil() {
				yyv3824[yyj3824] = ServicePort{}
			} else {
				yyv3825 := &yyv3824[yyj3824]
				yyv3825.CodecDecodeSelf(d)
			}

		}
		if yyrt3824 {
			for ; yyj3824 < yyl3824; yyj3824++ {
				yyv3824 = append(yyv3824, ServicePort{})
				yyh3824.ElemContainerState(yyj3824)
				if r.TryDecodeAsNil() {
					yyv3824[yyj3824] = ServicePort{}
				} else {
					yyv3826 := &yyv3824[yyj3824]
					yyv3826.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3824 := 0
		for ; !r.CheckBreak(); yyj3824++ {

			if yyj3824 >= len(yyv3824) {
				yyv3824 = append(yyv3824, ServicePort{}) // var yyz3824 ServicePort
				yyc3824 = true
			}
			yyh3824.ElemContainerState(yyj3824)
			if yyj3824 < len(yyv3824) {
				if r.TryDecodeAsNil() {
					yyv3824[yyj3824] = ServicePort{}
				} else {
					yyv3827 := &yyv3824[yyj3824]
					yyv3827.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3824 < len(yyv3824) {
			yyv3824 = yyv3824[:yyj3824]
			yyc3824 = true
		} else if yyj3824 == 0 && yyv3824 == nil {
			yyv3824 = []ServicePort{}
			yyc3824 = true
		}
	}
	yyh3824.End()
	if yyc3824 {
		*v = yyv3824
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3828 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3829 := &yyv3828
		yy3829.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3830 := *v
	yyh3830, yyl3830 := z.DecSliceHelperStart()
	var yyc3830 bool
	if yyl3830 == 0 {
		if yyv3830 == nil {
			yyv3830 = []ObjectReference{}
			yyc3830 = true
		} else if len(yyv3830) != 0 {
			yyv3830 = yyv3830[:0]
			yyc3830 = true
		}
	} else if yyl3830 > 0 {
		var yyrr3830, yyrl3830 int
		var yyrt3830 bool
		if yyl3830 > cap(yyv3830) {

			yyrg3830 := len(yyv3830) > 0
			yyv23830 := yyv3830
			yyrl3830, yyrt3830 = z.DecInferLen(yyl3830, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3830 {
				if yyrl3830 <= cap(yyv3830) {
					yyv3830 = yyv3830[:yyrl3830]
				} else {
					yyv3830 = make([]ObjectReference, yyrl3830)
				}
			} else {
				yyv3830 = make([]ObjectReference, yyrl3830)
			}
			yyc3830 = true
			yyrr3830 = len(yyv3830)
			if yyrg3830 {
				copy(yyv3830, yyv23830)
			}
		} else if yyl3830 != len(yyv3830) {
			yyv3830 = yyv3830[:yyl3830]
			yyc3830 = true
		}
		yyj3830 := 0
		for ; yyj3830 < yyrr3830; yyj3830++ {
			yyh3830.ElemContainerState(yyj3830)
			if r.TryDecodeAsNil() {
				yyv3830[yyj3830] = ObjectReference{}
			} else {
				yyv3831 := &yyv3830[yyj3830]
				yyv3831.CodecDecodeSelf(d)
			}

		}
		if yyrt3830 {
			for ; yyj3830 < yyl3830; yyj3830++ {
				yyv3830 = append(yyv3830, ObjectReference{})
				yyh3830.ElemContainerState(yyj3830)
				if r.TryDecodeAsNil() {
					yyv3830[yyj3830] = ObjectReference{}
				} else {
					yyv3832 := &yyv3830[yyj3830]
					yyv3832.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3830 := 0
		for ; !r.CheckBreak(); yyj3830++ {

			if yyj3830 >= len(yyv3830) {
				yyv3830 = append(yyv3830, ObjectReference{}) // var yyz3830 ObjectReference
				yyc3830 = true
			}
			yyh3830.ElemContainerState(yyj3830)
			if yyj3830 < len(yyv3830) {
				if r.TryDecodeAsNil() {
					yyv3830[yyj3830] = ObjectReference{}
				} else {
					yyv3833 := &yyv3830[yyj3830]
					yyv3833.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3830 < len(yyv3830) {
			yyv3830 = yyv3830[:yyj3830]
			yyc3830 = true
		} else if yyj3830 == 0 && yyv3830 == nil {
			yyv3830 = []ObjectReference{}
			yyc3830 = true
		}
	}
	yyh3830.End()
	if yyc3830 {
		*v = yyv3830
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3834 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3835 := &yyv3834
		yy3835.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3836 := *v
	yyh3836, yyl3836 := z.DecSliceHelperStart()
	var yyc3836 bool
	if yyl3836 == 0 {
		if yyv3836 == nil {
			yyv3836 = []ServiceAccount{}
			yyc3836 = true
		} else if len(yyv3836) != 0 {
			yyv3836 = yyv3836[:0]
			yyc3836 = true
		}
	} else if yyl3836 > 0 {
		var yyrr3836, yyrl3836 int
		var yyrt3836 bool
		if yyl3836 > cap(yyv3836) {

			yyrg3836 := len(yyv3836) > 0
			yyv23836 := yyv3836
			yyrl3836, yyrt3836 = z.DecInferLen(yyl3836, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3836 {
				if yyrl3836 <= cap(yyv3836) {
					yyv3836 = yyv3836[:yyrl3836]
				} else {
					yyv3836 = make([]ServiceAccount, yyrl3836)
				}
			} else {
				yyv3836 = make([]ServiceAccount, yyrl3836)
			}
			yyc3836 = true
			yyrr3836 = len(yyv3836)
			if yyrg3836 {
				copy(yyv3836, yyv23836)
			}
		} else if yyl3836 != len(yyv3836) {
			yyv3836 = yyv3836[:yyl3836]
			yyc3836 = true
		}
		yyj3836 := 0
		for ; yyj3836 < yyrr3836; yyj3836++ {
			yyh3836.ElemContainerState(yyj3836)
			if r.TryDecodeAsNil() {
				yyv3836[yyj3836] = ServiceAccount{}
			} else {
				yyv3837 := &yyv3836[yyj3836]
				yyv3837.CodecDecodeSelf(d)
			}

		}
		if yyrt3836 {
			for ; yyj3836 < yyl3836; yyj3836++ {
				yyv3836 = append(yyv3836, ServiceAccount{})
				yyh3836.ElemContainerState(yyj3836)
				if r.TryDecodeAsNil() {
					yyv3836[yyj3836] = ServiceAccount{}
				} else {
					yyv3838 := &yyv3836[yyj3836]
					yyv3838.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3836 := 0
		for ; !r.CheckBreak(); yyj3836++ {

			if yyj3836 >= len(yyv3836) {
				yyv3836 = append(yyv3836, ServiceAccount{}) // var yyz3836 ServiceAccount
				yyc3836 = true
			}
			yyh3836.ElemContainerState(yyj3836)
			if yyj3836 < len(yyv3836) {
				if r.TryDecodeAsNil() {
					yyv3836[yyj3836] = ServiceAccount{}
				} else {
					yyv3839 := &yyv3836[yyj3836]
					yyv3839.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3836 < len(yyv3836) {
			yyv3836 = yyv3836[:yyj3836]
			yyc3836 = true
		} else if yyj3836 == 0 && yyv3836 == nil {
			yyv3836 = []ServiceAccount{}
			yyc3836 = true
		}
	}
	yyh3836.End()
	if yyc3836 {
		*v = yyv3836
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3840 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3841 := &yyv3840
		yy3841.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3842 := *v
	yyh3842, yyl3842 := z.DecSliceHelperStart()
	var yyc3842 bool
	if yyl3842 == 0 {
		if yyv3842 == nil {
			yyv3842 = []EndpointSubset{}
			yyc3842 = true
		} else if len(yyv3842) != 0 {
			yyv3842 = yyv3842[:0]
			yyc3842 = true
		}
	} else if yyl3842 > 0 {
		var yyrr3842, yyrl3842 int
		var yyrt3842 bool
		if yyl3842 > cap(yyv3842) {

			yyrg3842 := len(yyv3842) > 0
			yyv23842 := yyv3842
			yyrl3842, yyrt3842 = z.DecInferLen(yyl3842, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3842 {
				if yyrl3842 <= cap(yyv3842) {
					yyv3842 = yyv3842[:yyrl3842]
				} else {
					yyv3842 = make([]EndpointSubset, yyrl3842)
				}
			} else {
				yyv3842 = make([]EndpointSubset, yyrl3842)
			}
			yyc3842 = true
			yyrr3842 = len(yyv3842)
			if yyrg3842 {
				copy(yyv3842, yyv23842)
			}
		} else if yyl3842 != len(yyv3842) {
			yyv3842 = yyv3842[:yyl3842]
			yyc3842 = true
		}
		yyj3842 := 0
		for ; yyj3842 < yyrr3842; yyj3842++ {
			yyh3842.ElemContainerState(yyj3842)
			if r.TryDecodeAsNil() {
				yyv3842[yyj3842] = EndpointSubset{}
			} else {
				yyv3843 := &yyv3842[yyj3842]
				yyv3843.CodecDecodeSelf(d)
			}

		}
		if yyrt3842 {
			for ; yyj3842 < yyl3842; yyj3842++ {
				yyv3842 = append(yyv3842, EndpointSubset{})
				yyh3842.ElemContainerState(yyj3842)
				if r.TryDecodeAsNil() {
					yyv3842[yyj3842] = EndpointSubset{}
				} else {
					yyv3844 := &yyv3842[yyj3842]
					yyv3844.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3842 := 0
		for ; !r.CheckBreak(); yyj3842++ {

			if yyj3842 >= len(yyv3842) {
				yyv3842 = append(yyv3842, EndpointSubset{}) // var yyz3842 EndpointSubset
				yyc3842 = true
			}
			yyh3842.ElemContainerState(yyj3842)
			if yyj3842 < len(yyv3842) {
				if r.TryDecodeAsNil() {
					yyv3842[yyj3842] = EndpointSubset{}
				} else {
					yyv3845 := &yyv3842[yyj3842]
					yyv3845.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3842 < len(yyv3842) {
			yyv3842 = yyv3842[:yyj3842]
			yyc3842 = true
		} else if yyj3842 == 0 && yyv3842 == nil {
			yyv3842 = []EndpointSubset{}
			yyc3842 = true
		}
	}
	yyh3842.End()
	if yyc3842 {
		*v = yyv3842
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3846 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3847 := &yyv3846
		yy3847.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3848 := *v
	yyh3848, yyl3848 := z.DecSliceHelperStart()
	var yyc3848 bool
	if yyl3848 == 0 {
		if yyv3848 == nil {
			yyv3848 = []EndpointAddress{}
			yyc3848 = true
		} else if len(yyv3848) != 0 {
			yyv3848 = yyv3848[:0]
			yyc3848 = true
		}
	} else if yyl3848 > 0 {
		var yyrr3848, yyrl3848 int
		var yyrt3848 bool
		if yyl3848 > cap(yyv3848) {

			yyrg3848 := len(yyv3848) > 0
			yyv23848 := yyv3848
			yyrl3848, yyrt3848 = z.DecInferLen(yyl3848, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3848 {
				if yyrl3848 <= cap(yyv3848) {
					yyv3848 = yyv3848[:yyrl3848]
				} else {
					yyv3848 = make([]EndpointAddress, yyrl3848)
				}
			} else {
				yyv3848 = make([]EndpointAddress, yyrl3848)
			}
			yyc3848 = true
			yyrr3848 = len(yyv3848)
			if yyrg3848 {
				copy(yyv3848, yyv23848)
			}
		} else if yyl3848 != len(yyv3848) {
			yyv3848 = yyv3848[:yyl3848]
			yyc3848 = true
		}
		yyj3848 := 0
		for ; yyj3848 < yyrr3848; yyj3848++ {
			yyh3848.ElemContainerState(yyj3848)
			if r.TryDecodeAsNil() {
				yyv3848[yyj3848] = EndpointAddress{}
			} else {
				yyv3849 := &yyv3848[yyj3848]
				yyv3849.CodecDecodeSelf(d)
			}

		}
		if yyrt3848 {
			for ; yyj3848 < yyl3848; yyj3848++ {
				yyv3848 = append(yyv3848, EndpointAddress{})
				yyh3848.ElemContainerState(yyj3848)
				if r.TryDecodeAsNil() {
					yyv3848[yyj3848] = EndpointAddress{}
				} else {
					yyv3850 := &yyv3848[yyj3848]
					yyv3850.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3848 := 0
		for ; !r.CheckBreak(); yyj3848++ {

			if yyj3848 >= len(yyv3848) {
				yyv3848 = append(yyv3848, EndpointAddress{}) // var yyz3848 EndpointAddress
				yyc3848 = true
			}
			yyh3848.ElemContainerState(yyj3848)
			if yyj3848 < len(yyv3848) {
				if r.TryDecodeAsNil() {
					yyv3848[yyj3848] = EndpointAddress{}
				} else {
					yyv3851 := &yyv3848[yyj3848]
					yyv3851.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3848 < len(yyv3848) {
			yyv3848 = yyv3848[:yyj3848]
			yyc3848 = true
		} else if yyj3848 == 0 && yyv3848 == nil {
			yyv3848 = []EndpointAddress{}
			yyc3848 = true
		}
	}
	yyh3848.End()
	if yyc3848 {
		*v = yyv3848
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3852 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3853 := &yyv3852
		yy3853.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3854 := *v
	yyh3854, yyl3854 := z.DecSliceHelperStart()
	var yyc3854 bool
	if yyl3854 == 0 {
		if yyv3854 == nil {
			yyv3854 = []EndpointPort{}
			yyc3854 = true
		} else if len(yyv3854) != 0 {
			yyv3854 = yyv3854[:0]
			yyc3854 = true
		}
	} else if yyl3854 > 0 {
		var yyrr3854, yyrl3854 int
		var yyrt3854 bool
		if yyl3854 > cap(yyv3854) {

			yyrg3854 := len(yyv3854) > 0
			yyv23854 := yyv3854
			yyrl3854, yyrt3854 = z.DecInferLen(yyl3854, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3854 {
				if yyrl3854 <= cap(yyv3854) {
					yyv3854 = yyv3854[:yyrl3854]
				} else {
					yyv3854 = make([]EndpointPort, yyrl3854)
				}
			} else {
				yyv3854 = make([]EndpointPort, yyrl3854)
			}
			yyc3854 = true
			yyrr3854 = len(yyv3854)
			if yyrg3854 {
				copy(yyv3854, yyv23854)
			}
		} else if yyl3854 != len(yyv3854) {
			yyv3854 = yyv3854[:yyl3854]
			yyc3854 = true
		}
		yyj3854 := 0
		for ; yyj3854 < yyrr3854; yyj3854++ {
			yyh3854.ElemContainerState(yyj3854)
			if r.TryDecodeAsNil() {
				yyv3854[yyj3854] = EndpointPort{}
			} else {
				yyv3855 := &yyv3854[yyj3854]
				yyv3855.CodecDecodeSelf(d)
			}

		}
		if yyrt3854 {
			for ; yyj3854 < yyl3854; yyj3854++ {
				yyv3854 = append(yyv3854, EndpointPort{})
				yyh3854.ElemContainerState(yyj3854)
				if r.TryDecodeAsNil() {
					yyv3854[yyj3854] = EndpointPort{}
				} else {
					yyv3856 := &yyv3854[yyj3854]
					yyv3856.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3854 := 0
		for ; !r.CheckBreak(); yyj3854++ {

			if yyj3854 >= len(yyv3854) {
				yyv3854 = append(yyv3854, EndpointPort{}) // var yyz3854 EndpointPort
				yyc3854 = true
			}
			yyh3854.ElemContainerState(yyj3854)
			if yyj3854 < len(yyv3854) {
				if r.TryDecodeAsNil() {
					yyv3854[yyj3854] = EndpointPort{}
				} else {
					yyv3857 := &yyv3854[yyj3854]
					yyv3857.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3854 < len(yyv3854) {
			yyv3854 = yyv3854[:yyj3854]
			yyc3854 = true
		} else if yyj3854 == 0 && yyv3854 == nil {
			yyv3854 = []EndpointPort{}
			yyc3854 = true
		}
	}
	yyh3854.End()
	if yyc3854 {
		*v = yyv3854
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3858 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3859 := &yyv3858
		yy3859.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3860 := *v
	yyh3860, yyl3860 := z.DecSliceHelperStart()
	var yyc3860 bool
	if yyl3860 == 0 {
		if yyv3860 == nil {
			yyv3860 = []Endpoints{}
			yyc3860 = true
		} else if len(yyv3860) != 0 {
			yyv3860 = yyv3860[:0]
			yyc3860 = true
		}
	} else if yyl3860 > 0 {
		var yyrr3860, yyrl3860 int
		var yyrt3860 bool
		if yyl3860 > cap(yyv3860) {

			yyrg3860 := len(yyv3860) > 0
			yyv23860 := yyv3860
			yyrl3860, yyrt3860 = z.DecInferLen(yyl3860, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3860 {
				if yyrl3860 <= cap(yyv3860) {
					yyv3860 = yyv3860[:yyrl3860]
				} else {
					yyv3860 = make([]Endpoints, yyrl3860)
				}
			} else {
				yyv3860 = make([]Endpoints, yyrl3860)
			}
			yyc3860 = true
			yyrr3860 = len(yyv3860)
			if yyrg3860 {
				copy(yyv3860, yyv23860)
			}
		} else if yyl3860 != len(yyv3860) {
			yyv3860 = yyv3860[:yyl3860]
			yyc3860 = true
		}
		yyj3860 := 0
		for ; yyj3860 < yyrr3860; yyj3860++ {
			yyh3860.ElemContainerState(yyj3860)
			if r.TryDecodeAsNil() {
				yyv3860[yyj3860] = Endpoints{}
			} else {
				yyv3861 := &yyv3860[yyj3860]
				yyv3861.CodecDecodeSelf(d)
			}

		}
		if yyrt3860 {
			for ; yyj3860 < yyl3860; yyj3860++ {
				yyv3860 = append(yyv3860, Endpoints{})
				yyh3860.ElemContainerState(yyj3860)
				if r.TryDecodeAsNil() {
					yyv3860[yyj3860] = Endpoints{}
				} else {
					yyv3862 := &yyv3860[yyj3860]
					yyv3862.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3860 := 0
		for ; !r.CheckBreak(); yyj3860++ {

			if yyj3860 >= len(yyv3860) {
				yyv3860 = append(yyv3860, Endpoints{}) // var yyz3860 Endpoints
				yyc3860 = true
			}
			yyh3860.ElemContainerState(yyj3860)
			if yyj3860 < len(yyv3860) {
				if r.TryDecodeAsNil() {
					yyv3860[yyj3860] = Endpoints{}
				} else {
					yyv3863 := &yyv3860[yyj3860]
					yyv3863.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3860 < len(yyv3860) {
			yyv3860 = yyv3860[:yyj3860]
			yyc3860 = true
		} else if yyj3860 == 0 && yyv3860 == nil {
			yyv3860 = []Endpoints{}
			yyc3860 = true
		}
	}
	yyh3860.End()
	if yyc3860 {
		*v = yyv3860
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3864 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3865 := &yyv3864
		yy3865.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3866 := *v
	yyh3866, yyl3866 := z.DecSliceHelperStart()
	var yyc3866 bool
	if yyl3866 == 0 {
		if yyv3866 == nil {
			yyv3866 = []NodeCondition{}
			yyc3866 = true
		} else if len(yyv3866) != 0 {
			yyv3866 = yyv3866[:0]
			yyc3866 = true
		}
	} else if yyl3866 > 0 {
		var yyrr3866, yyrl3866 int
		var yyrt3866 bool
		if yyl3866 > cap(yyv3866) {

			yyrg3866 := len(yyv3866) > 0
			yyv23866 := yyv3866
			yyrl3866, yyrt3866 = z.DecInferLen(yyl3866, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3866 {
				if yyrl3866 <= cap(yyv3866) {
					yyv3866 = yyv3866[:yyrl3866]
				} else {
					yyv3866 = make([]NodeCondition, yyrl3866)
				}
			} else {
				yyv3866 = make([]NodeCondition, yyrl3866)
			}
			yyc3866 = true
			yyrr3866 = len(yyv3866)
			if yyrg3866 {
				copy(yyv3866, yyv23866)
			}
		} else if yyl3866 != len(yyv3866) {
			yyv3866 = yyv3866[:yyl3866]
			yyc3866 = true
		}
		yyj3866 := 0
		for ; yyj3866 < yyrr3866; yyj3866++ {
			yyh3866.ElemContainerState(yyj3866)
			if r.TryDecodeAsNil() {
				yyv3866[yyj3866] = NodeCondition{}
			} else {
				yyv3867 := &yyv3866[yyj3866]
				yyv3867.CodecDecodeSelf(d)
			}

		}
		if yyrt3866 {
			for ; yyj3866 < yyl3866; yyj3866++ {
				yyv3866 = append(yyv3866, NodeCondition{})
				yyh3866.ElemContainerState(yyj3866)
				if r.TryDecodeAsNil() {
					yyv3866[yyj3866] = NodeCondition{}
				} else {
					yyv3868 := &yyv3866[yyj3866]
					yyv3868.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3866 := 0
		for ; !r.CheckBreak(); yyj3866++ {

			if yyj3866 >= len(yyv3866) {
				yyv3866 = append(yyv3866, NodeCondition{}) // var yyz3866 NodeCondition
				yyc3866 = true
			}
			yyh3866.ElemContainerState(yyj3866)
			if yyj3866 < len(yyv3866) {
				if r.TryDecodeAsNil() {
					yyv3866[yyj3866] = NodeCondition{}
				} else {
					yyv3869 := &yyv3866[yyj3866]
					yyv3869.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3866 < len(yyv3866) {
			yyv3866 = yyv3866[:yyj3866]
			yyc3866 = true
		} else if yyj3866 == 0 && yyv3866 == nil {
			yyv3866 = []NodeCondition{}
			yyc3866 = true
		}
	}
	yyh3866.End()
	if yyc3866 {
		*v = yyv3866
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3870 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3871 := &yyv3870
		yy3871.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3872 := *v
	yyh3872, yyl3872 := z.DecSliceHelperStart()
	var yyc3872 bool
	if yyl3872 == 0 {
		if yyv3872 == nil {
			yyv3872 = []NodeAddress{}
			yyc3872 = true
		} else if len(yyv3872) != 0 {
			yyv3872 = yyv3872[:0]
			yyc3872 = true
		}
	} else if yyl3872 > 0 {
		var yyrr3872, yyrl3872 int
		var yyrt3872 bool
		if yyl3872 > cap(yyv3872) {

			yyrg3872 := len(yyv3872) > 0
			yyv23872 := yyv3872
			yyrl3872, yyrt3872 = z.DecInferLen(yyl3872, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3872 {
				if yyrl3872 <= cap(yyv3872) {
					yyv3872 = yyv3872[:yyrl3872]
				} else {
					yyv3872 = make([]NodeAddress, yyrl3872)
				}
			} else {
				yyv3872 = make([]NodeAddress, yyrl3872)
			}
			yyc3872 = true
			yyrr3872 = len(yyv3872)
			if yyrg3872 {
				copy(yyv3872, yyv23872)
			}
		} else if yyl3872 != len(yyv3872) {
			yyv3872 = yyv3872[:yyl3872]
			yyc3872 = true
		}
		yyj3872 := 0
		for ; yyj3872 < yyrr3872; yyj3872++ {
			yyh3872.ElemContainerState(yyj3872)
			if r.TryDecodeAsNil() {
				yyv3872[yyj3872] = NodeAddress{}
			} else {
				yyv3873 := &yyv3872[yyj3872]
				yyv3873.CodecDecodeSelf(d)
			}

		}
		if yyrt3872 {
			for ; yyj3872 < yyl3872; yyj3872++ {
				yyv3872 = append(yyv3872, NodeAddress{})
				yyh3872.ElemContainerState(yyj3872)
				if r.TryDecodeAsNil() {
					yyv3872[yyj3872] = NodeAddress{}
				} else {
					yyv3874 := &yyv3872[yyj3872]
					yyv3874.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3872 := 0
		for ; !r.CheckBreak(); yyj3872++ {

			if yyj3872 >= len(yyv3872) {
				yyv3872 = append(yyv3872, NodeAddress{}) // var yyz3872 NodeAddress
				yyc3872 = true
			}
			yyh3872.ElemContainerState(yyj3872)
			if yyj3872 < len(yyv3872) {
				if r.TryDecodeAsNil() {
					yyv3872[yyj3872] = NodeAddress{}
				} else {
					yyv3875 := &yyv3872[yyj3872]
					yyv3875.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3872 < len(yyv3872) {
			yyv3872 = yyv3872[:yyj3872]
			yyc3872 = true
		} else if yyj3872 == 0 && yyv3872 == nil {
			yyv3872 = []NodeAddress{}
			yyc3872 = true
		}
	}
	yyh3872.End()
	if yyc3872 {
		*v = yyv3872
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3876 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3877 := &yyv3876
		yy3877.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3878 := *v
	yyh3878, yyl3878 := z.DecSliceHelperStart()
	var yyc3878 bool
	if yyl3878 == 0 {
		if yyv3878 == nil {
			yyv3878 = []ContainerImage{}
			yyc3878 = true
		} else if len(yyv3878) != 0 {
			yyv3878 = yyv3878[:0]
			yyc3878 = true
		}
	} else if yyl3878 > 0 {
		var yyrr3878, yyrl3878 int
		var yyrt3878 bool
		if yyl3878 > cap(yyv3878) {

			yyrg3878 := len(yyv3878) > 0
			yyv23878 := yyv3878
			yyrl3878, yyrt3878 = z.DecInferLen(yyl3878, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3878 {
				if yyrl3878 <= cap(yyv3878) {
					yyv3878 = yyv3878[:yyrl3878]
				} else {
					yyv3878 = make([]ContainerImage, yyrl3878)
				}
			} else {
				yyv3878 = make([]ContainerImage, yyrl3878)
			}
			yyc3878 = true
			yyrr3878 = len(yyv3878)
			if yyrg3878 {
				copy(yyv3878, yyv23878)
			}
		} else if yyl3878 != len(yyv3878) {
			yyv3878 = yyv3878[:yyl3878]
			yyc3878 = true
		}
		yyj3878 := 0
		for ; yyj3878 < yyrr3878; yyj3878++ {
			yyh3878.ElemContainerState(yyj3878)
			if r.TryDecodeAsNil() {
				yyv3878[yyj3878] = ContainerImage{}
			} else {
				yyv3879 := &yyv3878[yyj3878]
				yyv3879.CodecDecodeSelf(d)
			}

		}
		if yyrt3878 {
			for ; yyj3878 < yyl3878; yyj3878++ {
				yyv3878 = append(yyv3878, ContainerImage{})
				yyh3878.ElemContainerState(yyj3878)
				if r.TryDecodeAsNil() {
					yyv3878[yyj3878] = ContainerImage{}
				} else {
					yyv3880 := &yyv3878[yyj3878]
					yyv3880.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3878 := 0
		for ; !r.CheckBreak(); yyj3878++ {

			if yyj3878 >= len(yyv3878) {
				yyv3878 = append(yyv3878, ContainerImage{}) // var yyz3878 ContainerImage
				yyc3878 = true
			}
			yyh3878.ElemContainerState(yyj3878)
			if yyj3878 < len(yyv3878) {
				if r.TryDecodeAsNil() {
					yyv3878[yyj3878] = ContainerImage{}
				} else {
					yyv3881 := &yyv3878[yyj3878]
					yyv3881.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3878 < len(yyv3878) {
			yyv3878 = yyv3878[:yyj3878]
			yyc3878 = true
		} else if yyj3878 == 0 && yyv3878 == nil {
			yyv3878 = []ContainerImage{}
			yyc3878 = true
		}
	}
	yyh3878.End()
	if yyc3878 {
		*v = yyv3878
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3882, yyv3882 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3882.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3883 := &yyv3882
		yym3884 := z.EncBinary()
		_ = yym3884
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3883) {
		} else if !yym3884 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3883)
		} else {
			z.EncFallback(yy3883)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3885 := *v
	yyl3885 := r.ReadMapStart()
	yybh3885 := z.DecBasicHandle()
	if yyv3885 == nil {
		yyrl3885, _ := z.DecInferLen(yyl3885, yybh3885.MaxInitLen, 40)
		yyv3885 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3885)
		*v = yyv3885
	}
	var yymk3885 ResourceName
	var yymv3885 pkg3_resource.Quantity
	var yymg3885 bool
	if yybh3885.MapValueReset {
		yymg3885 = true
	}
	if yyl3885 > 0 {
		for yyj3885 := 0; yyj3885 < yyl3885; yyj3885++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3885 = ""
			} else {
				yymk3885 = ResourceName(r.DecodeString())
			}

			if yymg3885 {
				yymv3885 = yyv3885[yymk3885]
			} else {
				yymv3885 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3885 = pkg3_resource.Quantity{}
			} else {
				yyv3887 := &yymv3885
				yym3888 := z.DecBinary()
				_ = yym3888
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3887) {
				} else if !yym3888 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3887)
				} else {
					z.DecFallback(yyv3887, false)
				}
			}

			if yyv3885 != nil {
				yyv3885[yymk3885] = yymv3885
			}
		}
	} else if yyl3885 < 0 {
		for yyj3885 := 0; !r.CheckBreak(); yyj3885++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3885 = ""
			} else {
				yymk3885 = ResourceName(r.DecodeString())
			}

			if yymg3885 {
				yymv3885 = yyv3885[yymk3885]
			} else {
				yymv3885 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3885 = pkg3_resource.Quantity{}
			} else {
				yyv3890 := &yymv3885
				yym3891 := z.DecBinary()
				_ = yym3891
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3890) {
				} else if !yym3891 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3890)
				} else {
					z.DecFallback(yyv3890, false)
				}
			}

			if yyv3885 != nil {
				yyv3885[yymk3885] = yymv3885
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3892 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3893 := &yyv3892
		yy3893.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3894 := *v
	yyh3894, yyl3894 := z.DecSliceHelperStart()
	var yyc3894 bool
	if yyl3894 == 0 {
		if yyv3894 == nil {
			yyv3894 = []Node{}
			yyc3894 = true
		} else if len(yyv3894) != 0 {
			yyv3894 = yyv3894[:0]
			yyc3894 = true
		}
	} else if yyl3894 > 0 {
		var yyrr3894, yyrl3894 int
		var yyrt3894 bool
		if yyl3894 > cap(yyv3894) {

			yyrg3894 := len(yyv3894) > 0
			yyv23894 := yyv3894
			yyrl3894, yyrt3894 = z.DecInferLen(yyl3894, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt3894 {
				if yyrl3894 <= cap(yyv3894) {
					yyv3894 = yyv3894[:yyrl3894]
				} else {
					yyv3894 = make([]Node, yyrl3894)
				}
			} else {
				yyv3894 = make([]Node, yyrl3894)
			}
			yyc3894 = true
			yyrr3894 = len(yyv3894)
			if yyrg3894 {
				copy(yyv3894, yyv23894)
			}
		} else if yyl3894 != len(yyv3894) {
			yyv3894 = yyv3894[:yyl3894]
			yyc3894 = true
		}
		yyj3894 := 0
		for ; yyj3894 < yyrr3894; yyj3894++ {
			yyh3894.ElemContainerState(yyj3894)
			if r.TryDecodeAsNil() {
				yyv3894[yyj3894] = Node{}
			} else {
				yyv3895 := &yyv3894[yyj3894]
				yyv3895.CodecDecodeSelf(d)
			}

		}
		if yyrt3894 {
			for ; yyj3894 < yyl3894; yyj3894++ {
				yyv3894 = append(yyv3894, Node{})
				yyh3894.ElemContainerState(yyj3894)
				if r.TryDecodeAsNil() {
					yyv3894[yyj3894] = Node{}
				} else {
					yyv3896 := &yyv3894[yyj3894]
					yyv3896.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3894 := 0
		for ; !r.CheckBreak(); yyj3894++ {

			if yyj3894 >= len(yyv3894) {
				yyv3894 = append(yyv3894, Node{}) // var yyz3894 Node
				yyc3894 = true
			}
			yyh3894.ElemContainerState(yyj3894)
			if yyj3894 < len(yyv3894) {
				if r.TryDecodeAsNil() {
					yyv3894[yyj3894] = Node{}
				} else {
					yyv3897 := &yyv3894[yyj3894]
					yyv3897.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3894 < len(yyv3894) {
			yyv3894 = yyv3894[:yyj3894]
			yyc3894 = true
		} else if yyj3894 == 0 && yyv3894 == nil {
			yyv3894 = []Node{}
			yyc3894 = true
		}
	}
	yyh3894.End()
	if yyc3894 {
		*v = yyv3894
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3898 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3898.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3899 := *v
	yyh3899, yyl3899 := z.DecSliceHelperStart()
	var yyc3899 bool
	if yyl3899 == 0 {
		if yyv3899 == nil {
			yyv3899 = []FinalizerName{}
			yyc3899 = true
		} else if len(yyv3899) != 0 {
			yyv3899 = yyv3899[:0]
			yyc3899 = true
		}
	} else if yyl3899 > 0 {
		var yyrr3899, yyrl3899 int
		var yyrt3899 bool
		if yyl3899 > cap(yyv3899) {

			yyrl3899, yyrt3899 = z.DecInferLen(yyl3899, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3899 {
				if yyrl3899 <= cap(yyv3899) {
					yyv3899 = yyv3899[:yyrl3899]
				} else {
					yyv3899 = make([]FinalizerName, yyrl3899)
				}
			} else {
				yyv3899 = make([]FinalizerName, yyrl3899)
			}
			yyc3899 = true
			yyrr3899 = len(yyv3899)
		} else if yyl3899 != len(yyv3899) {
			yyv3899 = yyv3899[:yyl3899]
			yyc3899 = true
		}
		yyj3899 := 0
		for ; yyj3899 < yyrr3899; yyj3899++ {
			yyh3899.ElemContainerState(yyj3899)
			if r.TryDecodeAsNil() {
				yyv3899[yyj3899] = ""
			} else {
				yyv3899[yyj3899] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3899 {
			for ; yyj3899 < yyl3899; yyj3899++ {
				yyv3899 = append(yyv3899, "")
				yyh3899.ElemContainerState(yyj3899)
				if r.TryDecodeAsNil() {
					yyv3899[yyj3899] = ""
				} else {
					yyv3899[yyj3899] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3899 := 0
		for ; !r.CheckBreak(); yyj3899++ {

			if yyj3899 >= len(yyv3899) {
				yyv3899 = append(yyv3899, "") // var yyz3899 FinalizerName
				yyc3899 = true
			}
			yyh3899.ElemContainerState(yyj3899)
			if yyj3899 < len(yyv3899) {
				if r.TryDecodeAsNil() {
					yyv3899[yyj3899] = ""
				} else {
					yyv3899[yyj3899] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3899 < len(yyv3899) {
			yyv3899 = yyv3899[:yyj3899]
			yyc3899 = true
		} else if yyj3899 == 0 && yyv3899 == nil {
			yyv3899 = []FinalizerName{}
			yyc3899 = true
		}
	}
	yyh3899.End()
	if yyc3899 {
		*v = yyv3899
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3903 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3904 := &yyv3903
		yy3904.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3905 := *v
	yyh3905, yyl3905 := z.DecSliceHelperStart()
	var yyc3905 bool
	if yyl3905 == 0 {
		if yyv3905 == nil {
			yyv3905 = []Namespace{}
			yyc3905 = true
		} else if len(yyv3905) != 0 {
			yyv3905 = yyv3905[:0]
			yyc3905 = true
		}
	} else if yyl3905 > 0 {
		var yyrr3905, yyrl3905 int
		var yyrt3905 bool
		if yyl3905 > cap(yyv3905) {

			yyrg3905 := len(yyv3905) > 0
			yyv23905 := yyv3905
			yyrl3905, yyrt3905 = z.DecInferLen(yyl3905, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt3905 {
				if yyrl3905 <= cap(yyv3905) {
					yyv3905 = yyv3905[:yyrl3905]
				} else {
					yyv3905 = make([]Namespace, yyrl3905)
				}
			} else {
				yyv3905 = make([]Namespace, yyrl3905)
			}
			yyc3905 = true
			yyrr3905 = len(yyv3905)
			if yyrg3905 {
				copy(yyv3905, yyv23905)
			}
		} else if yyl3905 != len(yyv3905) {
			yyv3905 = yyv3905[:yyl3905]
			yyc3905 = true
		}
		yyj3905 := 0
		for ; yyj3905 < yyrr3905; yyj3905++ {
			yyh3905.ElemContainerState(yyj3905)
			if r.TryDecodeAsNil() {
				yyv3905[yyj3905] = Namespace{}
			} else {
				yyv3906 := &yyv3905[yyj3905]
				yyv3906.CodecDecodeSelf(d)
			}

		}
		if yyrt3905 {
			for ; yyj3905 < yyl3905; yyj3905++ {
				yyv3905 = append(yyv3905, Namespace{})
				yyh3905.ElemContainerState(yyj3905)
				if r.TryDecodeAsNil() {
					yyv3905[yyj3905] = Namespace{}
				} else {
					yyv3907 := &yyv3905[yyj3905]
					yyv3907.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3905 := 0
		for ; !r.CheckBreak(); yyj3905++ {

			if yyj3905 >= len(yyv3905) {
				yyv3905 = append(yyv3905, Namespace{}) // var yyz3905 Namespace
				yyc3905 = true
			}
			yyh3905.ElemContainerState(yyj3905)
			if yyj3905 < len(yyv3905) {
				if r.TryDecodeAsNil() {
					yyv3905[yyj3905] = Namespace{}
				} else {
					yyv3908 := &yyv3905[yyj3905]
					yyv3908.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3905 < len(yyv3905) {
			yyv3905 = yyv3905[:yyj3905]
			yyc3905 = true
		} else if yyj3905 == 0 && yyv3905 == nil {
			yyv3905 = []Namespace{}
			yyc3905 = true
		}
	}
	yyh3905.End()
	if yyc3905 {
		*v = yyv3905
	}
}

func (x codecSelfer1234) encMapstringSubnet(v map[string]Subnet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3909, yyv3909 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3910 := z.EncBinary()
		_ = yym3910
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3909))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3911 := &yyv3909
		yy3911.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSubnet(v *map[string]Subnet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3912 := *v
	yyl3912 := r.ReadMapStart()
	yybh3912 := z.DecBasicHandle()
	if yyv3912 == nil {
		yyrl3912, _ := z.DecInferLen(yyl3912, yybh3912.MaxInitLen, 48)
		yyv3912 = make(map[string]Subnet, yyrl3912)
		*v = yyv3912
	}
	var yymk3912 string
	var yymv3912 Subnet
	var yymg3912 bool
	if yybh3912.MapValueReset {
		yymg3912 = true
	}
	if yyl3912 > 0 {
		for yyj3912 := 0; yyj3912 < yyl3912; yyj3912++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3912 = ""
			} else {
				yymk3912 = string(r.DecodeString())
			}

			if yymg3912 {
				yymv3912 = yyv3912[yymk3912]
			} else {
				yymv3912 = Subnet{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3912 = Subnet{}
			} else {
				yyv3914 := &yymv3912
				yyv3914.CodecDecodeSelf(d)
			}

			if yyv3912 != nil {
				yyv3912[yymk3912] = yymv3912
			}
		}
	} else if yyl3912 < 0 {
		for yyj3912 := 0; !r.CheckBreak(); yyj3912++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3912 = ""
			} else {
				yymk3912 = string(r.DecodeString())
			}

			if yymg3912 {
				yymv3912 = yyv3912[yymk3912]
			} else {
				yymv3912 = Subnet{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3912 = Subnet{}
			} else {
				yyv3916 := &yymv3912
				yyv3916.CodecDecodeSelf(d)
			}

			if yyv3912 != nil {
				yyv3912[yymk3912] = yymv3912
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNetwork(v []Network, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3917 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3918 := &yyv3917
		yy3918.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetwork(v *[]Network, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3919 := *v
	yyh3919, yyl3919 := z.DecSliceHelperStart()
	var yyc3919 bool
	if yyl3919 == 0 {
		if yyv3919 == nil {
			yyv3919 = []Network{}
			yyc3919 = true
		} else if len(yyv3919) != 0 {
			yyv3919 = yyv3919[:0]
			yyc3919 = true
		}
	} else if yyl3919 > 0 {
		var yyrr3919, yyrl3919 int
		var yyrt3919 bool
		if yyl3919 > cap(yyv3919) {

			yyrg3919 := len(yyv3919) > 0
			yyv23919 := yyv3919
			yyrl3919, yyrt3919 = z.DecInferLen(yyl3919, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt3919 {
				if yyrl3919 <= cap(yyv3919) {
					yyv3919 = yyv3919[:yyrl3919]
				} else {
					yyv3919 = make([]Network, yyrl3919)
				}
			} else {
				yyv3919 = make([]Network, yyrl3919)
			}
			yyc3919 = true
			yyrr3919 = len(yyv3919)
			if yyrg3919 {
				copy(yyv3919, yyv23919)
			}
		} else if yyl3919 != len(yyv3919) {
			yyv3919 = yyv3919[:yyl3919]
			yyc3919 = true
		}
		yyj3919 := 0
		for ; yyj3919 < yyrr3919; yyj3919++ {
			yyh3919.ElemContainerState(yyj3919)
			if r.TryDecodeAsNil() {
				yyv3919[yyj3919] = Network{}
			} else {
				yyv3920 := &yyv3919[yyj3919]
				yyv3920.CodecDecodeSelf(d)
			}

		}
		if yyrt3919 {
			for ; yyj3919 < yyl3919; yyj3919++ {
				yyv3919 = append(yyv3919, Network{})
				yyh3919.ElemContainerState(yyj3919)
				if r.TryDecodeAsNil() {
					yyv3919[yyj3919] = Network{}
				} else {
					yyv3921 := &yyv3919[yyj3919]
					yyv3921.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3919 := 0
		for ; !r.CheckBreak(); yyj3919++ {

			if yyj3919 >= len(yyv3919) {
				yyv3919 = append(yyv3919, Network{}) // var yyz3919 Network
				yyc3919 = true
			}
			yyh3919.ElemContainerState(yyj3919)
			if yyj3919 < len(yyv3919) {
				if r.TryDecodeAsNil() {
					yyv3919[yyj3919] = Network{}
				} else {
					yyv3922 := &yyv3919[yyj3919]
					yyv3922.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3919 < len(yyv3919) {
			yyv3919 = yyv3919[:yyj3919]
			yyc3919 = true
		} else if yyj3919 == 0 && yyv3919 == nil {
			yyv3919 = []Network{}
			yyc3919 = true
		}
	}
	yyh3919.End()
	if yyc3919 {
		*v = yyv3919
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3923 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3924 := &yyv3923
		yy3924.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3925 := *v
	yyh3925, yyl3925 := z.DecSliceHelperStart()
	var yyc3925 bool
	if yyl3925 == 0 {
		if yyv3925 == nil {
			yyv3925 = []Event{}
			yyc3925 = true
		} else if len(yyv3925) != 0 {
			yyv3925 = yyv3925[:0]
			yyc3925 = true
		}
	} else if yyl3925 > 0 {
		var yyrr3925, yyrl3925 int
		var yyrt3925 bool
		if yyl3925 > cap(yyv3925) {

			yyrg3925 := len(yyv3925) > 0
			yyv23925 := yyv3925
			yyrl3925, yyrt3925 = z.DecInferLen(yyl3925, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3925 {
				if yyrl3925 <= cap(yyv3925) {
					yyv3925 = yyv3925[:yyrl3925]
				} else {
					yyv3925 = make([]Event, yyrl3925)
				}
			} else {
				yyv3925 = make([]Event, yyrl3925)
			}
			yyc3925 = true
			yyrr3925 = len(yyv3925)
			if yyrg3925 {
				copy(yyv3925, yyv23925)
			}
		} else if yyl3925 != len(yyv3925) {
			yyv3925 = yyv3925[:yyl3925]
			yyc3925 = true
		}
		yyj3925 := 0
		for ; yyj3925 < yyrr3925; yyj3925++ {
			yyh3925.ElemContainerState(yyj3925)
			if r.TryDecodeAsNil() {
				yyv3925[yyj3925] = Event{}
			} else {
				yyv3926 := &yyv3925[yyj3925]
				yyv3926.CodecDecodeSelf(d)
			}

		}
		if yyrt3925 {
			for ; yyj3925 < yyl3925; yyj3925++ {
				yyv3925 = append(yyv3925, Event{})
				yyh3925.ElemContainerState(yyj3925)
				if r.TryDecodeAsNil() {
					yyv3925[yyj3925] = Event{}
				} else {
					yyv3927 := &yyv3925[yyj3925]
					yyv3927.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3925 := 0
		for ; !r.CheckBreak(); yyj3925++ {

			if yyj3925 >= len(yyv3925) {
				yyv3925 = append(yyv3925, Event{}) // var yyz3925 Event
				yyc3925 = true
			}
			yyh3925.ElemContainerState(yyj3925)
			if yyj3925 < len(yyv3925) {
				if r.TryDecodeAsNil() {
					yyv3925[yyj3925] = Event{}
				} else {
					yyv3928 := &yyv3925[yyj3925]
					yyv3928.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3925 < len(yyv3925) {
			yyv3925 = yyv3925[:yyj3925]
			yyc3925 = true
		} else if yyj3925 == 0 && yyv3925 == nil {
			yyv3925 = []Event{}
			yyc3925 = true
		}
	}
	yyh3925.End()
	if yyc3925 {
		*v = yyv3925
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3929 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3929 == nil {
			r.EncodeNil()
		} else {
			yym3930 := z.EncBinary()
			_ = yym3930
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3929) {
			} else {
				z.EncFallback(yyv3929)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3931 := *v
	yyh3931, yyl3931 := z.DecSliceHelperStart()
	var yyc3931 bool
	if yyl3931 == 0 {
		if yyv3931 == nil {
			yyv3931 = []pkg8_runtime.Object{}
			yyc3931 = true
		} else if len(yyv3931) != 0 {
			yyv3931 = yyv3931[:0]
			yyc3931 = true
		}
	} else if yyl3931 > 0 {
		var yyrr3931, yyrl3931 int
		var yyrt3931 bool
		if yyl3931 > cap(yyv3931) {

			yyrg3931 := len(yyv3931) > 0
			yyv23931 := yyv3931
			yyrl3931, yyrt3931 = z.DecInferLen(yyl3931, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3931 {
				if yyrl3931 <= cap(yyv3931) {
					yyv3931 = yyv3931[:yyrl3931]
				} else {
					yyv3931 = make([]pkg8_runtime.Object, yyrl3931)
				}
			} else {
				yyv3931 = make([]pkg8_runtime.Object, yyrl3931)
			}
			yyc3931 = true
			yyrr3931 = len(yyv3931)
			if yyrg3931 {
				copy(yyv3931, yyv23931)
			}
		} else if yyl3931 != len(yyv3931) {
			yyv3931 = yyv3931[:yyl3931]
			yyc3931 = true
		}
		yyj3931 := 0
		for ; yyj3931 < yyrr3931; yyj3931++ {
			yyh3931.ElemContainerState(yyj3931)
			if r.TryDecodeAsNil() {
				yyv3931[yyj3931] = nil
			} else {
				yyv3932 := &yyv3931[yyj3931]
				yym3933 := z.DecBinary()
				_ = yym3933
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3932) {
				} else {
					z.DecFallback(yyv3932, true)
				}
			}

		}
		if yyrt3931 {
			for ; yyj3931 < yyl3931; yyj3931++ {
				yyv3931 = append(yyv3931, nil)
				yyh3931.ElemContainerState(yyj3931)
				if r.TryDecodeAsNil() {
					yyv3931[yyj3931] = nil
				} else {
					yyv3934 := &yyv3931[yyj3931]
					yym3935 := z.DecBinary()
					_ = yym3935
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3934) {
					} else {
						z.DecFallback(yyv3934, true)
					}
				}

			}
		}

	} else {
		yyj3931 := 0
		for ; !r.CheckBreak(); yyj3931++ {

			if yyj3931 >= len(yyv3931) {
				yyv3931 = append(yyv3931, nil) // var yyz3931 pkg8_runtime.Object
				yyc3931 = true
			}
			yyh3931.ElemContainerState(yyj3931)
			if yyj3931 < len(yyv3931) {
				if r.TryDecodeAsNil() {
					yyv3931[yyj3931] = nil
				} else {
					yyv3936 := &yyv3931[yyj3931]
					yym3937 := z.DecBinary()
					_ = yym3937
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3936) {
					} else {
						z.DecFallback(yyv3936, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3931 < len(yyv3931) {
			yyv3931 = yyv3931[:yyj3931]
			yyc3931 = true
		} else if yyj3931 == 0 && yyv3931 == nil {
			yyv3931 = []pkg8_runtime.Object{}
			yyc3931 = true
		}
	}
	yyh3931.End()
	if yyc3931 {
		*v = yyv3931
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3938 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3939 := &yyv3938
		yy3939.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3940 := *v
	yyh3940, yyl3940 := z.DecSliceHelperStart()
	var yyc3940 bool
	if yyl3940 == 0 {
		if yyv3940 == nil {
			yyv3940 = []LimitRangeItem{}
			yyc3940 = true
		} else if len(yyv3940) != 0 {
			yyv3940 = yyv3940[:0]
			yyc3940 = true
		}
	} else if yyl3940 > 0 {
		var yyrr3940, yyrl3940 int
		var yyrt3940 bool
		if yyl3940 > cap(yyv3940) {

			yyrg3940 := len(yyv3940) > 0
			yyv23940 := yyv3940
			yyrl3940, yyrt3940 = z.DecInferLen(yyl3940, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3940 {
				if yyrl3940 <= cap(yyv3940) {
					yyv3940 = yyv3940[:yyrl3940]
				} else {
					yyv3940 = make([]LimitRangeItem, yyrl3940)
				}
			} else {
				yyv3940 = make([]LimitRangeItem, yyrl3940)
			}
			yyc3940 = true
			yyrr3940 = len(yyv3940)
			if yyrg3940 {
				copy(yyv3940, yyv23940)
			}
		} else if yyl3940 != len(yyv3940) {
			yyv3940 = yyv3940[:yyl3940]
			yyc3940 = true
		}
		yyj3940 := 0
		for ; yyj3940 < yyrr3940; yyj3940++ {
			yyh3940.ElemContainerState(yyj3940)
			if r.TryDecodeAsNil() {
				yyv3940[yyj3940] = LimitRangeItem{}
			} else {
				yyv3941 := &yyv3940[yyj3940]
				yyv3941.CodecDecodeSelf(d)
			}

		}
		if yyrt3940 {
			for ; yyj3940 < yyl3940; yyj3940++ {
				yyv3940 = append(yyv3940, LimitRangeItem{})
				yyh3940.ElemContainerState(yyj3940)
				if r.TryDecodeAsNil() {
					yyv3940[yyj3940] = LimitRangeItem{}
				} else {
					yyv3942 := &yyv3940[yyj3940]
					yyv3942.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3940 := 0
		for ; !r.CheckBreak(); yyj3940++ {

			if yyj3940 >= len(yyv3940) {
				yyv3940 = append(yyv3940, LimitRangeItem{}) // var yyz3940 LimitRangeItem
				yyc3940 = true
			}
			yyh3940.ElemContainerState(yyj3940)
			if yyj3940 < len(yyv3940) {
				if r.TryDecodeAsNil() {
					yyv3940[yyj3940] = LimitRangeItem{}
				} else {
					yyv3943 := &yyv3940[yyj3940]
					yyv3943.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3940 < len(yyv3940) {
			yyv3940 = yyv3940[:yyj3940]
			yyc3940 = true
		} else if yyj3940 == 0 && yyv3940 == nil {
			yyv3940 = []LimitRangeItem{}
			yyc3940 = true
		}
	}
	yyh3940.End()
	if yyc3940 {
		*v = yyv3940
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3944 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3945 := &yyv3944
		yy3945.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3946 := *v
	yyh3946, yyl3946 := z.DecSliceHelperStart()
	var yyc3946 bool
	if yyl3946 == 0 {
		if yyv3946 == nil {
			yyv3946 = []LimitRange{}
			yyc3946 = true
		} else if len(yyv3946) != 0 {
			yyv3946 = yyv3946[:0]
			yyc3946 = true
		}
	} else if yyl3946 > 0 {
		var yyrr3946, yyrl3946 int
		var yyrt3946 bool
		if yyl3946 > cap(yyv3946) {

			yyrg3946 := len(yyv3946) > 0
			yyv23946 := yyv3946
			yyrl3946, yyrt3946 = z.DecInferLen(yyl3946, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3946 {
				if yyrl3946 <= cap(yyv3946) {
					yyv3946 = yyv3946[:yyrl3946]
				} else {
					yyv3946 = make([]LimitRange, yyrl3946)
				}
			} else {
				yyv3946 = make([]LimitRange, yyrl3946)
			}
			yyc3946 = true
			yyrr3946 = len(yyv3946)
			if yyrg3946 {
				copy(yyv3946, yyv23946)
			}
		} else if yyl3946 != len(yyv3946) {
			yyv3946 = yyv3946[:yyl3946]
			yyc3946 = true
		}
		yyj3946 := 0
		for ; yyj3946 < yyrr3946; yyj3946++ {
			yyh3946.ElemContainerState(yyj3946)
			if r.TryDecodeAsNil() {
				yyv3946[yyj3946] = LimitRange{}
			} else {
				yyv3947 := &yyv3946[yyj3946]
				yyv3947.CodecDecodeSelf(d)
			}

		}
		if yyrt3946 {
			for ; yyj3946 < yyl3946; yyj3946++ {
				yyv3946 = append(yyv3946, LimitRange{})
				yyh3946.ElemContainerState(yyj3946)
				if r.TryDecodeAsNil() {
					yyv3946[yyj3946] = LimitRange{}
				} else {
					yyv3948 := &yyv3946[yyj3946]
					yyv3948.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3946 := 0
		for ; !r.CheckBreak(); yyj3946++ {

			if yyj3946 >= len(yyv3946) {
				yyv3946 = append(yyv3946, LimitRange{}) // var yyz3946 LimitRange
				yyc3946 = true
			}
			yyh3946.ElemContainerState(yyj3946)
			if yyj3946 < len(yyv3946) {
				if r.TryDecodeAsNil() {
					yyv3946[yyj3946] = LimitRange{}
				} else {
					yyv3949 := &yyv3946[yyj3946]
					yyv3949.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3946 < len(yyv3946) {
			yyv3946 = yyv3946[:yyj3946]
			yyc3946 = true
		} else if yyj3946 == 0 && yyv3946 == nil {
			yyv3946 = []LimitRange{}
			yyc3946 = true
		}
	}
	yyh3946.End()
	if yyc3946 {
		*v = yyv3946
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3950 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3951 := &yyv3950
		yy3951.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3952 := *v
	yyh3952, yyl3952 := z.DecSliceHelperStart()
	var yyc3952 bool
	if yyl3952 == 0 {
		if yyv3952 == nil {
			yyv3952 = []ResourceQuota{}
			yyc3952 = true
		} else if len(yyv3952) != 0 {
			yyv3952 = yyv3952[:0]
			yyc3952 = true
		}
	} else if yyl3952 > 0 {
		var yyrr3952, yyrl3952 int
		var yyrt3952 bool
		if yyl3952 > cap(yyv3952) {

			yyrg3952 := len(yyv3952) > 0
			yyv23952 := yyv3952
			yyrl3952, yyrt3952 = z.DecInferLen(yyl3952, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3952 {
				if yyrl3952 <= cap(yyv3952) {
					yyv3952 = yyv3952[:yyrl3952]
				} else {
					yyv3952 = make([]ResourceQuota, yyrl3952)
				}
			} else {
				yyv3952 = make([]ResourceQuota, yyrl3952)
			}
			yyc3952 = true
			yyrr3952 = len(yyv3952)
			if yyrg3952 {
				copy(yyv3952, yyv23952)
			}
		} else if yyl3952 != len(yyv3952) {
			yyv3952 = yyv3952[:yyl3952]
			yyc3952 = true
		}
		yyj3952 := 0
		for ; yyj3952 < yyrr3952; yyj3952++ {
			yyh3952.ElemContainerState(yyj3952)
			if r.TryDecodeAsNil() {
				yyv3952[yyj3952] = ResourceQuota{}
			} else {
				yyv3953 := &yyv3952[yyj3952]
				yyv3953.CodecDecodeSelf(d)
			}

		}
		if yyrt3952 {
			for ; yyj3952 < yyl3952; yyj3952++ {
				yyv3952 = append(yyv3952, ResourceQuota{})
				yyh3952.ElemContainerState(yyj3952)
				if r.TryDecodeAsNil() {
					yyv3952[yyj3952] = ResourceQuota{}
				} else {
					yyv3954 := &yyv3952[yyj3952]
					yyv3954.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3952 := 0
		for ; !r.CheckBreak(); yyj3952++ {

			if yyj3952 >= len(yyv3952) {
				yyv3952 = append(yyv3952, ResourceQuota{}) // var yyz3952 ResourceQuota
				yyc3952 = true
			}
			yyh3952.ElemContainerState(yyj3952)
			if yyj3952 < len(yyv3952) {
				if r.TryDecodeAsNil() {
					yyv3952[yyj3952] = ResourceQuota{}
				} else {
					yyv3955 := &yyv3952[yyj3952]
					yyv3955.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3952 < len(yyv3952) {
			yyv3952 = yyv3952[:yyj3952]
			yyc3952 = true
		} else if yyj3952 == 0 && yyv3952 == nil {
			yyv3952 = []ResourceQuota{}
			yyc3952 = true
		}
	}
	yyh3952.End()
	if yyc3952 {
		*v = yyv3952
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3956, yyv3956 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3957 := z.EncBinary()
		_ = yym3957
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3956))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3956 == nil {
			r.EncodeNil()
		} else {
			yym3958 := z.EncBinary()
			_ = yym3958
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3956))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3959 := *v
	yyl3959 := r.ReadMapStart()
	yybh3959 := z.DecBasicHandle()
	if yyv3959 == nil {
		yyrl3959, _ := z.DecInferLen(yyl3959, yybh3959.MaxInitLen, 40)
		yyv3959 = make(map[string][]uint8, yyrl3959)
		*v = yyv3959
	}
	var yymk3959 string
	var yymv3959 []uint8
	var yymg3959 bool
	if yybh3959.MapValueReset {
		yymg3959 = true
	}
	if yyl3959 > 0 {
		for yyj3959 := 0; yyj3959 < yyl3959; yyj3959++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3959 = ""
			} else {
				yymk3959 = string(r.DecodeString())
			}

			if yymg3959 {
				yymv3959 = yyv3959[yymk3959]
			} else {
				yymv3959 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3959 = nil
			} else {
				yyv3961 := &yymv3959
				yym3962 := z.DecBinary()
				_ = yym3962
				if false {
				} else {
					*yyv3961 = r.DecodeBytes(*(*[]byte)(yyv3961), false, false)
				}
			}

			if yyv3959 != nil {
				yyv3959[yymk3959] = yymv3959
			}
		}
	} else if yyl3959 < 0 {
		for yyj3959 := 0; !r.CheckBreak(); yyj3959++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3959 = ""
			} else {
				yymk3959 = string(r.DecodeString())
			}

			if yymg3959 {
				yymv3959 = yyv3959[yymk3959]
			} else {
				yymv3959 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3959 = nil
			} else {
				yyv3964 := &yymv3959
				yym3965 := z.DecBinary()
				_ = yym3965
				if false {
				} else {
					*yyv3964 = r.DecodeBytes(*(*[]byte)(yyv3964), false, false)
				}
			}

			if yyv3959 != nil {
				yyv3959[yymk3959] = yymv3959
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3966 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3967 := &yyv3966
		yy3967.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3968 := *v
	yyh3968, yyl3968 := z.DecSliceHelperStart()
	var yyc3968 bool
	if yyl3968 == 0 {
		if yyv3968 == nil {
			yyv3968 = []Secret{}
			yyc3968 = true
		} else if len(yyv3968) != 0 {
			yyv3968 = yyv3968[:0]
			yyc3968 = true
		}
	} else if yyl3968 > 0 {
		var yyrr3968, yyrl3968 int
		var yyrt3968 bool
		if yyl3968 > cap(yyv3968) {

			yyrg3968 := len(yyv3968) > 0
			yyv23968 := yyv3968
			yyrl3968, yyrt3968 = z.DecInferLen(yyl3968, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3968 {
				if yyrl3968 <= cap(yyv3968) {
					yyv3968 = yyv3968[:yyrl3968]
				} else {
					yyv3968 = make([]Secret, yyrl3968)
				}
			} else {
				yyv3968 = make([]Secret, yyrl3968)
			}
			yyc3968 = true
			yyrr3968 = len(yyv3968)
			if yyrg3968 {
				copy(yyv3968, yyv23968)
			}
		} else if yyl3968 != len(yyv3968) {
			yyv3968 = yyv3968[:yyl3968]
			yyc3968 = true
		}
		yyj3968 := 0
		for ; yyj3968 < yyrr3968; yyj3968++ {
			yyh3968.ElemContainerState(yyj3968)
			if r.TryDecodeAsNil() {
				yyv3968[yyj3968] = Secret{}
			} else {
				yyv3969 := &yyv3968[yyj3968]
				yyv3969.CodecDecodeSelf(d)
			}

		}
		if yyrt3968 {
			for ; yyj3968 < yyl3968; yyj3968++ {
				yyv3968 = append(yyv3968, Secret{})
				yyh3968.ElemContainerState(yyj3968)
				if r.TryDecodeAsNil() {
					yyv3968[yyj3968] = Secret{}
				} else {
					yyv3970 := &yyv3968[yyj3968]
					yyv3970.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3968 := 0
		for ; !r.CheckBreak(); yyj3968++ {

			if yyj3968 >= len(yyv3968) {
				yyv3968 = append(yyv3968, Secret{}) // var yyz3968 Secret
				yyc3968 = true
			}
			yyh3968.ElemContainerState(yyj3968)
			if yyj3968 < len(yyv3968) {
				if r.TryDecodeAsNil() {
					yyv3968[yyj3968] = Secret{}
				} else {
					yyv3971 := &yyv3968[yyj3968]
					yyv3971.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3968 < len(yyv3968) {
			yyv3968 = yyv3968[:yyj3968]
			yyc3968 = true
		} else if yyj3968 == 0 && yyv3968 == nil {
			yyv3968 = []Secret{}
			yyc3968 = true
		}
	}
	yyh3968.End()
	if yyc3968 {
		*v = yyv3968
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3972 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3973 := &yyv3972
		yy3973.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3974 := *v
	yyh3974, yyl3974 := z.DecSliceHelperStart()
	var yyc3974 bool
	if yyl3974 == 0 {
		if yyv3974 == nil {
			yyv3974 = []ComponentCondition{}
			yyc3974 = true
		} else if len(yyv3974) != 0 {
			yyv3974 = yyv3974[:0]
			yyc3974 = true
		}
	} else if yyl3974 > 0 {
		var yyrr3974, yyrl3974 int
		var yyrt3974 bool
		if yyl3974 > cap(yyv3974) {

			yyrg3974 := len(yyv3974) > 0
			yyv23974 := yyv3974
			yyrl3974, yyrt3974 = z.DecInferLen(yyl3974, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3974 {
				if yyrl3974 <= cap(yyv3974) {
					yyv3974 = yyv3974[:yyrl3974]
				} else {
					yyv3974 = make([]ComponentCondition, yyrl3974)
				}
			} else {
				yyv3974 = make([]ComponentCondition, yyrl3974)
			}
			yyc3974 = true
			yyrr3974 = len(yyv3974)
			if yyrg3974 {
				copy(yyv3974, yyv23974)
			}
		} else if yyl3974 != len(yyv3974) {
			yyv3974 = yyv3974[:yyl3974]
			yyc3974 = true
		}
		yyj3974 := 0
		for ; yyj3974 < yyrr3974; yyj3974++ {
			yyh3974.ElemContainerState(yyj3974)
			if r.TryDecodeAsNil() {
				yyv3974[yyj3974] = ComponentCondition{}
			} else {
				yyv3975 := &yyv3974[yyj3974]
				yyv3975.CodecDecodeSelf(d)
			}

		}
		if yyrt3974 {
			for ; yyj3974 < yyl3974; yyj3974++ {
				yyv3974 = append(yyv3974, ComponentCondition{})
				yyh3974.ElemContainerState(yyj3974)
				if r.TryDecodeAsNil() {
					yyv3974[yyj3974] = ComponentCondition{}
				} else {
					yyv3976 := &yyv3974[yyj3974]
					yyv3976.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3974 := 0
		for ; !r.CheckBreak(); yyj3974++ {

			if yyj3974 >= len(yyv3974) {
				yyv3974 = append(yyv3974, ComponentCondition{}) // var yyz3974 ComponentCondition
				yyc3974 = true
			}
			yyh3974.ElemContainerState(yyj3974)
			if yyj3974 < len(yyv3974) {
				if r.TryDecodeAsNil() {
					yyv3974[yyj3974] = ComponentCondition{}
				} else {
					yyv3977 := &yyv3974[yyj3974]
					yyv3977.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3974 < len(yyv3974) {
			yyv3974 = yyv3974[:yyj3974]
			yyc3974 = true
		} else if yyj3974 == 0 && yyv3974 == nil {
			yyv3974 = []ComponentCondition{}
			yyc3974 = true
		}
	}
	yyh3974.End()
	if yyc3974 {
		*v = yyv3974
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3978 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3979 := &yyv3978
		yy3979.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3980 := *v
	yyh3980, yyl3980 := z.DecSliceHelperStart()
	var yyc3980 bool
	if yyl3980 == 0 {
		if yyv3980 == nil {
			yyv3980 = []ComponentStatus{}
			yyc3980 = true
		} else if len(yyv3980) != 0 {
			yyv3980 = yyv3980[:0]
			yyc3980 = true
		}
	} else if yyl3980 > 0 {
		var yyrr3980, yyrl3980 int
		var yyrt3980 bool
		if yyl3980 > cap(yyv3980) {

			yyrg3980 := len(yyv3980) > 0
			yyv23980 := yyv3980
			yyrl3980, yyrt3980 = z.DecInferLen(yyl3980, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3980 {
				if yyrl3980 <= cap(yyv3980) {
					yyv3980 = yyv3980[:yyrl3980]
				} else {
					yyv3980 = make([]ComponentStatus, yyrl3980)
				}
			} else {
				yyv3980 = make([]ComponentStatus, yyrl3980)
			}
			yyc3980 = true
			yyrr3980 = len(yyv3980)
			if yyrg3980 {
				copy(yyv3980, yyv23980)
			}
		} else if yyl3980 != len(yyv3980) {
			yyv3980 = yyv3980[:yyl3980]
			yyc3980 = true
		}
		yyj3980 := 0
		for ; yyj3980 < yyrr3980; yyj3980++ {
			yyh3980.ElemContainerState(yyj3980)
			if r.TryDecodeAsNil() {
				yyv3980[yyj3980] = ComponentStatus{}
			} else {
				yyv3981 := &yyv3980[yyj3980]
				yyv3981.CodecDecodeSelf(d)
			}

		}
		if yyrt3980 {
			for ; yyj3980 < yyl3980; yyj3980++ {
				yyv3980 = append(yyv3980, ComponentStatus{})
				yyh3980.ElemContainerState(yyj3980)
				if r.TryDecodeAsNil() {
					yyv3980[yyj3980] = ComponentStatus{}
				} else {
					yyv3982 := &yyv3980[yyj3980]
					yyv3982.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3980 := 0
		for ; !r.CheckBreak(); yyj3980++ {

			if yyj3980 >= len(yyv3980) {
				yyv3980 = append(yyv3980, ComponentStatus{}) // var yyz3980 ComponentStatus
				yyc3980 = true
			}
			yyh3980.ElemContainerState(yyj3980)
			if yyj3980 < len(yyv3980) {
				if r.TryDecodeAsNil() {
					yyv3980[yyj3980] = ComponentStatus{}
				} else {
					yyv3983 := &yyv3980[yyj3980]
					yyv3983.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3980 < len(yyv3980) {
			yyv3980 = yyv3980[:yyj3980]
			yyc3980 = true
		} else if yyj3980 == 0 && yyv3980 == nil {
			yyv3980 = []ComponentStatus{}
			yyc3980 = true
		}
	}
	yyh3980.End()
	if yyc3980 {
		*v = yyv3980
	}
}
